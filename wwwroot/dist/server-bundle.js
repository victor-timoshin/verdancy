/*! For license information please see server-bundle.js.LICENSE.txt */
(()=>{var e={2299:e=>{"use strict";const t={NODEENV:"production",BROWSER:!1}.HOSTNAME||"127.0.0.1",n=parseInt({NODEENV:"production",BROWSER:!1}.PORT)||5e3;e.exports={isDebugMode:!1,isDevelopmentMode:"development"==="production".trim().toLowerCase(),dev:{hostname:t,port:8082,publicPath:`http://${t}:8082/dist/`},realport:n,disabledChunkhash:!1,tmpl:{master:"index",extname:".html"},paths:{src:{base:"./src/",views:"./src/shared/views/",layouts:"./src/shared/views/layouts/"},output:{base:"./wwwroot/",dist:"./wwwroot/dist/"}},urls:{publicPath:"./dist/"}}},9078:(e,t,n)=>{"use strict";var i=n(159),a=n(983);function s(e){if(!(this instanceof s))return new s(e);this.headers=e.headers,this.negotiator=new i(e)}function o(e){return-1===e.indexOf("/")?a.lookup(e):e}function r(e){return"string"==typeof e}e.exports=s,s.prototype.type=s.prototype.types=function(e){var t=e;if(t&&!Array.isArray(t)){t=new Array(arguments.length);for(var n=0;n<t.length;n++)t[n]=arguments[n]}if(!t||0===t.length)return this.negotiator.mediaTypes();if(!this.headers.accept)return t[0];var i=t.map(o),a=this.negotiator.mediaTypes(i.filter(r)),s=a[0];return!!s&&t[i.indexOf(s)]},s.prototype.encoding=s.prototype.encodings=function(e){var t=e;if(t&&!Array.isArray(t)){t=new Array(arguments.length);for(var n=0;n<t.length;n++)t[n]=arguments[n]}return t&&0!==t.length?this.negotiator.encodings(t)[0]||!1:this.negotiator.encodings()},s.prototype.charset=s.prototype.charsets=function(e){var t=e;if(t&&!Array.isArray(t)){t=new Array(arguments.length);for(var n=0;n<t.length;n++)t[n]=arguments[n]}return t&&0!==t.length?this.negotiator.charsets(t)[0]||!1:this.negotiator.charsets()},s.prototype.lang=s.prototype.langs=s.prototype.language=s.prototype.languages=function(e){var t=e;if(t&&!Array.isArray(t)){t=new Array(arguments.length);for(var n=0;n<t.length;n++)t[n]=arguments[n]}return t&&0!==t.length?this.negotiator.languages(t)[0]||!1:this.negotiator.languages()}},9669:(e,t,n)=>{e.exports=n(1609)},7970:(e,t,n)=>{"use strict";var i=n(4867),a=n(6026),s=n(7430),o=n(5327),r=n(8605),c=n(7211),p=n(938).http,l=n(938).https,u=n(8835),d=n(8761),m=n(696),f=n(5061),h=n(481),v=/https:?/;function x(e,t,n){if(e.hostname=t.host,e.host=t.host,e.port=t.port,e.path=n,t.auth){var i=Buffer.from(t.auth.username+":"+t.auth.password,"utf8").toString("base64");e.headers["Proxy-Authorization"]="Basic "+i}e.beforeRedirect=function(e){e.headers.host=e.host,x(e,t,e.href)}}e.exports=function(e){return new Promise((function(t,n){var g=function(e){t(e)},b=function(e){n(e)},y=e.data,w=e.headers;if(w["User-Agent"]||w["user-agent"]||(w["User-Agent"]="axios/"+m.version),y&&!i.isStream(y)){if(Buffer.isBuffer(y));else if(i.isArrayBuffer(y))y=Buffer.from(new Uint8Array(y));else{if(!i.isString(y))return b(f("Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream",e));y=Buffer.from(y,"utf-8")}w["Content-Length"]=y.length}var _=void 0;e.auth&&(_=(e.auth.username||"")+":"+(e.auth.password||""));var k=s(e.baseURL,e.url),E=u.parse(k),j=E.protocol||"http:";if(!_&&E.auth){var S=E.auth.split(":");_=(S[0]||"")+":"+(S[1]||"")}_&&delete w.Authorization;var C=v.test(j),O=C?e.httpsAgent:e.httpAgent,T={path:o(E.path,e.params,e.paramsSerializer).replace(/^\?/,""),method:e.method.toUpperCase(),headers:w,agent:O,agents:{http:e.httpAgent,https:e.httpsAgent},auth:_};e.socketPath?T.socketPath=e.socketPath:(T.hostname=E.hostname,T.port=E.port);var B,R=e.proxy;if(!R&&!1!==R){var A=j.slice(0,-1)+"_proxy",N={NODEENV:"production",BROWSER:!1}[A]||{NODEENV:"production",BROWSER:!1}[A.toUpperCase()];if(N){var q=u.parse(N),P={NODEENV:"production",BROWSER:!1}.no_proxy||{NODEENV:"production",BROWSER:!1}.NO_PROXY,L=!0;if(P)L=!P.split(",").map((function(e){return e.trim()})).some((function(e){return!!e&&("*"===e||("."===e[0]&&E.hostname.substr(E.hostname.length-e.length)===e||E.hostname===e))}));if(L&&(R={host:q.hostname,port:q.port,protocol:q.protocol},q.auth)){var I=q.auth.split(":");R.auth={username:I[0],password:I[1]}}}}R&&(T.headers.host=E.hostname+(E.port?":"+E.port:""),x(T,R,j+"//"+E.hostname+(E.port?":"+E.port:"")+T.path));var F=C&&(!R||v.test(R.protocol));e.transport?B=e.transport:0===e.maxRedirects?B=F?c:r:(e.maxRedirects&&(T.maxRedirects=e.maxRedirects),B=F?l:p),e.maxBodyLength>-1&&(T.maxBodyLength=e.maxBodyLength);var U=B.request(T,(function(t){if(!U.aborted){var n=t,s=t.req||U;if(204!==t.statusCode&&"HEAD"!==s.method&&!1!==e.decompress)switch(t.headers["content-encoding"]){case"gzip":case"compress":case"deflate":n=n.pipe(d.createUnzip()),delete t.headers["content-encoding"]}var o={status:t.statusCode,statusText:t.statusMessage,headers:t.headers,config:e,request:s};if("stream"===e.responseType)o.data=n,a(g,b,o);else{var r=[];n.on("data",(function(t){r.push(t),e.maxContentLength>-1&&Buffer.concat(r).length>e.maxContentLength&&(n.destroy(),b(f("maxContentLength size of "+e.maxContentLength+" exceeded",e,null,s)))})),n.on("error",(function(t){U.aborted||b(h(t,e,null,s))})),n.on("end",(function(){var t=Buffer.concat(r);"arraybuffer"!==e.responseType&&(t=t.toString(e.responseEncoding),e.responseEncoding&&"utf8"!==e.responseEncoding||(t=i.stripBOM(t))),o.data=t,a(g,b,o)}))}}}));U.on("error",(function(t){U.aborted&&"ERR_FR_TOO_MANY_REDIRECTS"!==t.code||b(h(t,e,null,U))})),e.timeout&&U.setTimeout(e.timeout,(function(){U.abort(),b(f("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED",U))})),e.cancelToken&&e.cancelToken.promise.then((function(e){U.aborted||(U.abort(),b(e))})),i.isStream(y)?y.on("error",(function(t){b(h(t,e,null,U))})).pipe(U):U.end(y)}))}},5448:(e,t,n)=>{"use strict";var i=n(4867),a=n(6026),s=n(4372),o=n(5327),r=n(7430),c=n(4109),p=n(7985),l=n(5061);e.exports=function(e){return new Promise((function(t,n){var u=e.data,d=e.headers;i.isFormData(u)&&delete d["Content-Type"];var m=new XMLHttpRequest;if(e.auth){var f=e.auth.username||"",h=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";d.Authorization="Basic "+btoa(f+":"+h)}var v=r(e.baseURL,e.url);if(m.open(e.method.toUpperCase(),o(v,e.params,e.paramsSerializer),!0),m.timeout=e.timeout,m.onreadystatechange=function(){if(m&&4===m.readyState&&(0!==m.status||m.responseURL&&0===m.responseURL.indexOf("file:"))){var i="getAllResponseHeaders"in m?c(m.getAllResponseHeaders()):null,s={data:e.responseType&&"text"!==e.responseType?m.response:m.responseText,status:m.status,statusText:m.statusText,headers:i,config:e,request:m};a(t,n,s),m=null}},m.onabort=function(){m&&(n(l("Request aborted",e,"ECONNABORTED",m)),m=null)},m.onerror=function(){n(l("Network Error",e,null,m)),m=null},m.ontimeout=function(){var t="timeout of "+e.timeout+"ms exceeded";e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),n(l(t,e,"ECONNABORTED",m)),m=null},i.isStandardBrowserEnv()){var x=(e.withCredentials||p(v))&&e.xsrfCookieName?s.read(e.xsrfCookieName):void 0;x&&(d[e.xsrfHeaderName]=x)}if("setRequestHeader"in m&&i.forEach(d,(function(e,t){void 0===u&&"content-type"===t.toLowerCase()?delete d[t]:m.setRequestHeader(t,e)})),i.isUndefined(e.withCredentials)||(m.withCredentials=!!e.withCredentials),e.responseType)try{m.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&m.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&m.upload&&m.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){m&&(m.abort(),n(e),m=null)})),u||(u=null),m.send(u)}))}},1609:(e,t,n)=>{"use strict";var i=n(4867),a=n(1849),s=n(321),o=n(7185);function r(e){var t=new s(e),n=a(s.prototype.request,t);return i.extend(n,s.prototype,t),i.extend(n,t),n}var c=r(n(5655));c.Axios=s,c.create=function(e){return r(o(c.defaults,e))},c.Cancel=n(5263),c.CancelToken=n(4972),c.isCancel=n(6502),c.all=function(e){return Promise.all(e)},c.spread=n(8713),c.isAxiosError=n(6268),e.exports=c,e.exports.default=c},5263:e=>{"use strict";function t(e){this.message=e}t.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},t.prototype.__CANCEL__=!0,e.exports=t},4972:(e,t,n)=>{"use strict";var i=n(5263);function a(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var n=this;e((function(e){n.reason||(n.reason=new i(e),t(n.reason))}))}a.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},a.source=function(){var e;return{token:new a((function(t){e=t})),cancel:e}},e.exports=a},6502:e=>{"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},321:(e,t,n)=>{"use strict";var i=n(4867),a=n(5327),s=n(782),o=n(3572),r=n(7185);function c(e){this.defaults=e,this.interceptors={request:new s,response:new s}}c.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=r(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var t=[o,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach((function(e){t.unshift(e.fulfilled,e.rejected)})),this.interceptors.response.forEach((function(e){t.push(e.fulfilled,e.rejected)}));t.length;)n=n.then(t.shift(),t.shift());return n},c.prototype.getUri=function(e){return e=r(this.defaults,e),a(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},i.forEach(["delete","get","head","options"],(function(e){c.prototype[e]=function(t,n){return this.request(r(n||{},{method:e,url:t,data:(n||{}).data}))}})),i.forEach(["post","put","patch"],(function(e){c.prototype[e]=function(t,n,i){return this.request(r(i||{},{method:e,url:t,data:n}))}})),e.exports=c},782:(e,t,n)=>{"use strict";var i=n(4867);function a(){this.handlers=[]}a.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},a.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},a.prototype.forEach=function(e){i.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=a},7430:(e,t,n)=>{"use strict";var i=n(1793),a=n(7303);e.exports=function(e,t){return e&&!i(t)?a(e,t):t}},5061:(e,t,n)=>{"use strict";var i=n(481);e.exports=function(e,t,n,a,s){var o=new Error(e);return i(o,t,n,a,s)}},3572:(e,t,n)=>{"use strict";var i=n(4867),a=n(8527),s=n(6502),o=n(5655);function r(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return r(e),e.headers=e.headers||{},e.data=a(e.data,e.headers,e.transformRequest),e.headers=i.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),i.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||o.adapter)(e).then((function(t){return r(e),t.data=a(t.data,t.headers,e.transformResponse),t}),(function(t){return s(t)||(r(e),t&&t.response&&(t.response.data=a(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},481:e=>{"use strict";e.exports=function(e,t,n,i,a){return e.config=t,n&&(e.code=n),e.request=i,e.response=a,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},7185:(e,t,n)=>{"use strict";var i=n(4867);e.exports=function(e,t){t=t||{};var n={},a=["url","method","data"],s=["headers","auth","proxy","params"],o=["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","timeoutMessage","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","decompress","maxContentLength","maxBodyLength","maxRedirects","transport","httpAgent","httpsAgent","cancelToken","socketPath","responseEncoding"],r=["validateStatus"];function c(e,t){return i.isPlainObject(e)&&i.isPlainObject(t)?i.merge(e,t):i.isPlainObject(t)?i.merge({},t):i.isArray(t)?t.slice():t}function p(a){i.isUndefined(t[a])?i.isUndefined(e[a])||(n[a]=c(void 0,e[a])):n[a]=c(e[a],t[a])}i.forEach(a,(function(e){i.isUndefined(t[e])||(n[e]=c(void 0,t[e]))})),i.forEach(s,p),i.forEach(o,(function(a){i.isUndefined(t[a])?i.isUndefined(e[a])||(n[a]=c(void 0,e[a])):n[a]=c(void 0,t[a])})),i.forEach(r,(function(i){i in t?n[i]=c(e[i],t[i]):i in e&&(n[i]=c(void 0,e[i]))}));var l=a.concat(s).concat(o).concat(r),u=Object.keys(e).concat(Object.keys(t)).filter((function(e){return-1===l.indexOf(e)}));return i.forEach(u,p),n}},6026:(e,t,n)=>{"use strict";var i=n(5061);e.exports=function(e,t,n){var a=n.config.validateStatus;n.status&&a&&!a(n.status)?t(i("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},8527:(e,t,n)=>{"use strict";var i=n(4867);e.exports=function(e,t,n){return i.forEach(n,(function(n){e=n(e,t)})),e}},5655:(e,t,n)=>{"use strict";var i=n(4867),a=n(6016),s={"Content-Type":"application/x-www-form-urlencoded"};function o(e,t){!i.isUndefined(e)&&i.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var r,c={adapter:("undefined"!=typeof XMLHttpRequest?r=n(5448):"undefined"!=typeof process&&"[object process]"===Object.prototype.toString.call(process)&&(r=n(7970)),r),transformRequest:[function(e,t){return a(t,"Accept"),a(t,"Content-Type"),i.isFormData(e)||i.isArrayBuffer(e)||i.isBuffer(e)||i.isStream(e)||i.isFile(e)||i.isBlob(e)?e:i.isArrayBufferView(e)?e.buffer:i.isURLSearchParams(e)?(o(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):i.isObject(e)?(o(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(e){return e>=200&&e<300}};c.headers={common:{Accept:"application/json, text/plain, */*"}},i.forEach(["delete","get","head"],(function(e){c.headers[e]={}})),i.forEach(["post","put","patch"],(function(e){c.headers[e]=i.merge(s)})),e.exports=c},1849:e=>{"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),i=0;i<n.length;i++)n[i]=arguments[i];return e.apply(t,n)}}},5327:(e,t,n)=>{"use strict";var i=n(4867);function a(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var s;if(n)s=n(t);else if(i.isURLSearchParams(t))s=t.toString();else{var o=[];i.forEach(t,(function(e,t){null!=e&&(i.isArray(e)?t+="[]":e=[e],i.forEach(e,(function(e){i.isDate(e)?e=e.toISOString():i.isObject(e)&&(e=JSON.stringify(e)),o.push(a(t)+"="+a(e))})))})),s=o.join("&")}if(s){var r=e.indexOf("#");-1!==r&&(e=e.slice(0,r)),e+=(-1===e.indexOf("?")?"?":"&")+s}return e}},7303:e=>{"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},4372:(e,t,n)=>{"use strict";var i=n(4867);e.exports=i.isStandardBrowserEnv()?{write:function(e,t,n,a,s,o){var r=[];r.push(e+"="+encodeURIComponent(t)),i.isNumber(n)&&r.push("expires="+new Date(n).toGMTString()),i.isString(a)&&r.push("path="+a),i.isString(s)&&r.push("domain="+s),!0===o&&r.push("secure"),document.cookie=r.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},1793:e=>{"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},6268:e=>{"use strict";e.exports=function(e){return"object"==typeof e&&!0===e.isAxiosError}},7985:(e,t,n)=>{"use strict";var i=n(4867);e.exports=i.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function a(e){var i=e;return t&&(n.setAttribute("href",i),i=n.href),n.setAttribute("href",i),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=a(window.location.href),function(t){var n=i.isString(t)?a(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},6016:(e,t,n)=>{"use strict";var i=n(4867);e.exports=function(e,t){i.forEach(e,(function(n,i){i!==t&&i.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[i])}))}},4109:(e,t,n)=>{"use strict";var i=n(4867),a=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,s,o={};return e?(i.forEach(e.split("\n"),(function(e){if(s=e.indexOf(":"),t=i.trim(e.substr(0,s)).toLowerCase(),n=i.trim(e.substr(s+1)),t){if(o[t]&&a.indexOf(t)>=0)return;o[t]="set-cookie"===t?(o[t]?o[t]:[]).concat([n]):o[t]?o[t]+", "+n:n}})),o):o}},8713:e=>{"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},4867:(e,t,n)=>{"use strict";var i=n(1849),a=Object.prototype.toString;function s(e){return"[object Array]"===a.call(e)}function o(e){return void 0===e}function r(e){return null!==e&&"object"==typeof e}function c(e){if("[object Object]"!==a.call(e))return!1;var t=Object.getPrototypeOf(e);return null===t||t===Object.prototype}function p(e){return"[object Function]"===a.call(e)}function l(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),s(e))for(var n=0,i=e.length;n<i;n++)t.call(null,e[n],n,e);else for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&t.call(null,e[a],a,e)}e.exports={isArray:s,isArrayBuffer:function(e){return"[object ArrayBuffer]"===a.call(e)},isBuffer:function(e){return null!==e&&!o(e)&&null!==e.constructor&&!o(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:r,isPlainObject:c,isUndefined:o,isDate:function(e){return"[object Date]"===a.call(e)},isFile:function(e){return"[object File]"===a.call(e)},isBlob:function(e){return"[object Blob]"===a.call(e)},isFunction:p,isStream:function(e){return r(e)&&p(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:l,merge:function e(){var t={};function n(n,i){c(t[i])&&c(n)?t[i]=e(t[i],n):c(n)?t[i]=e({},n):s(n)?t[i]=n.slice():t[i]=n}for(var i=0,a=arguments.length;i<a;i++)l(arguments[i],n);return t},extend:function(e,t,n){return l(t,(function(t,a){e[a]=n&&"function"==typeof t?i(t,n):t})),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e}}},696:e=>{"use strict";e.exports=JSON.parse('{"name":"axios","version":"0.21.1","description":"Promise based HTTP client for the browser and node.js","main":"index.js","scripts":{"test":"grunt test && bundlesize","start":"node ./sandbox/server.js","build":"NODE_ENV=production grunt build","preversion":"npm test","version":"npm run build && grunt version && git add -A dist && git add CHANGELOG.md bower.json package.json","postversion":"git push && git push --tags","examples":"node ./examples/server.js","coveralls":"cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js","fix":"eslint --fix lib/**/*.js"},"repository":{"type":"git","url":"https://github.com/axios/axios.git"},"keywords":["xhr","http","ajax","promise","node"],"author":"Matt Zabriskie","license":"MIT","bugs":{"url":"https://github.com/axios/axios/issues"},"homepage":"https://github.com/axios/axios","devDependencies":{"bundlesize":"^0.17.0","coveralls":"^3.0.0","es6-promise":"^4.2.4","grunt":"^1.0.2","grunt-banner":"^0.6.0","grunt-cli":"^1.2.0","grunt-contrib-clean":"^1.1.0","grunt-contrib-watch":"^1.0.0","grunt-eslint":"^20.1.0","grunt-karma":"^2.0.0","grunt-mocha-test":"^0.13.3","grunt-ts":"^6.0.0-beta.19","grunt-webpack":"^1.0.18","istanbul-instrumenter-loader":"^1.0.0","jasmine-core":"^2.4.1","karma":"^1.3.0","karma-chrome-launcher":"^2.2.0","karma-coverage":"^1.1.1","karma-firefox-launcher":"^1.1.0","karma-jasmine":"^1.1.1","karma-jasmine-ajax":"^0.1.13","karma-opera-launcher":"^1.0.0","karma-safari-launcher":"^1.0.0","karma-sauce-launcher":"^1.2.0","karma-sinon":"^1.0.5","karma-sourcemap-loader":"^0.3.7","karma-webpack":"^1.7.0","load-grunt-tasks":"^3.5.2","minimist":"^1.2.0","mocha":"^5.2.0","sinon":"^4.5.0","typescript":"^2.8.1","url-search-params":"^0.10.0","webpack":"^1.13.1","webpack-dev-server":"^1.14.1"},"browser":{"./lib/adapters/http.js":"./lib/adapters/xhr.js"},"jsdelivr":"dist/axios.min.js","unpkg":"dist/axios.min.js","typings":"./index.d.ts","dependencies":{"follow-redirects":"^1.10.0"},"bundlesize":[{"path":"./dist/axios.min.js","threshold":"5kB"}]}')},7936:(e,t,n)=>{var i=n(6417),a=function(){};a.prototype.getRandomBytes=function(e){var t=4096,n=this;if((e=e||12)>t)return i.randomBytes(e);var a=parseInt(t/e),s=parseInt(.85*a);if(!s)return i.randomBytes(e);if(null==this.bytesBufferIndex&&(this.bytesBufferIndex=-1),this.bytesBufferIndex==a&&(this.bytesBuffer=null,this.bytesBufferIndex=-1),(-1==this.bytesBufferIndex||this.bytesBufferIndex>s)&&(this.isGeneratingBytes||(this.isGeneratingBytes=!0,i.randomBytes(t,(function(e,t){n.bytesBuffer=t,n.bytesBufferIndex=0,n.isGeneratingBytes=!1}))),-1==this.bytesBufferIndex))return i.randomBytes(e);var o=this.bytesBuffer.slice(e*this.bytesBufferIndex,e*(this.bytesBufferIndex+1));return this.bytesBufferIndex++,o},a.prototype.generateId=function(){var e=Buffer.alloc(15);return e.writeInt32BE?(this.sequenceNumber=this.sequenceNumber+1|0,e.writeInt32BE(this.sequenceNumber,11),i.randomBytes?this.getRandomBytes(12).copy(e):[0,4,8].forEach((function(t){e.writeInt32BE(Math.random()*Math.pow(2,32)|0,t)})),e.toString("base64").replace(/\//g,"_").replace(/\+/g,"-")):Math.abs(Math.random()*Math.random()*Date.now()|0).toString()+Math.abs(Math.random()*Math.random()*Date.now()|0).toString()},e.exports=new a},9376:e=>{"use strict";e.exports={mask:(e,t,n,i,a)=>{for(var s=0;s<a;s++)n[i+s]=e[s]^t[3&s]},unmask:(e,t)=>{const n=e.length;for(var i=0;i<n;i++)e[i]^=t[3&i]}}},1891:(e,t,n)=>{"use strict";try{e.exports=n(9516)(__dirname)}catch(t){e.exports=n(9376)}},8767:e=>{function t(e){if(e)return function(e){for(var n in t.prototype)e[n]=t.prototype[n];return e}(e)}e.exports=t,t.prototype.on=t.prototype.addEventListener=function(e,t){return this._callbacks=this._callbacks||{},(this._callbacks["$"+e]=this._callbacks["$"+e]||[]).push(t),this},t.prototype.once=function(e,t){function n(){this.off(e,n),t.apply(this,arguments)}return n.fn=t,this.on(e,n),this},t.prototype.off=t.prototype.removeListener=t.prototype.removeAllListeners=t.prototype.removeEventListener=function(e,t){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var n,i=this._callbacks["$"+e];if(!i)return this;if(1==arguments.length)return delete this._callbacks["$"+e],this;for(var a=0;a<i.length;a++)if((n=i[a])===t||n.fn===t){i.splice(a,1);break}return 0===i.length&&delete this._callbacks["$"+e],this},t.prototype.emit=function(e){this._callbacks=this._callbacks||{};for(var t=new Array(arguments.length-1),n=this._callbacks["$"+e],i=1;i<arguments.length;i++)t[i-1]=arguments[i];if(n){i=0;for(var a=(n=n.slice(0)).length;i<a;++i)n[i].apply(this,t)}return this},t.prototype.listeners=function(e){return this._callbacks=this._callbacks||{},this._callbacks["$"+e]||[]},t.prototype.hasListeners=function(e){return!!this.listeners(e).length}},6489:(e,t)=>{"use strict";t.parse=function(e,t){if("string"!=typeof e)throw new TypeError("argument str must be a string");for(var i={},s=t||{},r=e.split(a),c=s.decode||n,p=0;p<r.length;p++){var l=r[p],u=l.indexOf("=");if(!(u<0)){var d=l.substr(0,u).trim(),m=l.substr(++u,l.length).trim();'"'==m[0]&&(m=m.slice(1,-1)),null==i[d]&&(i[d]=o(m,c))}}return i},t.serialize=function(e,t,n){var a=n||{},o=a.encode||i;if("function"!=typeof o)throw new TypeError("option encode is invalid");if(!s.test(e))throw new TypeError("argument name is invalid");var r=o(t);if(r&&!s.test(r))throw new TypeError("argument val is invalid");var c=e+"="+r;if(null!=a.maxAge){var p=a.maxAge-0;if(isNaN(p))throw new Error("maxAge should be a Number");c+="; Max-Age="+Math.floor(p)}if(a.domain){if(!s.test(a.domain))throw new TypeError("option domain is invalid");c+="; Domain="+a.domain}if(a.path){if(!s.test(a.path))throw new TypeError("option path is invalid");c+="; Path="+a.path}if(a.expires){if("function"!=typeof a.expires.toUTCString)throw new TypeError("option expires is invalid");c+="; Expires="+a.expires.toUTCString()}a.httpOnly&&(c+="; HttpOnly");a.secure&&(c+="; Secure");if(a.sameSite){switch("string"==typeof a.sameSite?a.sameSite.toLowerCase():a.sameSite){case!0:c+="; SameSite=Strict";break;case"lax":c+="; SameSite=Lax";break;case"strict":c+="; SameSite=Strict";break;case"none":c+="; SameSite=None";break;default:throw new TypeError("option sameSite is invalid")}}return c};var n=decodeURIComponent,i=encodeURIComponent,a=/; */,s=/^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;function o(e,t){try{return t(e)}catch(t){return e}}},7846:(e,t,n)=>{!function(){"use strict";var t=n(7418),i=n(5181),a={origin:"*",methods:"GET,HEAD,PUT,PATCH,POST,DELETE",preflightContinue:!1,optionsSuccessStatus:204};function s(e){return"string"==typeof e||e instanceof String}function o(e,t){if(Array.isArray(t)){for(var n=0;n<t.length;++n)if(o(e,t[n]))return!0;return!1}return s(t)?e===t:t instanceof RegExp?t.test(e):!!t}function r(e,t){var n,i=t.headers.origin,a=[];return e.origin&&"*"!==e.origin?s(e.origin)?(a.push([{key:"Access-Control-Allow-Origin",value:e.origin}]),a.push([{key:"Vary",value:"Origin"}])):(n=o(i,e.origin),a.push([{key:"Access-Control-Allow-Origin",value:!!n&&i}]),a.push([{key:"Vary",value:"Origin"}])):a.push([{key:"Access-Control-Allow-Origin",value:"*"}]),a}function c(e){return!0===e.credentials?{key:"Access-Control-Allow-Credentials",value:"true"}:null}function p(e){var t=e.exposedHeaders;return t?(t.join&&(t=t.join(",")),t&&t.length?{key:"Access-Control-Expose-Headers",value:t}:null):null}function l(e,t){for(var n=0,a=e.length;n<a;n++){var s=e[n];s&&(Array.isArray(s)?l(s,t):"Vary"===s.key&&s.value?i(t,s.value):s.value&&t.setHeader(s.key,s.value))}}e.exports=function(e){var n=null;return n="function"==typeof e?e:function(t,n){n(null,e)},function(e,i,s){n(e,(function(n,o){if(n)s(n);else{var u=t({},a,o),d=null;u.origin&&"function"==typeof u.origin?d=u.origin:u.origin&&(d=function(e,t){t(null,u.origin)}),d?d(e.headers.origin,(function(t,n){t||!n?s(t):(u.origin=n,function(e,t,n,i){var a=[];"OPTIONS"===(t.method&&t.method.toUpperCase&&t.method.toUpperCase())?(a.push(r(e,t)),a.push(c(e)),a.push(function(e){var t=e.methods;return t.join&&(t=e.methods.join(",")),{key:"Access-Control-Allow-Methods",value:t}}(e)),a.push(function(e,t){var n=e.allowedHeaders||e.headers,i=[];return n?n.join&&(n=n.join(",")):(n=t.headers["access-control-request-headers"],i.push([{key:"Vary",value:"Access-Control-Request-Headers"}])),n&&n.length&&i.push([{key:"Access-Control-Allow-Headers",value:n}]),i}(e,t)),a.push(function(e){var t=("number"==typeof e.maxAge||e.maxAge)&&e.maxAge.toString();return t&&t.length?{key:"Access-Control-Max-Age",value:t}:null}(e)),a.push(p(e)),l(a,n),e.preflightContinue?i():(n.statusCode=e.optionsSuccessStatus,n.setHeader("Content-Length","0"),n.end())):(a.push(r(e,t)),a.push(c(e)),a.push(p(e)),l(a,n),i())}(u,e,i,s))})):s()}}))}}}()},1227:(e,t,n)=>{t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;t.splice(1,0,n,"color: inherit");let i=0,a=0;t[0].replace(/%[a-zA-Z%]/g,(e=>{"%%"!==e&&(i++,"%c"===e&&(a=i))})),t.splice(a,0,n)},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug")}catch(e){}},t.load=function(){let e;try{e=t.storage.getItem("debug")}catch(e){}!e&&"undefined"!=typeof process&&"env"in process&&(e={NODEENV:"production",BROWSER:!1}.DEBUG);return e},t.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},t.storage=function(){try{return localStorage}catch(e){}}(),t.destroy=(()=>{let e=!1;return()=>{e||(e=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.log=console.debug||console.log||(()=>{}),e.exports=n(2447)(t);const{formatters:i}=e.exports;i.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}},2447:(e,t,n)=>{e.exports=function(e){function t(e){let n,a=null;function s(...e){if(!s.enabled)return;const i=s,a=Number(new Date),o=a-(n||a);i.diff=o,i.prev=n,i.curr=a,n=a,e[0]=t.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let r=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,((n,a)=>{if("%%"===n)return"%";r++;const s=t.formatters[a];if("function"==typeof s){const t=e[r];n=s.call(i,t),e.splice(r,1),r--}return n})),t.formatArgs.call(i,e);(i.log||t.log).apply(i,e)}return s.namespace=e,s.useColors=t.useColors(),s.color=t.selectColor(e),s.extend=i,s.destroy=t.destroy,Object.defineProperty(s,"enabled",{enumerable:!0,configurable:!1,get:()=>null===a?t.enabled(e):a,set:e=>{a=e}}),"function"==typeof t.init&&t.init(s),s}function i(e,n){const i=t(this.namespace+(void 0===n?":":n)+e);return i.log=this.log,i}function a(e){return e.toString().substring(2,e.toString().length-2).replace(/\.\*\?$/,"*")}return t.debug=t,t.default=t,t.coerce=function(e){if(e instanceof Error)return e.stack||e.message;return e},t.disable=function(){const e=[...t.names.map(a),...t.skips.map(a).map((e=>"-"+e))].join(",");return t.enable(""),e},t.enable=function(e){let n;t.save(e),t.names=[],t.skips=[];const i=("string"==typeof e?e:"").split(/[\s,]+/),a=i.length;for(n=0;n<a;n++)i[n]&&("-"===(e=i[n].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")))},t.enabled=function(e){if("*"===e[e.length-1])return!0;let n,i;for(n=0,i=t.skips.length;n<i;n++)if(t.skips[n].test(e))return!1;for(n=0,i=t.names.length;n<i;n++)if(t.names[n].test(e))return!0;return!1},t.humanize=n(7824),t.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(e).forEach((n=>{t[n]=e[n]})),t.names=[],t.skips=[],t.formatters={},t.selectColor=function(e){let n=0;for(let t=0;t<e.length;t++)n=(n<<5)-n+e.charCodeAt(t),n|=0;return t.colors[Math.abs(n)%t.colors.length]},t.enable(t.load()),t}},5158:(e,t,n)=>{"undefined"==typeof process||"renderer"===process.type||!0===process.browser||process.__nwjs?e.exports=n(1227):e.exports=n(39)},39:(e,t,n)=>{const i=n(3867),a=n(1669);t.init=function(e){e.inspectOpts={};const n=Object.keys(t.inspectOpts);for(let i=0;i<n.length;i++)e.inspectOpts[n[i]]=t.inspectOpts[n[i]]},t.log=function(...e){return process.stderr.write(a.format(...e)+"\n")},t.formatArgs=function(n){const{namespace:i,useColors:a}=this;if(a){const t=this.color,a="[3"+(t<8?t:"8;5;"+t),s=`  ${a};1m${i} [0m`;n[0]=s+n[0].split("\n").join("\n"+s),n.push(a+"m+"+e.exports.humanize(this.diff)+"[0m")}else n[0]=function(){if(t.inspectOpts.hideDate)return"";return(new Date).toISOString()+" "}()+i+" "+n[0]},t.save=function(e){e||delete{NODEENV:"production",BROWSER:!1}.DEBUG},t.load=function(){return{NODEENV:"production",BROWSER:!1}.DEBUG},t.useColors=function(){return"colors"in t.inspectOpts?Boolean(t.inspectOpts.colors):i.isatty(process.stderr.fd)},t.destroy=a.deprecate((()=>{}),"Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."),t.colors=[6,2,3,4,5,1];try{const e=n(2130);e&&(e.stderr||e).level>=2&&(t.colors=[20,21,26,27,32,33,38,39,40,41,42,43,44,45,56,57,62,63,68,69,74,75,76,77,78,79,80,81,92,93,98,99,112,113,128,129,134,135,148,149,160,161,162,163,164,165,166,167,168,169,170,171,172,173,178,179,184,185,196,197,198,199,200,201,202,203,204,205,206,207,208,209,214,215,220,221])}catch(e){}t.inspectOpts=Object.keys({NODEENV:"production",BROWSER:!1}).filter((e=>/^debug_/i.test(e))).reduce(((e,t)=>{const n=t.substring(6).toLowerCase().replace(/_([a-z])/g,((e,t)=>t.toUpperCase()));let i={NODEENV:"production",BROWSER:!1}[t];return i=!!/^(yes|on|true|enabled)$/i.test(i)||!/^(no|off|false|disabled)$/i.test(i)&&("null"===i?null:Number(i)),e[n]=i,e}),{}),e.exports=n(2447)(t);const{formatters:s}=e.exports;s.o=function(e){return this.inspectOpts.colors=this.useColors,a.inspect(e,this.inspectOpts).split("\n").map((e=>e.trim())).join(" ")},s.O=function(e){return this.inspectOpts.colors=this.useColors,a.inspect(e,this.inspectOpts)}},1712:e=>{const t=Object.create(null);t.open="0",t.close="1",t.ping="2",t.pong="3",t.message="4",t.upgrade="5",t.noop="6";const n=Object.create(null);Object.keys(t).forEach((e=>{n[t[e]]=e}));e.exports={PACKET_TYPES:t,PACKET_TYPES_REVERSE:n,ERROR_PACKET:{type:"error",data:"parser error"}}},4050:(e,t,n)=>{const{PACKET_TYPES_REVERSE:i,ERROR_PACKET:a}=n(1712),s=(e,t)=>{const n=Buffer.isBuffer(e);switch(t){case"arraybuffer":return n?o(e):e;case"nodebuffer":default:return e}},o=e=>{const t=new ArrayBuffer(e.length),n=new Uint8Array(t);for(let t=0;t<e.length;t++)n[t]=e[t];return t};e.exports=(e,t)=>{if("string"!=typeof e)return{type:"message",data:s(e,t)};const n=e.charAt(0);if("b"===n){const n=Buffer.from(e.substring(1),"base64");return{type:"message",data:s(n,t)}}return i[n]?e.length>1?{type:i[n],data:e.substring(1)}:{type:i[n]}:a}},7559:(e,t,n)=>{const{PACKET_TYPES:i}=n(1712),a=e=>Buffer.isBuffer(e)?e:e instanceof ArrayBuffer?Buffer.from(e):Buffer.from(e.buffer,e.byteOffset,e.byteLength),s=(e,t)=>t?e:"b"+e.toString("base64");e.exports=({type:e,data:t},n,o)=>{if(t instanceof ArrayBuffer||ArrayBuffer.isView(t)){const e=a(t);return o(s(e,n))}return o(i[e]+(t||""))}},9743:(e,t,n)=>{const i=n(7559),a=n(4050),s=String.fromCharCode(30);e.exports={protocol:4,encodePacket:i,encodePayload:(e,t)=>{const n=e.length,a=new Array(n);let o=0;e.forEach(((e,r)=>{i(e,!1,(e=>{a[r]=e,++o===n&&t(a.join(s))}))}))},decodePacket:a,decodePayload:(e,t)=>{const n=e.split(s),i=[];for(let e=0;e<n.length;e++){const s=a(n[e],t);if(i.push(s),"error"===s.type)break}return i}}},2731:(e,t,n)=>{const i=n(8605),a=n(8053);function s(e,t){const n=new a(t);return n.attach(e,t),n}(t=e.exports=function(){return arguments.length&&arguments[0]instanceof i.Server?s.apply(this,arguments):new a(...arguments)}).protocol=1,t.Server=a,t.Socket=n(6539),t.Transport=n(4214),t.transports=n(43),t.parser=n(9743),t.listen=function(e,n,a){"function"==typeof n&&(a=n,n={});const s=i.createServer((function(e,t){t.writeHead(501),t.end("Not Implemented")})),o=t.attach(s,n);return o.httpServer=s,s.listen(e,a),o},t.attach=s},5285:(e,t,n)=>{var i=n(2606);t.protocol=3;var a=t.packets={open:0,close:1,ping:2,pong:3,message:4,upgrade:5,noop:6},s=Object.keys(a),o={type:"error",data:"parser error"};const r=Buffer.concat([]);function c(e,n,i){if(!n)return t.encodeBase64Packet(e,i);var s=e.data,o=Buffer.allocUnsafe(1);return o[0]=a[e.type],i(Buffer.concat([o,s]))}function p(e,t,n){const i=new Array(e.length);let a=0;for(let s=0;s<e.length;s++)t(e[s],((t,o)=>{i[s]=o,++a===e.length&&n(null,i)}))}function l(e){for(var t="",n=0,i=e.length;n<i;n++)t+=String.fromCharCode(e[n]);return t}function u(e){for(var t=Buffer.allocUnsafe(e.length),n=0,i=e.length;n<i;n++)t.writeUInt8(e.charCodeAt(n),n);return t}function d(e){var t=e.byteLength||e.length,n=e.byteOffset||0;return Buffer.from(e.buffer||e,n,t)}function m(e,n){t.encodePacket(e,!0,!0,(function(e){var t,i=""+e.length;if("string"==typeof e){(t=Buffer.allocUnsafe(i.length+2))[0]=0;for(var a=0;a<i.length;a++)t[a+1]=parseInt(i[a],10);return t[t.length-1]=255,n(null,Buffer.concat([t,u(e)]))}for((t=Buffer.allocUnsafe(i.length+2))[0]=1,a=0;a<i.length;a++)t[a+1]=parseInt(i[a],10);t[t.length-1]=255,n(null,Buffer.concat([t,e]))}))}t.encodePacket=function(e,t,n,s){if("function"==typeof t&&(s=t,t=null),"function"==typeof n&&(s=n,n=null),Buffer.isBuffer(e.data))return c(e,t,s);if(e.data&&(e.data.buffer||e.data)instanceof ArrayBuffer)return c({type:e.type,data:d(e.data)},t,s);var o=a[e.type];return void 0!==e.data&&(o+=n?i.encode(String(e.data),{strict:!1}):String(e.data)),s(""+o)},t.encodeBase64Packet=function(e,t){var n=Buffer.isBuffer(e.data)?e.data:d(e.data),i="b"+a[e.type];return t(i+=n.toString("base64"))},t.decodePacket=function(e,n,a){if(void 0===e)return o;var r;if("string"==typeof e)return"b"===(r=e.charAt(0))?t.decodeBase64Packet(e.substr(1),n):a&&!1===(e=function(e){try{e=i.decode(e,{strict:!1})}catch(e){return!1}return e}(e))?o:Number(r)==r&&s[r]?e.length>1?{type:s[r],data:e.substring(1)}:{type:s[r]}:o;if("arraybuffer"===n){var c=new Uint8Array(e);return r=c[0],{type:s[r],data:c.buffer.slice(1)}}return e instanceof ArrayBuffer&&(e=d(e)),r=e[0],{type:s[r],data:e.slice(1)}},t.decodeBase64Packet=function(e,t){var n=s[e.charAt(0)],i=Buffer.from(e.substr(1),"base64");if("arraybuffer"===t){for(var a=new Uint8Array(i.length),o=0;o<a.length;o++)a[o]=i[o];i=a.buffer}return{type:n,data:i}},t.encodePayload=function(e,n,i){if("function"==typeof n&&(i=n,n=null),n&&(e=>{for(const t of e)if(t.data instanceof ArrayBuffer||ArrayBuffer.isView(t.data))return!0;return!1})(e))return t.encodePayloadAsBinary(e,i);if(!e.length)return i("0:");p(e,(function(e,i){t.encodePacket(e,n,!1,(function(e){i(null,function(e){return e.length+":"+e}(e))}))}),(function(e,t){return i(t.join(""))}))},t.decodePayload=function(e,n,i){if("string"!=typeof e)return t.decodePayloadAsBinary(e,n,i);if("function"==typeof n&&(i=n,n=null),""===e)return i(o,0,1);for(var a,s,r,c="",p=0,l=e.length;p<l;p++){var u=e.charAt(p);if(":"===u){if(""===c||c!=(a=Number(c)))return i(o,0,1);if(c!=(s=e.substr(p+1,a)).length)return i(o,0,1);if(s.length){if(r=t.decodePacket(s,n,!1),o.type===r.type&&o.data===r.data)return i(o,0,1);if(!1===i(r,p+a,l))return}p+=a,c=""}else c+=u}return""!==c?i(o,0,1):void 0},t.encodePayloadAsBinary=function(e,t){if(!e.length)return t(r);p(e,m,(function(e,n){return t(Buffer.concat(n))}))},t.decodePayloadAsBinary=function(e,n,i){"function"==typeof n&&(i=n,n=null);for(var a,s=e,r=[];s.length>0;){var c="",p=0===s[0];for(a=1;255!==s[a];a++){if(c.length>310)return i(o,0,1);c+=""+s[a]}s=s.slice(c.length+1);var u=parseInt(c,10),d=s.slice(1,u+1);p&&(d=l(d)),r.push(d),s=s.slice(u+1)}var m=r.length;for(a=0;a<m;a++){var f=r[a];i(t.decodePacket(f,n,!0),a,m)}}},2606:e=>{var t,n,i,a=String.fromCharCode;function s(e){for(var t,n,i=[],a=0,s=e.length;a<s;)(t=e.charCodeAt(a++))>=55296&&t<=56319&&a<s?56320==(64512&(n=e.charCodeAt(a++)))?i.push(((1023&t)<<10)+(1023&n)+65536):(i.push(t),a--):i.push(t);return i}function o(e,t){if(e>=55296&&e<=57343){if(t)throw Error("Lone surrogate U+"+e.toString(16).toUpperCase()+" is not a scalar value");return!1}return!0}function r(e,t){return a(e>>t&63|128)}function c(e,t){if(0==(4294967168&e))return a(e);var n="";return 0==(4294965248&e)?n=a(e>>6&31|192):0==(4294901760&e)?(o(e,t)||(e=65533),n=a(e>>12&15|224),n+=r(e,6)):0==(4292870144&e)&&(n=a(e>>18&7|240),n+=r(e,12),n+=r(e,6)),n+=a(63&e|128)}function p(){if(i>=n)throw Error("Invalid byte index");var e=255&t[i];if(i++,128==(192&e))return 63&e;throw Error("Invalid continuation byte")}function l(e){var a,s;if(i>n)throw Error("Invalid byte index");if(i==n)return!1;if(a=255&t[i],i++,0==(128&a))return a;if(192==(224&a)){if((s=(31&a)<<6|p())>=128)return s;throw Error("Invalid continuation byte")}if(224==(240&a)){if((s=(15&a)<<12|p()<<6|p())>=2048)return o(s,e)?s:65533;throw Error("Invalid continuation byte")}if(240==(248&a)&&(s=(7&a)<<18|p()<<12|p()<<6|p())>=65536&&s<=1114111)return s;throw Error("Invalid UTF-8 detected")}e.exports={version:"2.1.2",encode:function(e,t){for(var n=!1!==(t=t||{}).strict,i=s(e),a=i.length,o=-1,r="";++o<a;)r+=c(i[o],n);return r},decode:function(e,o){var r=!1!==(o=o||{}).strict;t=s(e),n=t.length,i=0;for(var c,p=[];!1!==(c=l(r));)p.push(c);return function(e){for(var t,n=e.length,i=-1,s="";++i<n;)(t=e[i])>65535&&(s+=a((t-=65536)>>>10&1023|55296),t=56320|1023&t),s+=a(t);return s}(p)}}},8053:(e,t,n)=>{const i=n(1191),a=n(8835).parse,s=n(7936),o=n(43),r=n(8614).EventEmitter,c=n(6539),p=n(5158)("engine"),l=n(6489),u=n(8777).Server;class d extends r{constructor(e={}){super(),this.clients={},this.clientsCount=0,this.opts=Object.assign({wsEngine:u,pingTimeout:2e4,pingInterval:25e3,upgradeTimeout:1e4,maxHttpBufferSize:1e6,transports:Object.keys(o),allowUpgrades:!0,httpCompression:{threshold:1024},cors:!1,allowEIO3:!1},e),e.cookie&&(this.opts.cookie=Object.assign({name:"io",path:"/",httpOnly:!1!==e.cookie.path,sameSite:"lax"},e.cookie)),this.opts.cors&&(this.corsMiddleware=n(7846)(this.opts.cors)),e.perMessageDeflate&&(this.opts.perMessageDeflate=Object.assign({threshold:1024},e.perMessageDeflate)),this.init()}init(){~this.opts.transports.indexOf("websocket")&&(this.ws&&this.ws.close(),this.ws=new this.opts.wsEngine({noServer:!0,clientTracking:!1,perMessageDeflate:this.opts.perMessageDeflate,maxPayload:this.opts.maxHttpBufferSize}))}upgrades(e){return this.opts.allowUpgrades&&o[e].upgradesTo||[]}verify(e,t,n){const i=e._query.transport;if(!~this.opts.transports.indexOf(i))return p('unknown transport "%s"',i),n(d.errors.UNKNOWN_TRANSPORT,!1);if(function(e){if((e+="").length<1)return!1;if(!f[e.charCodeAt(0)])return p('invalid header, index 0, char "%s"',e.charCodeAt(0)),!0;if(e.length<2)return!1;if(!f[e.charCodeAt(1)])return p('invalid header, index 1, char "%s"',e.charCodeAt(1)),!0;if(e.length<3)return!1;if(!f[e.charCodeAt(2)])return p('invalid header, index 2, char "%s"',e.charCodeAt(2)),!0;if(e.length<4)return!1;if(!f[e.charCodeAt(3)])return p('invalid header, index 3, char "%s"',e.charCodeAt(3)),!0;for(let t=4;t<e.length;++t)if(!f[e.charCodeAt(t)])return p('invalid header, index "%i", char "%s"',t,e.charCodeAt(t)),!0;return!1}(e.headers.origin))return e.headers.origin=null,p("origin header invalid"),n(d.errors.BAD_REQUEST,!1);const a=e._query.sid;return a?this.clients.hasOwnProperty(a)?t||this.clients[a].transport.name===i?void n(null,!0):(p("bad request: unexpected transport without upgrade"),n(d.errors.BAD_REQUEST,!1)):(p('unknown sid "%s"',a),n(d.errors.UNKNOWN_SID,!1)):"GET"!==e.method?n(d.errors.BAD_HANDSHAKE_METHOD,!1):this.opts.allowRequest?this.opts.allowRequest(e,n):n(null,!0)}prepare(e){e._query||(e._query=~e.url.indexOf("?")?i.parse(a(e.url).query):{})}close(){p("closing all open clients");for(let e in this.clients)this.clients.hasOwnProperty(e)&&this.clients[e].close(!0);return this.ws&&(p("closing webSocketServer"),this.ws.close()),this}handleRequest(e,t){p('handling "%s" http request "%s"',e.method,e.url),this.prepare(e),e.res=t;const n=(n,i)=>{i?e._query.sid?(p("setting new request for existing client"),this.clients[e._query.sid].transport.onRequest(e)):this.handshake(e._query.transport,e):m(e,t,n)};this.corsMiddleware?this.corsMiddleware.call(null,e,t,(()=>{this.verify(e,!1,n)})):this.verify(e,!1,n)}generateId(e){return s.generateId()}async handshake(e,t){const n="4"===t._query.EIO?4:3;if(3===n&&!this.opts.allowEIO3)return p("unsupported protocol version"),void m(t,t.res,d.errors.UNSUPPORTED_PROTOCOL_VERSION);let i;try{i=await this.generateId(t)}catch(e){return p("error while generating an id"),void m(t,t.res,d.errors.BAD_REQUEST)}p('handshaking client "%s"',i);try{var a=new o[e](t);"polling"===e?(a.maxHttpBufferSize=this.opts.maxHttpBufferSize,a.httpCompression=this.opts.httpCompression):"websocket"===e&&(a.perMessageDeflate=this.opts.perMessageDeflate),t._query&&t._query.b64?a.supportsBinary=!1:a.supportsBinary=!0}catch(n){return p('error handshaking to transport "%s"',e),void m(t,t.res,d.errors.BAD_REQUEST)}const s=new c(i,this,a,t,n),r=this;this.opts.cookie&&a.on("headers",(e=>{e["Set-Cookie"]=l.serialize(this.opts.cookie.name,i,this.opts.cookie)})),a.onRequest(t),this.clients[i]=s,this.clientsCount++,s.once("close",(function(){delete r.clients[i],r.clientsCount--})),this.emit("connection",s)}handleUpgrade(e,t,n){this.prepare(e);const i=this;this.verify(e,!0,(function(a,s){if(!s)return void function(e,t){if(e.on("error",(()=>{p("ignoring error from closed connection")})),e.writable){const n=d.errorMessages.hasOwnProperty(t)?d.errorMessages[t]:String(t||""),i=Buffer.byteLength(n);e.write("HTTP/1.1 400 Bad Request\r\nConnection: close\r\nContent-type: text/html\r\nContent-Length: "+i+"\r\n\r\n"+n)}e.destroy()}(t,a);const o=Buffer.from(n);n=null,i.ws.handleUpgrade(e,t,o,(function(t){i.onWebSocket(e,t)}))}))}onWebSocket(e,t){if(t.on("error",i),void 0!==o[e._query.transport]&&!o[e._query.transport].prototype.handlesUpgrades)return p("transport doesnt handle upgraded requests"),void t.close();const n=e._query.sid;if(e.websocket=t,n){const a=this.clients[n];if(a)if(a.upgrading)p("transport has already been trying to upgrade"),t.close();else if(a.upgraded)p("transport had already been upgraded"),t.close();else{p("upgrading existing transport"),t.removeListener("error",i);const n=new o[e._query.transport](e);e._query&&e._query.b64?n.supportsBinary=!1:n.supportsBinary=!0,n.perMessageDeflate=this.perMessageDeflate,a.maybeUpgrade(n)}else p("upgrade attempt for closed client"),t.close()}else t.removeListener("error",i),this.handshake(e._query.transport,e);function i(){p("websocket error before upgrade")}}attach(e,t){const n=this;let i=((t=t||{}).path||"/engine.io").replace(/\/$/,"");const a=t.destroyUpgradeTimeout||1e3;function s(e){return i===e.url.substr(0,i.length)}i+="/";const o=e.listeners("request").slice(0);e.removeAllListeners("request"),e.on("close",n.close.bind(n)),e.on("listening",n.init.bind(n)),e.on("request",(function(t,a){if(s(t))p('intercepting request for path "%s"',i),n.handleRequest(t,a);else{let n=0;const i=o.length;for(;n<i;n++)o[n].call(e,t,a)}})),~n.opts.transports.indexOf("websocket")&&e.on("upgrade",(function(e,i,o){s(e)?n.handleUpgrade(e,i,o):!1!==t.destroyUpgrade&&setTimeout((function(){if(i.writable&&i.bytesWritten<=0)return i.end()}),a)}))}}function m(e,t,n){const i={"Content-Type":"application/json"};if(!d.errorMessages.hasOwnProperty(n))return t.writeHead(403,i),void t.end(JSON.stringify({code:d.errors.FORBIDDEN,message:n||d.errorMessages[d.errors.FORBIDDEN]}));void 0!==t&&(t.writeHead(400,i),t.end(JSON.stringify({code:n,message:d.errorMessages[n]})))}d.errors={UNKNOWN_TRANSPORT:0,UNKNOWN_SID:1,BAD_HANDSHAKE_METHOD:2,BAD_REQUEST:3,FORBIDDEN:4,UNSUPPORTED_PROTOCOL_VERSION:5},d.errorMessages={0:"Transport unknown",1:"Session ID unknown",2:"Bad handshake method",3:"Bad request",4:"Forbidden",5:"Unsupported protocol version"},e.exports=d;const f=[0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]},6539:(e,t,n)=>{const i=n(8614),a=n(5158)("engine:socket");e.exports=class extends i{constructor(e,t,n,i,a){super(),this.id=e,this.server=t,this.upgrading=!1,this.upgraded=!1,this.readyState="opening",this.writeBuffer=[],this.packetsFn=[],this.sentCallbackFn=[],this.cleanupFn=[],this.request=i,this.protocol=a,i.websocket&&i.websocket._socket?this.remoteAddress=i.websocket._socket.remoteAddress:this.remoteAddress=i.connection.remoteAddress,this.checkIntervalTimer=null,this.upgradeTimeoutTimer=null,this.pingTimeoutTimer=null,this.pingIntervalTimer=null,this.setTransport(n),this.onOpen()}onOpen(){this.readyState="open",this.transport.sid=this.id,this.sendPacket("open",JSON.stringify({sid:this.id,upgrades:this.getAvailableUpgrades(),pingInterval:this.server.opts.pingInterval,pingTimeout:this.server.opts.pingTimeout})),this.server.opts.initialPacket&&this.sendPacket("message",this.server.opts.initialPacket),this.emit("open"),3===this.protocol?this.resetPingTimeout(this.server.opts.pingInterval+this.server.opts.pingTimeout):this.schedulePing()}onPacket(e){if("open"===this.readyState)switch(a("packet"),this.emit("packet",e),this.resetPingTimeout(this.server.opts.pingInterval+this.server.opts.pingTimeout),e.type){case"ping":if(3!==this.transport.protocol)return void this.onError("invalid heartbeat direction");a("got ping"),this.sendPacket("pong"),this.emit("heartbeat");break;case"pong":if(3===this.transport.protocol)return void this.onError("invalid heartbeat direction");a("got pong"),this.schedulePing(),this.emit("heartbeat");break;case"error":this.onClose("parse error");break;case"message":this.emit("data",e.data),this.emit("message",e.data)}else a("packet received with closed socket")}onError(e){a("transport error"),this.onClose("transport error",e)}schedulePing(){clearTimeout(this.pingIntervalTimer),this.pingIntervalTimer=setTimeout((()=>{a("writing ping packet - expecting pong within %sms",this.server.opts.pingTimeout),this.sendPacket("ping"),this.resetPingTimeout(this.server.opts.pingTimeout)}),this.server.opts.pingInterval)}resetPingTimeout(e){clearTimeout(this.pingTimeoutTimer),this.pingTimeoutTimer=setTimeout((()=>{"closed"!==this.readyState&&this.onClose("ping timeout")}),e)}setTransport(e){const t=this.onError.bind(this),n=this.onPacket.bind(this),i=this.flush.bind(this),a=this.onClose.bind(this,"transport close");this.transport=e,this.transport.once("error",t),this.transport.on("packet",n),this.transport.on("drain",i),this.transport.once("close",a),this.setupSendCallback(),this.cleanupFn.push((function(){e.removeListener("error",t),e.removeListener("packet",n),e.removeListener("drain",i),e.removeListener("close",a)}))}maybeUpgrade(e){a('might upgrade socket transport from "%s" to "%s"',this.transport.name,e.name),this.upgrading=!0;const t=this;function n(n){"ping"===n.type&&"probe"===n.data?(e.send([{type:"pong",data:"probe"}]),t.emit("upgrading",e),clearInterval(t.checkIntervalTimer),t.checkIntervalTimer=setInterval(i,100)):"upgrade"===n.type&&"closed"!==t.readyState?(a("got upgrade packet - upgrading"),s(),t.transport.discard(),t.upgraded=!0,t.clearTransport(),t.setTransport(e),t.emit("upgrade",e),t.flush(),"closing"===t.readyState&&e.close((function(){t.onClose("forced close")}))):(s(),e.close())}function i(){"polling"===t.transport.name&&t.transport.writable&&(a("writing a noop packet to polling for fast upgrade"),t.transport.send([{type:"noop"}]))}function s(){t.upgrading=!1,clearInterval(t.checkIntervalTimer),t.checkIntervalTimer=null,clearTimeout(t.upgradeTimeoutTimer),t.upgradeTimeoutTimer=null,e.removeListener("packet",n),e.removeListener("close",r),e.removeListener("error",o),t.removeListener("close",c)}function o(t){a("client did not complete upgrade - %s",t),s(),e.close(),e=null}function r(){o("transport closed")}function c(){o("socket closed")}t.upgradeTimeoutTimer=setTimeout((function(){a("client did not complete upgrade - closing transport"),s(),"open"===e.readyState&&e.close()}),this.server.opts.upgradeTimeout),e.on("packet",n),e.once("close",r),e.once("error",o),t.once("close",c)}clearTransport(){let e;const t=this.cleanupFn.length;for(let n=0;n<t;n++)e=this.cleanupFn.shift(),e();this.transport.on("error",(function(){a("error triggered by discarded transport")})),this.transport.close(),clearTimeout(this.pingTimeoutTimer)}onClose(e,t){if("closed"!==this.readyState){this.readyState="closed",clearTimeout(this.pingIntervalTimer),clearTimeout(this.pingTimeoutTimer),clearInterval(this.checkIntervalTimer),this.checkIntervalTimer=null,clearTimeout(this.upgradeTimeoutTimer);const n=this;process.nextTick((function(){n.writeBuffer=[]})),this.packetsFn=[],this.sentCallbackFn=[],this.clearTransport(),this.emit("close",e,t)}}setupSendCallback(){const e=this;function t(){if(e.sentCallbackFn.length>0){const t=e.sentCallbackFn.splice(0,1)[0];if("function"==typeof t)a("executing send callback"),t(e.transport);else if(Array.isArray(t)){a("executing batch send callback");const n=t.length;let i=0;for(;i<n;i++)"function"==typeof t[i]&&t[i](e.transport)}}}this.transport.on("drain",t),this.cleanupFn.push((function(){e.transport.removeListener("drain",t)}))}send(e,t,n){return this.sendPacket("message",e,t,n),this}write(e,t,n){return this.sendPacket("message",e,t,n),this}sendPacket(e,t,n,i){if("function"==typeof n&&(i=n,n=null),(n=n||{}).compress=!1!==n.compress,"closing"!==this.readyState&&"closed"!==this.readyState){a('sending packet "%s" (%s)',e,t);const s={type:e,options:n};t&&(s.data=t),this.emit("packetCreate",s),this.writeBuffer.push(s),i&&this.packetsFn.push(i),this.flush()}}flush(){if("closed"!==this.readyState&&this.transport.writable&&this.writeBuffer.length){a("flushing buffer to transport"),this.emit("flush",this.writeBuffer),this.server.emit("flush",this,this.writeBuffer);const e=this.writeBuffer;this.writeBuffer=[],this.transport.supportsFraming?this.sentCallbackFn.push.apply(this.sentCallbackFn,this.packetsFn):this.sentCallbackFn.push(this.packetsFn),this.packetsFn=[],this.transport.send(e),this.emit("drain"),this.server.emit("drain",this)}}getAvailableUpgrades(){const e=[],t=this.server.upgrades(this.transport.name);let n=0;const i=t.length;for(;n<i;++n){const i=t[n];-1!==this.server.opts.transports.indexOf(i)&&e.push(i)}return e}close(e){"open"===this.readyState&&(this.readyState="closing",this.writeBuffer.length?this.once("drain",this.closeTransport.bind(this,e)):this.closeTransport(e))}closeTransport(e){e&&this.transport.discard(),this.transport.close(this.onClose.bind(this,"forced close"))}}},4214:(e,t,n)=>{const i=n(8614),a=n(9743),s=n(5285),o=n(5158)("engine:transport");function r(){}e.exports=class extends i{constructor(e){super(),this.readyState="open",this.discarded=!1,this.protocol="4"===e._query.EIO?4:3,this.parser=4===this.protocol?a:s}discard(){this.discarded=!0}onRequest(e){o("setting request"),this.req=e}close(e){"closed"!==this.readyState&&"closing"!==this.readyState&&(this.readyState="closing",this.doClose(e||r))}onError(e,t){if(this.listeners("error").length){const n=new Error(e);n.type="TransportError",n.description=t,this.emit("error",n)}else o("ignored transport error %s (%s)",e,t)}onPacket(e){this.emit("packet",e)}onData(e){this.onPacket(this.parser.decodePacket(e))}onClose(){this.readyState="closed",this.emit("close")}}},43:(e,t,n)=>{const i=n(4815),a=n(5730);e.exports=t={polling:function(e){return"string"==typeof e._query.j?new a(e):new i(e)},websocket:n(1882)},t.polling.upgradesTo=["websocket"]},5730:(e,t,n)=>{const i=n(4815),a=n(1191),s=/\\\\n/g,o=/(\\)?\\n/g;e.exports=class extends i{constructor(e){super(e),this.head="___eio["+(e._query.j||"").replace(/[^0-9]/g,"")+"](",this.foot=");"}onData(e){"string"==typeof(e=a.parse(e).d)&&(e=e.replace(o,(function(e,t){return t?e:"\n"})),super.onData(e.replace(s,"\\n")))}doWrite(e,t,n){const i=JSON.stringify(e).replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029");e=this.head+i+this.foot,super.doWrite(e,t,n)}}},4815:(e,t,n)=>{const i=n(4214),a=n(8761),s=n(9078),o=n(5158)("engine:polling"),r={gzip:a.createGzip,deflate:a.createDeflate};e.exports=class extends i{constructor(e){super(e),this.closeTimeout=3e4,this.maxHttpBufferSize=null,this.httpCompression=null}get name(){return"polling"}onRequest(e){const t=e.res;"GET"===e.method?this.onPollRequest(e,t):"POST"===e.method?this.onDataRequest(e,t):(t.writeHead(500),t.end())}onPollRequest(e,t){if(this.req)return o("request overlap"),this.onError("overlap from client"),t.writeHead(500),void t.end();o("setting request"),this.req=e,this.res=t;const n=this;function i(){n.onError("poll connection closed prematurely")}e.cleanup=function(){e.removeListener("close",i),n.req=n.res=null},e.on("close",i),this.writable=!0,this.emit("drain"),this.writable&&this.shouldClose&&(o("triggering empty send to append close packet"),this.send([{type:"noop"}]))}onDataRequest(e,t){if(this.dataReq)return this.onError("data request overlap from client"),t.writeHead(500),void t.end();const n="application/octet-stream"===e.headers["content-type"];if(n&&4===this.protocol)return this.onError("invalid content");this.dataReq=e,this.dataRes=t;let i=n?Buffer.concat([]):"";const a=this;function s(){e.removeListener("data",r),e.removeListener("end",c),e.removeListener("close",o),a.dataReq=a.dataRes=i=null}function o(){s(),a.onError("data request connection closed prematurely")}function r(t){let s;n?(i=Buffer.concat([i,t]),s=i.length):(i+=t,s=Buffer.byteLength(i)),s>a.maxHttpBufferSize&&(i=n?Buffer.concat([]):"",e.connection.destroy())}function c(){a.onData(i);t.writeHead(200,a.headers(e,{"Content-Type":"text/html","Content-Length":2})),t.end("ok"),s()}e.on("close",o),n||e.setEncoding("utf8"),e.on("data",r),e.on("end",c)}onData(e){o('received "%s"',e);const t=this,n=function(e){if("close"===e.type)return o("got xhr close packet"),t.onClose(),!1;t.onPacket(e)};3===this.protocol?this.parser.decodePayload(e,n):this.parser.decodePayload(e).forEach(n)}onClose(){this.writable&&this.send([{type:"noop"}]),super.onClose()}send(e){this.writable=!1,this.shouldClose&&(o("appending close packet to payload"),e.push({type:"close"}),this.shouldClose(),this.shouldClose=null);const t=t=>{const n=e.some((e=>e.options&&e.options.compress));this.write(t,{compress:n})};3===this.protocol?this.parser.encodePayload(e,this.supportsBinary,t):this.parser.encodePayload(e,t)}write(e,t){o('writing "%s"',e);const n=this;this.doWrite(e,t,(function(){n.req.cleanup()}))}doWrite(e,t,n){const i=this,a="string"==typeof e,o={"Content-Type":a?"text/plain; charset=UTF-8":"application/octet-stream"};if(!this.httpCompression||!t.compress)return void c(e);if((a?Buffer.byteLength(e):e.length)<this.httpCompression.threshold)return void c(e);const r=s(this.req).encodings(["gzip","deflate"]);function c(e){o["Content-Length"]="string"==typeof e?Buffer.byteLength(e):e.length,i.res.writeHead(200,i.headers(i.req,o)),i.res.end(e),n()}r?this.compress(e,r,(function(e,t){if(e)return i.res.writeHead(500),i.res.end(),void n(e);o["Content-Encoding"]=r,c(t)})):c(e)}compress(e,t,n){o("compressing");const i=[];let a=0;r[t](this.httpCompression).on("error",n).on("data",(function(e){i.push(e),a+=e.length})).on("end",(function(){n(null,Buffer.concat(i,a))})).end(e)}doClose(e){o("closing");const t=this;let n;function i(){clearTimeout(n),e(),t.onClose()}this.dataReq&&(o("aborting ongoing data request"),this.dataReq.destroy()),this.writable?(o("transport writable - closing right away"),this.send([{type:"close"}]),i()):this.discarded?(o("transport discarded - closing right away"),i()):(o("transport not writable - buffering orderly close"),this.shouldClose=i,n=setTimeout(i,this.closeTimeout))}headers(e,t){t=t||{};const n=e.headers["user-agent"];return n&&(~n.indexOf(";MSIE")||~n.indexOf("Trident/"))&&(t["X-XSS-Protection"]="0"),this.emit("headers",t),t}}},1882:(e,t,n)=>{const i=n(4214),a=n(5158)("engine:ws");e.exports=class extends i{constructor(e){super(e),this.socket=e.websocket,this.socket.on("message",this.onData.bind(this)),this.socket.once("close",this.onClose.bind(this)),this.socket.on("error",this.onError.bind(this)),this.socket.on("headers",(e=>{this.emit("headers",e)})),this.writable=!0,this.perMessageDeflate=null}get name(){return"websocket"}get handlesUpgrades(){return!0}get supportsFraming(){return!0}onData(e){a('received "%s"',e),super.onData(e)}send(e){for(var t=this,n=0;n<e.length;n++){var i=e[n];this.parser.encodePacket(i,t.supportsBinary,s)}function s(e){a('writing "%s"',e);var n={};(i.options&&(n.compress=i.options.compress),t.perMessageDeflate)&&(("string"==typeof e?Buffer.byteLength(e):e.length)<t.perMessageDeflate.threshold&&(n.compress=!1));t.writable=!1,t.socket.send(e,n,o)}function o(e){if(e)return t.onError("write error",e.stack);t.writable=!0,t.emit("drain")}}doClose(e){a("closing"),this.socket.close(),e&&e()}}},2261:(e,t,n)=>{var i;e.exports=function(){if(!i)try{i=n(5158)("follow-redirects")}catch(e){i=function(){}}i.apply(null,arguments)}},938:(e,t,n)=>{var i=n(8835),a=i.URL,s=n(8605),o=n(7211),r=n(2413).Writable,c=n(2357),p=n(2261),l=Object.create(null);["abort","aborted","connect","error","socket","timeout"].forEach((function(e){l[e]=function(t,n,i){this._redirectable.emit(e,t,n,i)}}));var u=y("ERR_FR_REDIRECTION_FAILURE",""),d=y("ERR_FR_TOO_MANY_REDIRECTS","Maximum number of redirects exceeded"),m=y("ERR_FR_MAX_BODY_LENGTH_EXCEEDED","Request body larger than maxBodyLength limit"),f=y("ERR_STREAM_WRITE_AFTER_END","write after end");function h(e,t){r.call(this),this._sanitizeOptions(e),this._options=e,this._ended=!1,this._ending=!1,this._redirectCount=0,this._redirects=[],this._requestBodyLength=0,this._requestBodyBuffers=[],t&&this.on("response",t);var n=this;this._onNativeResponse=function(e){n._processResponse(e)},this._performRequest()}function v(e){var t={maxRedirects:21,maxBodyLength:10485760},n={};return Object.keys(e).forEach((function(s){var o=s+":",r=n[o]=e[s],l=t[s]=Object.create(r);Object.defineProperties(l,{request:{value:function(e,s,r){if("string"==typeof e){var l=e;try{e=g(new a(l))}catch(t){e=i.parse(l)}}else a&&e instanceof a?e=g(e):(r=s,s=e,e={protocol:o});return"function"==typeof s&&(r=s,s=null),(s=Object.assign({maxRedirects:t.maxRedirects,maxBodyLength:t.maxBodyLength},e,s)).nativeProtocols=n,c.equal(s.protocol,o,"protocol mismatch"),p("options",s),new h(s,r)},configurable:!0,enumerable:!0,writable:!0},get:{value:function(e,t,n){var i=l.request(e,t,n);return i.end(),i},configurable:!0,enumerable:!0,writable:!0}})})),t}function x(){}function g(e){var t={protocol:e.protocol,hostname:e.hostname.startsWith("[")?e.hostname.slice(1,-1):e.hostname,hash:e.hash,search:e.search,pathname:e.pathname,path:e.pathname+e.search,href:e.href};return""!==e.port&&(t.port=Number(e.port)),t}function b(e,t){var n;for(var i in t)e.test(i)&&(n=t[i],delete t[i]);return n}function y(e,t){function n(e){Error.captureStackTrace(this,this.constructor),this.message=e||t}return n.prototype=new Error,n.prototype.constructor=n,n.prototype.name="Error ["+e+"]",n.prototype.code=e,n}h.prototype=Object.create(r.prototype),h.prototype.abort=function(){this._currentRequest.removeAllListeners(),this._currentRequest.on("error",x),this._currentRequest.abort(),this.emit("abort"),this.removeAllListeners()},h.prototype.write=function(e,t,n){if(this._ending)throw new f;if(!("string"==typeof e||"object"==typeof e&&"length"in e))throw new TypeError("data should be a string, Buffer or Uint8Array");"function"==typeof t&&(n=t,t=null),0!==e.length?this._requestBodyLength+e.length<=this._options.maxBodyLength?(this._requestBodyLength+=e.length,this._requestBodyBuffers.push({data:e,encoding:t}),this._currentRequest.write(e,t,n)):(this.emit("error",new m),this.abort()):n&&n()},h.prototype.end=function(e,t,n){if("function"==typeof e?(n=e,e=t=null):"function"==typeof t&&(n=t,t=null),e){var i=this,a=this._currentRequest;this.write(e,t,(function(){i._ended=!0,a.end(null,null,n)})),this._ending=!0}else this._ended=this._ending=!0,this._currentRequest.end(null,null,n)},h.prototype.setHeader=function(e,t){this._options.headers[e]=t,this._currentRequest.setHeader(e,t)},h.prototype.removeHeader=function(e){delete this._options.headers[e],this._currentRequest.removeHeader(e)},h.prototype.setTimeout=function(e,t){var n=this;function i(){n._timeout&&clearTimeout(n._timeout),n._timeout=setTimeout((function(){n.emit("timeout"),a()}),e)}function a(){clearTimeout(this._timeout),t&&n.removeListener("timeout",t),this.socket||n._currentRequest.removeListener("socket",i)}return t&&this.on("timeout",t),this.socket?i():this._currentRequest.once("socket",i),this.once("response",a),this.once("error",a),this},["flushHeaders","getHeader","setNoDelay","setSocketKeepAlive"].forEach((function(e){h.prototype[e]=function(t,n){return this._currentRequest[e](t,n)}})),["aborted","connection","socket"].forEach((function(e){Object.defineProperty(h.prototype,e,{get:function(){return this._currentRequest[e]}})})),h.prototype._sanitizeOptions=function(e){if(e.headers||(e.headers={}),e.host&&(e.hostname||(e.hostname=e.host),delete e.host),!e.pathname&&e.path){var t=e.path.indexOf("?");t<0?e.pathname=e.path:(e.pathname=e.path.substring(0,t),e.search=e.path.substring(t))}},h.prototype._performRequest=function(){var e=this._options.protocol,t=this._options.nativeProtocols[e];if(t){if(this._options.agents){var n=e.substr(0,e.length-1);this._options.agent=this._options.agents[n]}var a=this._currentRequest=t.request(this._options,this._onNativeResponse);for(var s in this._currentUrl=i.format(this._options),a._redirectable=this,l)s&&a.on(s,l[s]);if(this._isRedirect){var o=0,r=this,c=this._requestBodyBuffers;!function e(t){if(a===r._currentRequest)if(t)r.emit("error",t);else if(o<c.length){var n=c[o++];a.finished||a.write(n.data,n.encoding,e)}else r._ended&&a.end()}()}}else this.emit("error",new TypeError("Unsupported protocol "+e))},h.prototype._processResponse=function(e){var t=e.statusCode;this._options.trackRedirects&&this._redirects.push({url:this._currentUrl,headers:e.headers,statusCode:t});var n=e.headers.location;if(n&&!1!==this._options.followRedirects&&t>=300&&t<400){if(this._currentRequest.removeAllListeners(),this._currentRequest.on("error",x),this._currentRequest.abort(),e.destroy(),++this._redirectCount>this._options.maxRedirects)return void this.emit("error",new d);((301===t||302===t)&&"POST"===this._options.method||303===t&&!/^(?:GET|HEAD)$/.test(this._options.method))&&(this._options.method="GET",this._requestBodyBuffers=[],b(/^content-/i,this._options.headers));var a=b(/^host$/i,this._options.headers)||i.parse(this._currentUrl).hostname,s=i.resolve(this._currentUrl,n);p("redirecting to",s),this._isRedirect=!0;var o=i.parse(s);if(Object.assign(this._options,o),o.hostname!==a&&b(/^authorization$/i,this._options.headers),"function"==typeof this._options.beforeRedirect){var r={headers:e.headers};try{this._options.beforeRedirect.call(null,this._options,r)}catch(e){return void this.emit("error",e)}this._sanitizeOptions(this._options)}try{this._performRequest()}catch(e){var c=new u("Redirected request failed: "+e.message);c.cause=e,this.emit("error",c)}}else e.responseUrl=this._currentUrl,e.redirects=this._redirects,this.emit("response",e),this._requestBodyBuffers=[]},e.exports=v({http:s,https:o}),e.exports.wrap=v},6560:e=>{"use strict";e.exports=(e,t=process.argv)=>{const n=e.startsWith("-")?"":1===e.length?"-":"--",i=t.indexOf(n+e),a=t.indexOf("--");return-1!==i&&(-1===a||i<a)}},3313:e=>{"use strict";e.exports=JSON.parse('{"application/1d-interleaved-parityfec":{"source":"iana"},"application/3gpdash-qoe-report+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/3gpp-ims+xml":{"source":"iana","compressible":true},"application/a2l":{"source":"iana"},"application/activemessage":{"source":"iana"},"application/activity+json":{"source":"iana","compressible":true},"application/alto-costmap+json":{"source":"iana","compressible":true},"application/alto-costmapfilter+json":{"source":"iana","compressible":true},"application/alto-directory+json":{"source":"iana","compressible":true},"application/alto-endpointcost+json":{"source":"iana","compressible":true},"application/alto-endpointcostparams+json":{"source":"iana","compressible":true},"application/alto-endpointprop+json":{"source":"iana","compressible":true},"application/alto-endpointpropparams+json":{"source":"iana","compressible":true},"application/alto-error+json":{"source":"iana","compressible":true},"application/alto-networkmap+json":{"source":"iana","compressible":true},"application/alto-networkmapfilter+json":{"source":"iana","compressible":true},"application/alto-updatestreamcontrol+json":{"source":"iana","compressible":true},"application/alto-updatestreamparams+json":{"source":"iana","compressible":true},"application/aml":{"source":"iana"},"application/andrew-inset":{"source":"iana","extensions":["ez"]},"application/applefile":{"source":"iana"},"application/applixware":{"source":"apache","extensions":["aw"]},"application/atf":{"source":"iana"},"application/atfx":{"source":"iana"},"application/atom+xml":{"source":"iana","compressible":true,"extensions":["atom"]},"application/atomcat+xml":{"source":"iana","compressible":true,"extensions":["atomcat"]},"application/atomdeleted+xml":{"source":"iana","compressible":true,"extensions":["atomdeleted"]},"application/atomicmail":{"source":"iana"},"application/atomsvc+xml":{"source":"iana","compressible":true,"extensions":["atomsvc"]},"application/atsc-dwd+xml":{"source":"iana","compressible":true,"extensions":["dwd"]},"application/atsc-dynamic-event-message":{"source":"iana"},"application/atsc-held+xml":{"source":"iana","compressible":true,"extensions":["held"]},"application/atsc-rdt+json":{"source":"iana","compressible":true},"application/atsc-rsat+xml":{"source":"iana","compressible":true,"extensions":["rsat"]},"application/atxml":{"source":"iana"},"application/auth-policy+xml":{"source":"iana","compressible":true},"application/bacnet-xdd+zip":{"source":"iana","compressible":false},"application/batch-smtp":{"source":"iana"},"application/bdoc":{"compressible":false,"extensions":["bdoc"]},"application/beep+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/calendar+json":{"source":"iana","compressible":true},"application/calendar+xml":{"source":"iana","compressible":true,"extensions":["xcs"]},"application/call-completion":{"source":"iana"},"application/cals-1840":{"source":"iana"},"application/captive+json":{"source":"iana","compressible":true},"application/cbor":{"source":"iana"},"application/cbor-seq":{"source":"iana"},"application/cccex":{"source":"iana"},"application/ccmp+xml":{"source":"iana","compressible":true},"application/ccxml+xml":{"source":"iana","compressible":true,"extensions":["ccxml"]},"application/cdfx+xml":{"source":"iana","compressible":true,"extensions":["cdfx"]},"application/cdmi-capability":{"source":"iana","extensions":["cdmia"]},"application/cdmi-container":{"source":"iana","extensions":["cdmic"]},"application/cdmi-domain":{"source":"iana","extensions":["cdmid"]},"application/cdmi-object":{"source":"iana","extensions":["cdmio"]},"application/cdmi-queue":{"source":"iana","extensions":["cdmiq"]},"application/cdni":{"source":"iana"},"application/cea":{"source":"iana"},"application/cea-2018+xml":{"source":"iana","compressible":true},"application/cellml+xml":{"source":"iana","compressible":true},"application/cfw":{"source":"iana"},"application/clr":{"source":"iana"},"application/clue+xml":{"source":"iana","compressible":true},"application/clue_info+xml":{"source":"iana","compressible":true},"application/cms":{"source":"iana"},"application/cnrp+xml":{"source":"iana","compressible":true},"application/coap-group+json":{"source":"iana","compressible":true},"application/coap-payload":{"source":"iana"},"application/commonground":{"source":"iana"},"application/conference-info+xml":{"source":"iana","compressible":true},"application/cose":{"source":"iana"},"application/cose-key":{"source":"iana"},"application/cose-key-set":{"source":"iana"},"application/cpl+xml":{"source":"iana","compressible":true},"application/csrattrs":{"source":"iana"},"application/csta+xml":{"source":"iana","compressible":true},"application/cstadata+xml":{"source":"iana","compressible":true},"application/csvm+json":{"source":"iana","compressible":true},"application/cu-seeme":{"source":"apache","extensions":["cu"]},"application/cwt":{"source":"iana"},"application/cybercash":{"source":"iana"},"application/dart":{"compressible":true},"application/dash+xml":{"source":"iana","compressible":true,"extensions":["mpd"]},"application/dashdelta":{"source":"iana"},"application/davmount+xml":{"source":"iana","compressible":true,"extensions":["davmount"]},"application/dca-rft":{"source":"iana"},"application/dcd":{"source":"iana"},"application/dec-dx":{"source":"iana"},"application/dialog-info+xml":{"source":"iana","compressible":true},"application/dicom":{"source":"iana"},"application/dicom+json":{"source":"iana","compressible":true},"application/dicom+xml":{"source":"iana","compressible":true},"application/dii":{"source":"iana"},"application/dit":{"source":"iana"},"application/dns":{"source":"iana"},"application/dns+json":{"source":"iana","compressible":true},"application/dns-message":{"source":"iana"},"application/docbook+xml":{"source":"apache","compressible":true,"extensions":["dbk"]},"application/dots+cbor":{"source":"iana"},"application/dskpp+xml":{"source":"iana","compressible":true},"application/dssc+der":{"source":"iana","extensions":["dssc"]},"application/dssc+xml":{"source":"iana","compressible":true,"extensions":["xdssc"]},"application/dvcs":{"source":"iana"},"application/ecmascript":{"source":"iana","compressible":true,"extensions":["es","ecma"]},"application/edi-consent":{"source":"iana"},"application/edi-x12":{"source":"iana","compressible":false},"application/edifact":{"source":"iana","compressible":false},"application/efi":{"source":"iana"},"application/elm+json":{"source":"iana","charset":"UTF-8","compressible":true},"application/elm+xml":{"source":"iana","compressible":true},"application/emergencycalldata.cap+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/emergencycalldata.comment+xml":{"source":"iana","compressible":true},"application/emergencycalldata.control+xml":{"source":"iana","compressible":true},"application/emergencycalldata.deviceinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.ecall.msd":{"source":"iana"},"application/emergencycalldata.providerinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.serviceinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.subscriberinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.veds+xml":{"source":"iana","compressible":true},"application/emma+xml":{"source":"iana","compressible":true,"extensions":["emma"]},"application/emotionml+xml":{"source":"iana","compressible":true,"extensions":["emotionml"]},"application/encaprtp":{"source":"iana"},"application/epp+xml":{"source":"iana","compressible":true},"application/epub+zip":{"source":"iana","compressible":false,"extensions":["epub"]},"application/eshop":{"source":"iana"},"application/exi":{"source":"iana","extensions":["exi"]},"application/expect-ct-report+json":{"source":"iana","compressible":true},"application/fastinfoset":{"source":"iana"},"application/fastsoap":{"source":"iana"},"application/fdt+xml":{"source":"iana","compressible":true,"extensions":["fdt"]},"application/fhir+json":{"source":"iana","charset":"UTF-8","compressible":true},"application/fhir+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/fido.trusted-apps+json":{"compressible":true},"application/fits":{"source":"iana"},"application/flexfec":{"source":"iana"},"application/font-sfnt":{"source":"iana"},"application/font-tdpfr":{"source":"iana","extensions":["pfr"]},"application/font-woff":{"source":"iana","compressible":false},"application/framework-attributes+xml":{"source":"iana","compressible":true},"application/geo+json":{"source":"iana","compressible":true,"extensions":["geojson"]},"application/geo+json-seq":{"source":"iana"},"application/geopackage+sqlite3":{"source":"iana"},"application/geoxacml+xml":{"source":"iana","compressible":true},"application/gltf-buffer":{"source":"iana"},"application/gml+xml":{"source":"iana","compressible":true,"extensions":["gml"]},"application/gpx+xml":{"source":"apache","compressible":true,"extensions":["gpx"]},"application/gxf":{"source":"apache","extensions":["gxf"]},"application/gzip":{"source":"iana","compressible":false,"extensions":["gz"]},"application/h224":{"source":"iana"},"application/held+xml":{"source":"iana","compressible":true},"application/hjson":{"extensions":["hjson"]},"application/http":{"source":"iana"},"application/hyperstudio":{"source":"iana","extensions":["stk"]},"application/ibe-key-request+xml":{"source":"iana","compressible":true},"application/ibe-pkg-reply+xml":{"source":"iana","compressible":true},"application/ibe-pp-data":{"source":"iana"},"application/iges":{"source":"iana"},"application/im-iscomposing+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/index":{"source":"iana"},"application/index.cmd":{"source":"iana"},"application/index.obj":{"source":"iana"},"application/index.response":{"source":"iana"},"application/index.vnd":{"source":"iana"},"application/inkml+xml":{"source":"iana","compressible":true,"extensions":["ink","inkml"]},"application/iotp":{"source":"iana"},"application/ipfix":{"source":"iana","extensions":["ipfix"]},"application/ipp":{"source":"iana"},"application/isup":{"source":"iana"},"application/its+xml":{"source":"iana","compressible":true,"extensions":["its"]},"application/java-archive":{"source":"apache","compressible":false,"extensions":["jar","war","ear"]},"application/java-serialized-object":{"source":"apache","compressible":false,"extensions":["ser"]},"application/java-vm":{"source":"apache","compressible":false,"extensions":["class"]},"application/javascript":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["js","mjs"]},"application/jf2feed+json":{"source":"iana","compressible":true},"application/jose":{"source":"iana"},"application/jose+json":{"source":"iana","compressible":true},"application/jrd+json":{"source":"iana","compressible":true},"application/jscalendar+json":{"source":"iana","compressible":true},"application/json":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["json","map"]},"application/json-patch+json":{"source":"iana","compressible":true},"application/json-seq":{"source":"iana"},"application/json5":{"extensions":["json5"]},"application/jsonml+json":{"source":"apache","compressible":true,"extensions":["jsonml"]},"application/jwk+json":{"source":"iana","compressible":true},"application/jwk-set+json":{"source":"iana","compressible":true},"application/jwt":{"source":"iana"},"application/kpml-request+xml":{"source":"iana","compressible":true},"application/kpml-response+xml":{"source":"iana","compressible":true},"application/ld+json":{"source":"iana","compressible":true,"extensions":["jsonld"]},"application/lgr+xml":{"source":"iana","compressible":true,"extensions":["lgr"]},"application/link-format":{"source":"iana"},"application/load-control+xml":{"source":"iana","compressible":true},"application/lost+xml":{"source":"iana","compressible":true,"extensions":["lostxml"]},"application/lostsync+xml":{"source":"iana","compressible":true},"application/lpf+zip":{"source":"iana","compressible":false},"application/lxf":{"source":"iana"},"application/mac-binhex40":{"source":"iana","extensions":["hqx"]},"application/mac-compactpro":{"source":"apache","extensions":["cpt"]},"application/macwriteii":{"source":"iana"},"application/mads+xml":{"source":"iana","compressible":true,"extensions":["mads"]},"application/manifest+json":{"charset":"UTF-8","compressible":true,"extensions":["webmanifest"]},"application/marc":{"source":"iana","extensions":["mrc"]},"application/marcxml+xml":{"source":"iana","compressible":true,"extensions":["mrcx"]},"application/mathematica":{"source":"iana","extensions":["ma","nb","mb"]},"application/mathml+xml":{"source":"iana","compressible":true,"extensions":["mathml"]},"application/mathml-content+xml":{"source":"iana","compressible":true},"application/mathml-presentation+xml":{"source":"iana","compressible":true},"application/mbms-associated-procedure-description+xml":{"source":"iana","compressible":true},"application/mbms-deregister+xml":{"source":"iana","compressible":true},"application/mbms-envelope+xml":{"source":"iana","compressible":true},"application/mbms-msk+xml":{"source":"iana","compressible":true},"application/mbms-msk-response+xml":{"source":"iana","compressible":true},"application/mbms-protection-description+xml":{"source":"iana","compressible":true},"application/mbms-reception-report+xml":{"source":"iana","compressible":true},"application/mbms-register+xml":{"source":"iana","compressible":true},"application/mbms-register-response+xml":{"source":"iana","compressible":true},"application/mbms-schedule+xml":{"source":"iana","compressible":true},"application/mbms-user-service-description+xml":{"source":"iana","compressible":true},"application/mbox":{"source":"iana","extensions":["mbox"]},"application/media-policy-dataset+xml":{"source":"iana","compressible":true},"application/media_control+xml":{"source":"iana","compressible":true},"application/mediaservercontrol+xml":{"source":"iana","compressible":true,"extensions":["mscml"]},"application/merge-patch+json":{"source":"iana","compressible":true},"application/metalink+xml":{"source":"apache","compressible":true,"extensions":["metalink"]},"application/metalink4+xml":{"source":"iana","compressible":true,"extensions":["meta4"]},"application/mets+xml":{"source":"iana","compressible":true,"extensions":["mets"]},"application/mf4":{"source":"iana"},"application/mikey":{"source":"iana"},"application/mipc":{"source":"iana"},"application/mmt-aei+xml":{"source":"iana","compressible":true,"extensions":["maei"]},"application/mmt-usd+xml":{"source":"iana","compressible":true,"extensions":["musd"]},"application/mods+xml":{"source":"iana","compressible":true,"extensions":["mods"]},"application/moss-keys":{"source":"iana"},"application/moss-signature":{"source":"iana"},"application/mosskey-data":{"source":"iana"},"application/mosskey-request":{"source":"iana"},"application/mp21":{"source":"iana","extensions":["m21","mp21"]},"application/mp4":{"source":"iana","extensions":["mp4s","m4p"]},"application/mpeg4-generic":{"source":"iana"},"application/mpeg4-iod":{"source":"iana"},"application/mpeg4-iod-xmt":{"source":"iana"},"application/mrb-consumer+xml":{"source":"iana","compressible":true},"application/mrb-publish+xml":{"source":"iana","compressible":true},"application/msc-ivr+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/msc-mixer+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/msword":{"source":"iana","compressible":false,"extensions":["doc","dot"]},"application/mud+json":{"source":"iana","compressible":true},"application/multipart-core":{"source":"iana"},"application/mxf":{"source":"iana","extensions":["mxf"]},"application/n-quads":{"source":"iana","extensions":["nq"]},"application/n-triples":{"source":"iana","extensions":["nt"]},"application/nasdata":{"source":"iana"},"application/news-checkgroups":{"source":"iana","charset":"US-ASCII"},"application/news-groupinfo":{"source":"iana","charset":"US-ASCII"},"application/news-transmission":{"source":"iana"},"application/nlsml+xml":{"source":"iana","compressible":true},"application/node":{"source":"iana","extensions":["cjs"]},"application/nss":{"source":"iana"},"application/ocsp-request":{"source":"iana"},"application/ocsp-response":{"source":"iana"},"application/octet-stream":{"source":"iana","compressible":false,"extensions":["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"]},"application/oda":{"source":"iana","extensions":["oda"]},"application/odm+xml":{"source":"iana","compressible":true},"application/odx":{"source":"iana"},"application/oebps-package+xml":{"source":"iana","compressible":true,"extensions":["opf"]},"application/ogg":{"source":"iana","compressible":false,"extensions":["ogx"]},"application/omdoc+xml":{"source":"apache","compressible":true,"extensions":["omdoc"]},"application/onenote":{"source":"apache","extensions":["onetoc","onetoc2","onetmp","onepkg"]},"application/opc-nodeset+xml":{"source":"iana","compressible":true},"application/oscore":{"source":"iana"},"application/oxps":{"source":"iana","extensions":["oxps"]},"application/p2p-overlay+xml":{"source":"iana","compressible":true,"extensions":["relo"]},"application/parityfec":{"source":"iana"},"application/passport":{"source":"iana"},"application/patch-ops-error+xml":{"source":"iana","compressible":true,"extensions":["xer"]},"application/pdf":{"source":"iana","compressible":false,"extensions":["pdf"]},"application/pdx":{"source":"iana"},"application/pem-certificate-chain":{"source":"iana"},"application/pgp-encrypted":{"source":"iana","compressible":false,"extensions":["pgp"]},"application/pgp-keys":{"source":"iana"},"application/pgp-signature":{"source":"iana","extensions":["asc","sig"]},"application/pics-rules":{"source":"apache","extensions":["prf"]},"application/pidf+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/pidf-diff+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/pkcs10":{"source":"iana","extensions":["p10"]},"application/pkcs12":{"source":"iana"},"application/pkcs7-mime":{"source":"iana","extensions":["p7m","p7c"]},"application/pkcs7-signature":{"source":"iana","extensions":["p7s"]},"application/pkcs8":{"source":"iana","extensions":["p8"]},"application/pkcs8-encrypted":{"source":"iana"},"application/pkix-attr-cert":{"source":"iana","extensions":["ac"]},"application/pkix-cert":{"source":"iana","extensions":["cer"]},"application/pkix-crl":{"source":"iana","extensions":["crl"]},"application/pkix-pkipath":{"source":"iana","extensions":["pkipath"]},"application/pkixcmp":{"source":"iana","extensions":["pki"]},"application/pls+xml":{"source":"iana","compressible":true,"extensions":["pls"]},"application/poc-settings+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/postscript":{"source":"iana","compressible":true,"extensions":["ai","eps","ps"]},"application/ppsp-tracker+json":{"source":"iana","compressible":true},"application/problem+json":{"source":"iana","compressible":true},"application/problem+xml":{"source":"iana","compressible":true},"application/provenance+xml":{"source":"iana","compressible":true,"extensions":["provx"]},"application/prs.alvestrand.titrax-sheet":{"source":"iana"},"application/prs.cww":{"source":"iana","extensions":["cww"]},"application/prs.cyn":{"source":"iana","charset":"7-BIT"},"application/prs.hpub+zip":{"source":"iana","compressible":false},"application/prs.nprend":{"source":"iana"},"application/prs.plucker":{"source":"iana"},"application/prs.rdf-xml-crypt":{"source":"iana"},"application/prs.xsf+xml":{"source":"iana","compressible":true},"application/pskc+xml":{"source":"iana","compressible":true,"extensions":["pskcxml"]},"application/pvd+json":{"source":"iana","compressible":true},"application/qsig":{"source":"iana"},"application/raml+yaml":{"compressible":true,"extensions":["raml"]},"application/raptorfec":{"source":"iana"},"application/rdap+json":{"source":"iana","compressible":true},"application/rdf+xml":{"source":"iana","compressible":true,"extensions":["rdf","owl"]},"application/reginfo+xml":{"source":"iana","compressible":true,"extensions":["rif"]},"application/relax-ng-compact-syntax":{"source":"iana","extensions":["rnc"]},"application/remote-printing":{"source":"iana"},"application/reputon+json":{"source":"iana","compressible":true},"application/resource-lists+xml":{"source":"iana","compressible":true,"extensions":["rl"]},"application/resource-lists-diff+xml":{"source":"iana","compressible":true,"extensions":["rld"]},"application/rfc+xml":{"source":"iana","compressible":true},"application/riscos":{"source":"iana"},"application/rlmi+xml":{"source":"iana","compressible":true},"application/rls-services+xml":{"source":"iana","compressible":true,"extensions":["rs"]},"application/route-apd+xml":{"source":"iana","compressible":true,"extensions":["rapd"]},"application/route-s-tsid+xml":{"source":"iana","compressible":true,"extensions":["sls"]},"application/route-usd+xml":{"source":"iana","compressible":true,"extensions":["rusd"]},"application/rpki-ghostbusters":{"source":"iana","extensions":["gbr"]},"application/rpki-manifest":{"source":"iana","extensions":["mft"]},"application/rpki-publication":{"source":"iana"},"application/rpki-roa":{"source":"iana","extensions":["roa"]},"application/rpki-updown":{"source":"iana"},"application/rsd+xml":{"source":"apache","compressible":true,"extensions":["rsd"]},"application/rss+xml":{"source":"apache","compressible":true,"extensions":["rss"]},"application/rtf":{"source":"iana","compressible":true,"extensions":["rtf"]},"application/rtploopback":{"source":"iana"},"application/rtx":{"source":"iana"},"application/samlassertion+xml":{"source":"iana","compressible":true},"application/samlmetadata+xml":{"source":"iana","compressible":true},"application/sarif+json":{"source":"iana","compressible":true},"application/sbe":{"source":"iana"},"application/sbml+xml":{"source":"iana","compressible":true,"extensions":["sbml"]},"application/scaip+xml":{"source":"iana","compressible":true},"application/scim+json":{"source":"iana","compressible":true},"application/scvp-cv-request":{"source":"iana","extensions":["scq"]},"application/scvp-cv-response":{"source":"iana","extensions":["scs"]},"application/scvp-vp-request":{"source":"iana","extensions":["spq"]},"application/scvp-vp-response":{"source":"iana","extensions":["spp"]},"application/sdp":{"source":"iana","extensions":["sdp"]},"application/secevent+jwt":{"source":"iana"},"application/senml+cbor":{"source":"iana"},"application/senml+json":{"source":"iana","compressible":true},"application/senml+xml":{"source":"iana","compressible":true,"extensions":["senmlx"]},"application/senml-etch+cbor":{"source":"iana"},"application/senml-etch+json":{"source":"iana","compressible":true},"application/senml-exi":{"source":"iana"},"application/sensml+cbor":{"source":"iana"},"application/sensml+json":{"source":"iana","compressible":true},"application/sensml+xml":{"source":"iana","compressible":true,"extensions":["sensmlx"]},"application/sensml-exi":{"source":"iana"},"application/sep+xml":{"source":"iana","compressible":true},"application/sep-exi":{"source":"iana"},"application/session-info":{"source":"iana"},"application/set-payment":{"source":"iana"},"application/set-payment-initiation":{"source":"iana","extensions":["setpay"]},"application/set-registration":{"source":"iana"},"application/set-registration-initiation":{"source":"iana","extensions":["setreg"]},"application/sgml":{"source":"iana"},"application/sgml-open-catalog":{"source":"iana"},"application/shf+xml":{"source":"iana","compressible":true,"extensions":["shf"]},"application/sieve":{"source":"iana","extensions":["siv","sieve"]},"application/simple-filter+xml":{"source":"iana","compressible":true},"application/simple-message-summary":{"source":"iana"},"application/simplesymbolcontainer":{"source":"iana"},"application/sipc":{"source":"iana"},"application/slate":{"source":"iana"},"application/smil":{"source":"iana"},"application/smil+xml":{"source":"iana","compressible":true,"extensions":["smi","smil"]},"application/smpte336m":{"source":"iana"},"application/soap+fastinfoset":{"source":"iana"},"application/soap+xml":{"source":"iana","compressible":true},"application/sparql-query":{"source":"iana","extensions":["rq"]},"application/sparql-results+xml":{"source":"iana","compressible":true,"extensions":["srx"]},"application/spirits-event+xml":{"source":"iana","compressible":true},"application/sql":{"source":"iana"},"application/srgs":{"source":"iana","extensions":["gram"]},"application/srgs+xml":{"source":"iana","compressible":true,"extensions":["grxml"]},"application/sru+xml":{"source":"iana","compressible":true,"extensions":["sru"]},"application/ssdl+xml":{"source":"apache","compressible":true,"extensions":["ssdl"]},"application/ssml+xml":{"source":"iana","compressible":true,"extensions":["ssml"]},"application/stix+json":{"source":"iana","compressible":true},"application/swid+xml":{"source":"iana","compressible":true,"extensions":["swidtag"]},"application/tamp-apex-update":{"source":"iana"},"application/tamp-apex-update-confirm":{"source":"iana"},"application/tamp-community-update":{"source":"iana"},"application/tamp-community-update-confirm":{"source":"iana"},"application/tamp-error":{"source":"iana"},"application/tamp-sequence-adjust":{"source":"iana"},"application/tamp-sequence-adjust-confirm":{"source":"iana"},"application/tamp-status-query":{"source":"iana"},"application/tamp-status-response":{"source":"iana"},"application/tamp-update":{"source":"iana"},"application/tamp-update-confirm":{"source":"iana"},"application/tar":{"compressible":true},"application/taxii+json":{"source":"iana","compressible":true},"application/td+json":{"source":"iana","compressible":true},"application/tei+xml":{"source":"iana","compressible":true,"extensions":["tei","teicorpus"]},"application/tetra_isi":{"source":"iana"},"application/thraud+xml":{"source":"iana","compressible":true,"extensions":["tfi"]},"application/timestamp-query":{"source":"iana"},"application/timestamp-reply":{"source":"iana"},"application/timestamped-data":{"source":"iana","extensions":["tsd"]},"application/tlsrpt+gzip":{"source":"iana"},"application/tlsrpt+json":{"source":"iana","compressible":true},"application/tnauthlist":{"source":"iana"},"application/toml":{"compressible":true,"extensions":["toml"]},"application/trickle-ice-sdpfrag":{"source":"iana"},"application/trig":{"source":"iana"},"application/ttml+xml":{"source":"iana","compressible":true,"extensions":["ttml"]},"application/tve-trigger":{"source":"iana"},"application/tzif":{"source":"iana"},"application/tzif-leap":{"source":"iana"},"application/ubjson":{"compressible":false,"extensions":["ubj"]},"application/ulpfec":{"source":"iana"},"application/urc-grpsheet+xml":{"source":"iana","compressible":true},"application/urc-ressheet+xml":{"source":"iana","compressible":true,"extensions":["rsheet"]},"application/urc-targetdesc+xml":{"source":"iana","compressible":true,"extensions":["td"]},"application/urc-uisocketdesc+xml":{"source":"iana","compressible":true},"application/vcard+json":{"source":"iana","compressible":true},"application/vcard+xml":{"source":"iana","compressible":true},"application/vemmi":{"source":"iana"},"application/vividence.scriptfile":{"source":"apache"},"application/vnd.1000minds.decision-model+xml":{"source":"iana","compressible":true,"extensions":["1km"]},"application/vnd.3gpp-prose+xml":{"source":"iana","compressible":true},"application/vnd.3gpp-prose-pc3ch+xml":{"source":"iana","compressible":true},"application/vnd.3gpp-v2x-local-service-information":{"source":"iana"},"application/vnd.3gpp.access-transfer-events+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.bsf+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.gmop+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.interworking-data":{"source":"iana"},"application/vnd.3gpp.mc-signalling-ear":{"source":"iana"},"application/vnd.3gpp.mcdata-affiliation-command+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcdata-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcdata-payload":{"source":"iana"},"application/vnd.3gpp.mcdata-service-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcdata-signalling":{"source":"iana"},"application/vnd.3gpp.mcdata-ue-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcdata-user-profile+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-affiliation-command+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-floor-request+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-location-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-mbms-usage-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-service-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-signed+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-ue-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-ue-init-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-user-profile+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-affiliation-command+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-affiliation-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-location-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-mbms-usage-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-service-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-transmission-request+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-ue-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-user-profile+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mid-call+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.pic-bw-large":{"source":"iana","extensions":["plb"]},"application/vnd.3gpp.pic-bw-small":{"source":"iana","extensions":["psb"]},"application/vnd.3gpp.pic-bw-var":{"source":"iana","extensions":["pvb"]},"application/vnd.3gpp.sms":{"source":"iana"},"application/vnd.3gpp.sms+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.srvcc-ext+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.srvcc-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.state-and-event-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.ussd+xml":{"source":"iana","compressible":true},"application/vnd.3gpp2.bcmcsinfo+xml":{"source":"iana","compressible":true},"application/vnd.3gpp2.sms":{"source":"iana"},"application/vnd.3gpp2.tcap":{"source":"iana","extensions":["tcap"]},"application/vnd.3lightssoftware.imagescal":{"source":"iana"},"application/vnd.3m.post-it-notes":{"source":"iana","extensions":["pwn"]},"application/vnd.accpac.simply.aso":{"source":"iana","extensions":["aso"]},"application/vnd.accpac.simply.imp":{"source":"iana","extensions":["imp"]},"application/vnd.acucobol":{"source":"iana","extensions":["acu"]},"application/vnd.acucorp":{"source":"iana","extensions":["atc","acutc"]},"application/vnd.adobe.air-application-installer-package+zip":{"source":"apache","compressible":false,"extensions":["air"]},"application/vnd.adobe.flash.movie":{"source":"iana"},"application/vnd.adobe.formscentral.fcdt":{"source":"iana","extensions":["fcdt"]},"application/vnd.adobe.fxp":{"source":"iana","extensions":["fxp","fxpl"]},"application/vnd.adobe.partial-upload":{"source":"iana"},"application/vnd.adobe.xdp+xml":{"source":"iana","compressible":true,"extensions":["xdp"]},"application/vnd.adobe.xfdf":{"source":"iana","extensions":["xfdf"]},"application/vnd.aether.imp":{"source":"iana"},"application/vnd.afpc.afplinedata":{"source":"iana"},"application/vnd.afpc.afplinedata-pagedef":{"source":"iana"},"application/vnd.afpc.cmoca-cmresource":{"source":"iana"},"application/vnd.afpc.foca-charset":{"source":"iana"},"application/vnd.afpc.foca-codedfont":{"source":"iana"},"application/vnd.afpc.foca-codepage":{"source":"iana"},"application/vnd.afpc.modca":{"source":"iana"},"application/vnd.afpc.modca-cmtable":{"source":"iana"},"application/vnd.afpc.modca-formdef":{"source":"iana"},"application/vnd.afpc.modca-mediummap":{"source":"iana"},"application/vnd.afpc.modca-objectcontainer":{"source":"iana"},"application/vnd.afpc.modca-overlay":{"source":"iana"},"application/vnd.afpc.modca-pagesegment":{"source":"iana"},"application/vnd.ah-barcode":{"source":"iana"},"application/vnd.ahead.space":{"source":"iana","extensions":["ahead"]},"application/vnd.airzip.filesecure.azf":{"source":"iana","extensions":["azf"]},"application/vnd.airzip.filesecure.azs":{"source":"iana","extensions":["azs"]},"application/vnd.amadeus+json":{"source":"iana","compressible":true},"application/vnd.amazon.ebook":{"source":"apache","extensions":["azw"]},"application/vnd.amazon.mobi8-ebook":{"source":"iana"},"application/vnd.americandynamics.acc":{"source":"iana","extensions":["acc"]},"application/vnd.amiga.ami":{"source":"iana","extensions":["ami"]},"application/vnd.amundsen.maze+xml":{"source":"iana","compressible":true},"application/vnd.android.ota":{"source":"iana"},"application/vnd.android.package-archive":{"source":"apache","compressible":false,"extensions":["apk"]},"application/vnd.anki":{"source":"iana"},"application/vnd.anser-web-certificate-issue-initiation":{"source":"iana","extensions":["cii"]},"application/vnd.anser-web-funds-transfer-initiation":{"source":"apache","extensions":["fti"]},"application/vnd.antix.game-component":{"source":"iana","extensions":["atx"]},"application/vnd.apache.thrift.binary":{"source":"iana"},"application/vnd.apache.thrift.compact":{"source":"iana"},"application/vnd.apache.thrift.json":{"source":"iana"},"application/vnd.api+json":{"source":"iana","compressible":true},"application/vnd.aplextor.warrp+json":{"source":"iana","compressible":true},"application/vnd.apothekende.reservation+json":{"source":"iana","compressible":true},"application/vnd.apple.installer+xml":{"source":"iana","compressible":true,"extensions":["mpkg"]},"application/vnd.apple.keynote":{"source":"iana","extensions":["key"]},"application/vnd.apple.mpegurl":{"source":"iana","extensions":["m3u8"]},"application/vnd.apple.numbers":{"source":"iana","extensions":["numbers"]},"application/vnd.apple.pages":{"source":"iana","extensions":["pages"]},"application/vnd.apple.pkpass":{"compressible":false,"extensions":["pkpass"]},"application/vnd.arastra.swi":{"source":"iana"},"application/vnd.aristanetworks.swi":{"source":"iana","extensions":["swi"]},"application/vnd.artisan+json":{"source":"iana","compressible":true},"application/vnd.artsquare":{"source":"iana"},"application/vnd.astraea-software.iota":{"source":"iana","extensions":["iota"]},"application/vnd.audiograph":{"source":"iana","extensions":["aep"]},"application/vnd.autopackage":{"source":"iana"},"application/vnd.avalon+json":{"source":"iana","compressible":true},"application/vnd.avistar+xml":{"source":"iana","compressible":true},"application/vnd.balsamiq.bmml+xml":{"source":"iana","compressible":true,"extensions":["bmml"]},"application/vnd.balsamiq.bmpr":{"source":"iana"},"application/vnd.banana-accounting":{"source":"iana"},"application/vnd.bbf.usp.error":{"source":"iana"},"application/vnd.bbf.usp.msg":{"source":"iana"},"application/vnd.bbf.usp.msg+json":{"source":"iana","compressible":true},"application/vnd.bekitzur-stech+json":{"source":"iana","compressible":true},"application/vnd.bint.med-content":{"source":"iana"},"application/vnd.biopax.rdf+xml":{"source":"iana","compressible":true},"application/vnd.blink-idb-value-wrapper":{"source":"iana"},"application/vnd.blueice.multipass":{"source":"iana","extensions":["mpm"]},"application/vnd.bluetooth.ep.oob":{"source":"iana"},"application/vnd.bluetooth.le.oob":{"source":"iana"},"application/vnd.bmi":{"source":"iana","extensions":["bmi"]},"application/vnd.bpf":{"source":"iana"},"application/vnd.bpf3":{"source":"iana"},"application/vnd.businessobjects":{"source":"iana","extensions":["rep"]},"application/vnd.byu.uapi+json":{"source":"iana","compressible":true},"application/vnd.cab-jscript":{"source":"iana"},"application/vnd.canon-cpdl":{"source":"iana"},"application/vnd.canon-lips":{"source":"iana"},"application/vnd.capasystems-pg+json":{"source":"iana","compressible":true},"application/vnd.cendio.thinlinc.clientconf":{"source":"iana"},"application/vnd.century-systems.tcp_stream":{"source":"iana"},"application/vnd.chemdraw+xml":{"source":"iana","compressible":true,"extensions":["cdxml"]},"application/vnd.chess-pgn":{"source":"iana"},"application/vnd.chipnuts.karaoke-mmd":{"source":"iana","extensions":["mmd"]},"application/vnd.ciedi":{"source":"iana"},"application/vnd.cinderella":{"source":"iana","extensions":["cdy"]},"application/vnd.cirpack.isdn-ext":{"source":"iana"},"application/vnd.citationstyles.style+xml":{"source":"iana","compressible":true,"extensions":["csl"]},"application/vnd.claymore":{"source":"iana","extensions":["cla"]},"application/vnd.cloanto.rp9":{"source":"iana","extensions":["rp9"]},"application/vnd.clonk.c4group":{"source":"iana","extensions":["c4g","c4d","c4f","c4p","c4u"]},"application/vnd.cluetrust.cartomobile-config":{"source":"iana","extensions":["c11amc"]},"application/vnd.cluetrust.cartomobile-config-pkg":{"source":"iana","extensions":["c11amz"]},"application/vnd.coffeescript":{"source":"iana"},"application/vnd.collabio.xodocuments.document":{"source":"iana"},"application/vnd.collabio.xodocuments.document-template":{"source":"iana"},"application/vnd.collabio.xodocuments.presentation":{"source":"iana"},"application/vnd.collabio.xodocuments.presentation-template":{"source":"iana"},"application/vnd.collabio.xodocuments.spreadsheet":{"source":"iana"},"application/vnd.collabio.xodocuments.spreadsheet-template":{"source":"iana"},"application/vnd.collection+json":{"source":"iana","compressible":true},"application/vnd.collection.doc+json":{"source":"iana","compressible":true},"application/vnd.collection.next+json":{"source":"iana","compressible":true},"application/vnd.comicbook+zip":{"source":"iana","compressible":false},"application/vnd.comicbook-rar":{"source":"iana"},"application/vnd.commerce-battelle":{"source":"iana"},"application/vnd.commonspace":{"source":"iana","extensions":["csp"]},"application/vnd.contact.cmsg":{"source":"iana","extensions":["cdbcmsg"]},"application/vnd.coreos.ignition+json":{"source":"iana","compressible":true},"application/vnd.cosmocaller":{"source":"iana","extensions":["cmc"]},"application/vnd.crick.clicker":{"source":"iana","extensions":["clkx"]},"application/vnd.crick.clicker.keyboard":{"source":"iana","extensions":["clkk"]},"application/vnd.crick.clicker.palette":{"source":"iana","extensions":["clkp"]},"application/vnd.crick.clicker.template":{"source":"iana","extensions":["clkt"]},"application/vnd.crick.clicker.wordbank":{"source":"iana","extensions":["clkw"]},"application/vnd.criticaltools.wbs+xml":{"source":"iana","compressible":true,"extensions":["wbs"]},"application/vnd.cryptii.pipe+json":{"source":"iana","compressible":true},"application/vnd.crypto-shade-file":{"source":"iana"},"application/vnd.cryptomator.encrypted":{"source":"iana"},"application/vnd.ctc-posml":{"source":"iana","extensions":["pml"]},"application/vnd.ctct.ws+xml":{"source":"iana","compressible":true},"application/vnd.cups-pdf":{"source":"iana"},"application/vnd.cups-postscript":{"source":"iana"},"application/vnd.cups-ppd":{"source":"iana","extensions":["ppd"]},"application/vnd.cups-raster":{"source":"iana"},"application/vnd.cups-raw":{"source":"iana"},"application/vnd.curl":{"source":"iana"},"application/vnd.curl.car":{"source":"apache","extensions":["car"]},"application/vnd.curl.pcurl":{"source":"apache","extensions":["pcurl"]},"application/vnd.cyan.dean.root+xml":{"source":"iana","compressible":true},"application/vnd.cybank":{"source":"iana"},"application/vnd.cyclonedx+json":{"source":"iana","compressible":true},"application/vnd.cyclonedx+xml":{"source":"iana","compressible":true},"application/vnd.d2l.coursepackage1p0+zip":{"source":"iana","compressible":false},"application/vnd.d3m-dataset":{"source":"iana"},"application/vnd.d3m-problem":{"source":"iana"},"application/vnd.dart":{"source":"iana","compressible":true,"extensions":["dart"]},"application/vnd.data-vision.rdz":{"source":"iana","extensions":["rdz"]},"application/vnd.datapackage+json":{"source":"iana","compressible":true},"application/vnd.dataresource+json":{"source":"iana","compressible":true},"application/vnd.dbf":{"source":"iana","extensions":["dbf"]},"application/vnd.debian.binary-package":{"source":"iana"},"application/vnd.dece.data":{"source":"iana","extensions":["uvf","uvvf","uvd","uvvd"]},"application/vnd.dece.ttml+xml":{"source":"iana","compressible":true,"extensions":["uvt","uvvt"]},"application/vnd.dece.unspecified":{"source":"iana","extensions":["uvx","uvvx"]},"application/vnd.dece.zip":{"source":"iana","extensions":["uvz","uvvz"]},"application/vnd.denovo.fcselayout-link":{"source":"iana","extensions":["fe_launch"]},"application/vnd.desmume.movie":{"source":"iana"},"application/vnd.dir-bi.plate-dl-nosuffix":{"source":"iana"},"application/vnd.dm.delegation+xml":{"source":"iana","compressible":true},"application/vnd.dna":{"source":"iana","extensions":["dna"]},"application/vnd.document+json":{"source":"iana","compressible":true},"application/vnd.dolby.mlp":{"source":"apache","extensions":["mlp"]},"application/vnd.dolby.mobile.1":{"source":"iana"},"application/vnd.dolby.mobile.2":{"source":"iana"},"application/vnd.doremir.scorecloud-binary-document":{"source":"iana"},"application/vnd.dpgraph":{"source":"iana","extensions":["dpg"]},"application/vnd.dreamfactory":{"source":"iana","extensions":["dfac"]},"application/vnd.drive+json":{"source":"iana","compressible":true},"application/vnd.ds-keypoint":{"source":"apache","extensions":["kpxx"]},"application/vnd.dtg.local":{"source":"iana"},"application/vnd.dtg.local.flash":{"source":"iana"},"application/vnd.dtg.local.html":{"source":"iana"},"application/vnd.dvb.ait":{"source":"iana","extensions":["ait"]},"application/vnd.dvb.dvbisl+xml":{"source":"iana","compressible":true},"application/vnd.dvb.dvbj":{"source":"iana"},"application/vnd.dvb.esgcontainer":{"source":"iana"},"application/vnd.dvb.ipdcdftnotifaccess":{"source":"iana"},"application/vnd.dvb.ipdcesgaccess":{"source":"iana"},"application/vnd.dvb.ipdcesgaccess2":{"source":"iana"},"application/vnd.dvb.ipdcesgpdd":{"source":"iana"},"application/vnd.dvb.ipdcroaming":{"source":"iana"},"application/vnd.dvb.iptv.alfec-base":{"source":"iana"},"application/vnd.dvb.iptv.alfec-enhancement":{"source":"iana"},"application/vnd.dvb.notif-aggregate-root+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-container+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-generic+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-ia-msglist+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-ia-registration-request+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-ia-registration-response+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-init+xml":{"source":"iana","compressible":true},"application/vnd.dvb.pfr":{"source":"iana"},"application/vnd.dvb.service":{"source":"iana","extensions":["svc"]},"application/vnd.dxr":{"source":"iana"},"application/vnd.dynageo":{"source":"iana","extensions":["geo"]},"application/vnd.dzr":{"source":"iana"},"application/vnd.easykaraoke.cdgdownload":{"source":"iana"},"application/vnd.ecdis-update":{"source":"iana"},"application/vnd.ecip.rlp":{"source":"iana"},"application/vnd.ecowin.chart":{"source":"iana","extensions":["mag"]},"application/vnd.ecowin.filerequest":{"source":"iana"},"application/vnd.ecowin.fileupdate":{"source":"iana"},"application/vnd.ecowin.series":{"source":"iana"},"application/vnd.ecowin.seriesrequest":{"source":"iana"},"application/vnd.ecowin.seriesupdate":{"source":"iana"},"application/vnd.efi.img":{"source":"iana"},"application/vnd.efi.iso":{"source":"iana"},"application/vnd.emclient.accessrequest+xml":{"source":"iana","compressible":true},"application/vnd.enliven":{"source":"iana","extensions":["nml"]},"application/vnd.enphase.envoy":{"source":"iana"},"application/vnd.eprints.data+xml":{"source":"iana","compressible":true},"application/vnd.epson.esf":{"source":"iana","extensions":["esf"]},"application/vnd.epson.msf":{"source":"iana","extensions":["msf"]},"application/vnd.epson.quickanime":{"source":"iana","extensions":["qam"]},"application/vnd.epson.salt":{"source":"iana","extensions":["slt"]},"application/vnd.epson.ssf":{"source":"iana","extensions":["ssf"]},"application/vnd.ericsson.quickcall":{"source":"iana"},"application/vnd.espass-espass+zip":{"source":"iana","compressible":false},"application/vnd.eszigno3+xml":{"source":"iana","compressible":true,"extensions":["es3","et3"]},"application/vnd.etsi.aoc+xml":{"source":"iana","compressible":true},"application/vnd.etsi.asic-e+zip":{"source":"iana","compressible":false},"application/vnd.etsi.asic-s+zip":{"source":"iana","compressible":false},"application/vnd.etsi.cug+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvcommand+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvdiscovery+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvprofile+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsad-bc+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsad-cod+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsad-npvr+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvservice+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsync+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvueprofile+xml":{"source":"iana","compressible":true},"application/vnd.etsi.mcid+xml":{"source":"iana","compressible":true},"application/vnd.etsi.mheg5":{"source":"iana"},"application/vnd.etsi.overload-control-policy-dataset+xml":{"source":"iana","compressible":true},"application/vnd.etsi.pstn+xml":{"source":"iana","compressible":true},"application/vnd.etsi.sci+xml":{"source":"iana","compressible":true},"application/vnd.etsi.simservs+xml":{"source":"iana","compressible":true},"application/vnd.etsi.timestamp-token":{"source":"iana"},"application/vnd.etsi.tsl+xml":{"source":"iana","compressible":true},"application/vnd.etsi.tsl.der":{"source":"iana"},"application/vnd.eudora.data":{"source":"iana"},"application/vnd.evolv.ecig.profile":{"source":"iana"},"application/vnd.evolv.ecig.settings":{"source":"iana"},"application/vnd.evolv.ecig.theme":{"source":"iana"},"application/vnd.exstream-empower+zip":{"source":"iana","compressible":false},"application/vnd.exstream-package":{"source":"iana"},"application/vnd.ezpix-album":{"source":"iana","extensions":["ez2"]},"application/vnd.ezpix-package":{"source":"iana","extensions":["ez3"]},"application/vnd.f-secure.mobile":{"source":"iana"},"application/vnd.fastcopy-disk-image":{"source":"iana"},"application/vnd.fdf":{"source":"iana","extensions":["fdf"]},"application/vnd.fdsn.mseed":{"source":"iana","extensions":["mseed"]},"application/vnd.fdsn.seed":{"source":"iana","extensions":["seed","dataless"]},"application/vnd.ffsns":{"source":"iana"},"application/vnd.ficlab.flb+zip":{"source":"iana","compressible":false},"application/vnd.filmit.zfc":{"source":"iana"},"application/vnd.fints":{"source":"iana"},"application/vnd.firemonkeys.cloudcell":{"source":"iana"},"application/vnd.flographit":{"source":"iana","extensions":["gph"]},"application/vnd.fluxtime.clip":{"source":"iana","extensions":["ftc"]},"application/vnd.font-fontforge-sfd":{"source":"iana"},"application/vnd.framemaker":{"source":"iana","extensions":["fm","frame","maker","book"]},"application/vnd.frogans.fnc":{"source":"iana","extensions":["fnc"]},"application/vnd.frogans.ltf":{"source":"iana","extensions":["ltf"]},"application/vnd.fsc.weblaunch":{"source":"iana","extensions":["fsc"]},"application/vnd.fujitsu.oasys":{"source":"iana","extensions":["oas"]},"application/vnd.fujitsu.oasys2":{"source":"iana","extensions":["oa2"]},"application/vnd.fujitsu.oasys3":{"source":"iana","extensions":["oa3"]},"application/vnd.fujitsu.oasysgp":{"source":"iana","extensions":["fg5"]},"application/vnd.fujitsu.oasysprs":{"source":"iana","extensions":["bh2"]},"application/vnd.fujixerox.art-ex":{"source":"iana"},"application/vnd.fujixerox.art4":{"source":"iana"},"application/vnd.fujixerox.ddd":{"source":"iana","extensions":["ddd"]},"application/vnd.fujixerox.docuworks":{"source":"iana","extensions":["xdw"]},"application/vnd.fujixerox.docuworks.binder":{"source":"iana","extensions":["xbd"]},"application/vnd.fujixerox.docuworks.container":{"source":"iana"},"application/vnd.fujixerox.hbpl":{"source":"iana"},"application/vnd.fut-misnet":{"source":"iana"},"application/vnd.futoin+cbor":{"source":"iana"},"application/vnd.futoin+json":{"source":"iana","compressible":true},"application/vnd.fuzzysheet":{"source":"iana","extensions":["fzs"]},"application/vnd.genomatix.tuxedo":{"source":"iana","extensions":["txd"]},"application/vnd.gentics.grd+json":{"source":"iana","compressible":true},"application/vnd.geo+json":{"source":"iana","compressible":true},"application/vnd.geocube+xml":{"source":"iana","compressible":true},"application/vnd.geogebra.file":{"source":"iana","extensions":["ggb"]},"application/vnd.geogebra.slides":{"source":"iana"},"application/vnd.geogebra.tool":{"source":"iana","extensions":["ggt"]},"application/vnd.geometry-explorer":{"source":"iana","extensions":["gex","gre"]},"application/vnd.geonext":{"source":"iana","extensions":["gxt"]},"application/vnd.geoplan":{"source":"iana","extensions":["g2w"]},"application/vnd.geospace":{"source":"iana","extensions":["g3w"]},"application/vnd.gerber":{"source":"iana"},"application/vnd.globalplatform.card-content-mgt":{"source":"iana"},"application/vnd.globalplatform.card-content-mgt-response":{"source":"iana"},"application/vnd.gmx":{"source":"iana","extensions":["gmx"]},"application/vnd.google-apps.document":{"compressible":false,"extensions":["gdoc"]},"application/vnd.google-apps.presentation":{"compressible":false,"extensions":["gslides"]},"application/vnd.google-apps.spreadsheet":{"compressible":false,"extensions":["gsheet"]},"application/vnd.google-earth.kml+xml":{"source":"iana","compressible":true,"extensions":["kml"]},"application/vnd.google-earth.kmz":{"source":"iana","compressible":false,"extensions":["kmz"]},"application/vnd.gov.sk.e-form+xml":{"source":"iana","compressible":true},"application/vnd.gov.sk.e-form+zip":{"source":"iana","compressible":false},"application/vnd.gov.sk.xmldatacontainer+xml":{"source":"iana","compressible":true},"application/vnd.grafeq":{"source":"iana","extensions":["gqf","gqs"]},"application/vnd.gridmp":{"source":"iana"},"application/vnd.groove-account":{"source":"iana","extensions":["gac"]},"application/vnd.groove-help":{"source":"iana","extensions":["ghf"]},"application/vnd.groove-identity-message":{"source":"iana","extensions":["gim"]},"application/vnd.groove-injector":{"source":"iana","extensions":["grv"]},"application/vnd.groove-tool-message":{"source":"iana","extensions":["gtm"]},"application/vnd.groove-tool-template":{"source":"iana","extensions":["tpl"]},"application/vnd.groove-vcard":{"source":"iana","extensions":["vcg"]},"application/vnd.hal+json":{"source":"iana","compressible":true},"application/vnd.hal+xml":{"source":"iana","compressible":true,"extensions":["hal"]},"application/vnd.handheld-entertainment+xml":{"source":"iana","compressible":true,"extensions":["zmm"]},"application/vnd.hbci":{"source":"iana","extensions":["hbci"]},"application/vnd.hc+json":{"source":"iana","compressible":true},"application/vnd.hcl-bireports":{"source":"iana"},"application/vnd.hdt":{"source":"iana"},"application/vnd.heroku+json":{"source":"iana","compressible":true},"application/vnd.hhe.lesson-player":{"source":"iana","extensions":["les"]},"application/vnd.hp-hpgl":{"source":"iana","extensions":["hpgl"]},"application/vnd.hp-hpid":{"source":"iana","extensions":["hpid"]},"application/vnd.hp-hps":{"source":"iana","extensions":["hps"]},"application/vnd.hp-jlyt":{"source":"iana","extensions":["jlt"]},"application/vnd.hp-pcl":{"source":"iana","extensions":["pcl"]},"application/vnd.hp-pclxl":{"source":"iana","extensions":["pclxl"]},"application/vnd.httphone":{"source":"iana"},"application/vnd.hydrostatix.sof-data":{"source":"iana","extensions":["sfd-hdstx"]},"application/vnd.hyper+json":{"source":"iana","compressible":true},"application/vnd.hyper-item+json":{"source":"iana","compressible":true},"application/vnd.hyperdrive+json":{"source":"iana","compressible":true},"application/vnd.hzn-3d-crossword":{"source":"iana"},"application/vnd.ibm.afplinedata":{"source":"iana"},"application/vnd.ibm.electronic-media":{"source":"iana"},"application/vnd.ibm.minipay":{"source":"iana","extensions":["mpy"]},"application/vnd.ibm.modcap":{"source":"iana","extensions":["afp","listafp","list3820"]},"application/vnd.ibm.rights-management":{"source":"iana","extensions":["irm"]},"application/vnd.ibm.secure-container":{"source":"iana","extensions":["sc"]},"application/vnd.iccprofile":{"source":"iana","extensions":["icc","icm"]},"application/vnd.ieee.1905":{"source":"iana"},"application/vnd.igloader":{"source":"iana","extensions":["igl"]},"application/vnd.imagemeter.folder+zip":{"source":"iana","compressible":false},"application/vnd.imagemeter.image+zip":{"source":"iana","compressible":false},"application/vnd.immervision-ivp":{"source":"iana","extensions":["ivp"]},"application/vnd.immervision-ivu":{"source":"iana","extensions":["ivu"]},"application/vnd.ims.imsccv1p1":{"source":"iana"},"application/vnd.ims.imsccv1p2":{"source":"iana"},"application/vnd.ims.imsccv1p3":{"source":"iana"},"application/vnd.ims.lis.v2.result+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolconsumerprofile+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolproxy+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolproxy.id+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolsettings+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolsettings.simple+json":{"source":"iana","compressible":true},"application/vnd.informedcontrol.rms+xml":{"source":"iana","compressible":true},"application/vnd.informix-visionary":{"source":"iana"},"application/vnd.infotech.project":{"source":"iana"},"application/vnd.infotech.project+xml":{"source":"iana","compressible":true},"application/vnd.innopath.wamp.notification":{"source":"iana"},"application/vnd.insors.igm":{"source":"iana","extensions":["igm"]},"application/vnd.intercon.formnet":{"source":"iana","extensions":["xpw","xpx"]},"application/vnd.intergeo":{"source":"iana","extensions":["i2g"]},"application/vnd.intertrust.digibox":{"source":"iana"},"application/vnd.intertrust.nncp":{"source":"iana"},"application/vnd.intu.qbo":{"source":"iana","extensions":["qbo"]},"application/vnd.intu.qfx":{"source":"iana","extensions":["qfx"]},"application/vnd.iptc.g2.catalogitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.conceptitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.knowledgeitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.newsitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.newsmessage+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.packageitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.planningitem+xml":{"source":"iana","compressible":true},"application/vnd.ipunplugged.rcprofile":{"source":"iana","extensions":["rcprofile"]},"application/vnd.irepository.package+xml":{"source":"iana","compressible":true,"extensions":["irp"]},"application/vnd.is-xpr":{"source":"iana","extensions":["xpr"]},"application/vnd.isac.fcs":{"source":"iana","extensions":["fcs"]},"application/vnd.iso11783-10+zip":{"source":"iana","compressible":false},"application/vnd.jam":{"source":"iana","extensions":["jam"]},"application/vnd.japannet-directory-service":{"source":"iana"},"application/vnd.japannet-jpnstore-wakeup":{"source":"iana"},"application/vnd.japannet-payment-wakeup":{"source":"iana"},"application/vnd.japannet-registration":{"source":"iana"},"application/vnd.japannet-registration-wakeup":{"source":"iana"},"application/vnd.japannet-setstore-wakeup":{"source":"iana"},"application/vnd.japannet-verification":{"source":"iana"},"application/vnd.japannet-verification-wakeup":{"source":"iana"},"application/vnd.jcp.javame.midlet-rms":{"source":"iana","extensions":["rms"]},"application/vnd.jisp":{"source":"iana","extensions":["jisp"]},"application/vnd.joost.joda-archive":{"source":"iana","extensions":["joda"]},"application/vnd.jsk.isdn-ngn":{"source":"iana"},"application/vnd.kahootz":{"source":"iana","extensions":["ktz","ktr"]},"application/vnd.kde.karbon":{"source":"iana","extensions":["karbon"]},"application/vnd.kde.kchart":{"source":"iana","extensions":["chrt"]},"application/vnd.kde.kformula":{"source":"iana","extensions":["kfo"]},"application/vnd.kde.kivio":{"source":"iana","extensions":["flw"]},"application/vnd.kde.kontour":{"source":"iana","extensions":["kon"]},"application/vnd.kde.kpresenter":{"source":"iana","extensions":["kpr","kpt"]},"application/vnd.kde.kspread":{"source":"iana","extensions":["ksp"]},"application/vnd.kde.kword":{"source":"iana","extensions":["kwd","kwt"]},"application/vnd.kenameaapp":{"source":"iana","extensions":["htke"]},"application/vnd.kidspiration":{"source":"iana","extensions":["kia"]},"application/vnd.kinar":{"source":"iana","extensions":["kne","knp"]},"application/vnd.koan":{"source":"iana","extensions":["skp","skd","skt","skm"]},"application/vnd.kodak-descriptor":{"source":"iana","extensions":["sse"]},"application/vnd.las":{"source":"iana"},"application/vnd.las.las+json":{"source":"iana","compressible":true},"application/vnd.las.las+xml":{"source":"iana","compressible":true,"extensions":["lasxml"]},"application/vnd.laszip":{"source":"iana"},"application/vnd.leap+json":{"source":"iana","compressible":true},"application/vnd.liberty-request+xml":{"source":"iana","compressible":true},"application/vnd.llamagraphics.life-balance.desktop":{"source":"iana","extensions":["lbd"]},"application/vnd.llamagraphics.life-balance.exchange+xml":{"source":"iana","compressible":true,"extensions":["lbe"]},"application/vnd.logipipe.circuit+zip":{"source":"iana","compressible":false},"application/vnd.loom":{"source":"iana"},"application/vnd.lotus-1-2-3":{"source":"iana","extensions":["123"]},"application/vnd.lotus-approach":{"source":"iana","extensions":["apr"]},"application/vnd.lotus-freelance":{"source":"iana","extensions":["pre"]},"application/vnd.lotus-notes":{"source":"iana","extensions":["nsf"]},"application/vnd.lotus-organizer":{"source":"iana","extensions":["org"]},"application/vnd.lotus-screencam":{"source":"iana","extensions":["scm"]},"application/vnd.lotus-wordpro":{"source":"iana","extensions":["lwp"]},"application/vnd.macports.portpkg":{"source":"iana","extensions":["portpkg"]},"application/vnd.mapbox-vector-tile":{"source":"iana"},"application/vnd.marlin.drm.actiontoken+xml":{"source":"iana","compressible":true},"application/vnd.marlin.drm.conftoken+xml":{"source":"iana","compressible":true},"application/vnd.marlin.drm.license+xml":{"source":"iana","compressible":true},"application/vnd.marlin.drm.mdcf":{"source":"iana"},"application/vnd.mason+json":{"source":"iana","compressible":true},"application/vnd.maxmind.maxmind-db":{"source":"iana"},"application/vnd.mcd":{"source":"iana","extensions":["mcd"]},"application/vnd.medcalcdata":{"source":"iana","extensions":["mc1"]},"application/vnd.mediastation.cdkey":{"source":"iana","extensions":["cdkey"]},"application/vnd.meridian-slingshot":{"source":"iana"},"application/vnd.mfer":{"source":"iana","extensions":["mwf"]},"application/vnd.mfmp":{"source":"iana","extensions":["mfm"]},"application/vnd.micro+json":{"source":"iana","compressible":true},"application/vnd.micrografx.flo":{"source":"iana","extensions":["flo"]},"application/vnd.micrografx.igx":{"source":"iana","extensions":["igx"]},"application/vnd.microsoft.portable-executable":{"source":"iana"},"application/vnd.microsoft.windows.thumbnail-cache":{"source":"iana"},"application/vnd.miele+json":{"source":"iana","compressible":true},"application/vnd.mif":{"source":"iana","extensions":["mif"]},"application/vnd.minisoft-hp3000-save":{"source":"iana"},"application/vnd.mitsubishi.misty-guard.trustweb":{"source":"iana"},"application/vnd.mobius.daf":{"source":"iana","extensions":["daf"]},"application/vnd.mobius.dis":{"source":"iana","extensions":["dis"]},"application/vnd.mobius.mbk":{"source":"iana","extensions":["mbk"]},"application/vnd.mobius.mqy":{"source":"iana","extensions":["mqy"]},"application/vnd.mobius.msl":{"source":"iana","extensions":["msl"]},"application/vnd.mobius.plc":{"source":"iana","extensions":["plc"]},"application/vnd.mobius.txf":{"source":"iana","extensions":["txf"]},"application/vnd.mophun.application":{"source":"iana","extensions":["mpn"]},"application/vnd.mophun.certificate":{"source":"iana","extensions":["mpc"]},"application/vnd.motorola.flexsuite":{"source":"iana"},"application/vnd.motorola.flexsuite.adsi":{"source":"iana"},"application/vnd.motorola.flexsuite.fis":{"source":"iana"},"application/vnd.motorola.flexsuite.gotap":{"source":"iana"},"application/vnd.motorola.flexsuite.kmr":{"source":"iana"},"application/vnd.motorola.flexsuite.ttc":{"source":"iana"},"application/vnd.motorola.flexsuite.wem":{"source":"iana"},"application/vnd.motorola.iprm":{"source":"iana"},"application/vnd.mozilla.xul+xml":{"source":"iana","compressible":true,"extensions":["xul"]},"application/vnd.ms-3mfdocument":{"source":"iana"},"application/vnd.ms-artgalry":{"source":"iana","extensions":["cil"]},"application/vnd.ms-asf":{"source":"iana"},"application/vnd.ms-cab-compressed":{"source":"iana","extensions":["cab"]},"application/vnd.ms-color.iccprofile":{"source":"apache"},"application/vnd.ms-excel":{"source":"iana","compressible":false,"extensions":["xls","xlm","xla","xlc","xlt","xlw"]},"application/vnd.ms-excel.addin.macroenabled.12":{"source":"iana","extensions":["xlam"]},"application/vnd.ms-excel.sheet.binary.macroenabled.12":{"source":"iana","extensions":["xlsb"]},"application/vnd.ms-excel.sheet.macroenabled.12":{"source":"iana","extensions":["xlsm"]},"application/vnd.ms-excel.template.macroenabled.12":{"source":"iana","extensions":["xltm"]},"application/vnd.ms-fontobject":{"source":"iana","compressible":true,"extensions":["eot"]},"application/vnd.ms-htmlhelp":{"source":"iana","extensions":["chm"]},"application/vnd.ms-ims":{"source":"iana","extensions":["ims"]},"application/vnd.ms-lrm":{"source":"iana","extensions":["lrm"]},"application/vnd.ms-office.activex+xml":{"source":"iana","compressible":true},"application/vnd.ms-officetheme":{"source":"iana","extensions":["thmx"]},"application/vnd.ms-opentype":{"source":"apache","compressible":true},"application/vnd.ms-outlook":{"compressible":false,"extensions":["msg"]},"application/vnd.ms-package.obfuscated-opentype":{"source":"apache"},"application/vnd.ms-pki.seccat":{"source":"apache","extensions":["cat"]},"application/vnd.ms-pki.stl":{"source":"apache","extensions":["stl"]},"application/vnd.ms-playready.initiator+xml":{"source":"iana","compressible":true},"application/vnd.ms-powerpoint":{"source":"iana","compressible":false,"extensions":["ppt","pps","pot"]},"application/vnd.ms-powerpoint.addin.macroenabled.12":{"source":"iana","extensions":["ppam"]},"application/vnd.ms-powerpoint.presentation.macroenabled.12":{"source":"iana","extensions":["pptm"]},"application/vnd.ms-powerpoint.slide.macroenabled.12":{"source":"iana","extensions":["sldm"]},"application/vnd.ms-powerpoint.slideshow.macroenabled.12":{"source":"iana","extensions":["ppsm"]},"application/vnd.ms-powerpoint.template.macroenabled.12":{"source":"iana","extensions":["potm"]},"application/vnd.ms-printdevicecapabilities+xml":{"source":"iana","compressible":true},"application/vnd.ms-printing.printticket+xml":{"source":"apache","compressible":true},"application/vnd.ms-printschematicket+xml":{"source":"iana","compressible":true},"application/vnd.ms-project":{"source":"iana","extensions":["mpp","mpt"]},"application/vnd.ms-tnef":{"source":"iana"},"application/vnd.ms-windows.devicepairing":{"source":"iana"},"application/vnd.ms-windows.nwprinting.oob":{"source":"iana"},"application/vnd.ms-windows.printerpairing":{"source":"iana"},"application/vnd.ms-windows.wsd.oob":{"source":"iana"},"application/vnd.ms-wmdrm.lic-chlg-req":{"source":"iana"},"application/vnd.ms-wmdrm.lic-resp":{"source":"iana"},"application/vnd.ms-wmdrm.meter-chlg-req":{"source":"iana"},"application/vnd.ms-wmdrm.meter-resp":{"source":"iana"},"application/vnd.ms-word.document.macroenabled.12":{"source":"iana","extensions":["docm"]},"application/vnd.ms-word.template.macroenabled.12":{"source":"iana","extensions":["dotm"]},"application/vnd.ms-works":{"source":"iana","extensions":["wps","wks","wcm","wdb"]},"application/vnd.ms-wpl":{"source":"iana","extensions":["wpl"]},"application/vnd.ms-xpsdocument":{"source":"iana","compressible":false,"extensions":["xps"]},"application/vnd.msa-disk-image":{"source":"iana"},"application/vnd.mseq":{"source":"iana","extensions":["mseq"]},"application/vnd.msign":{"source":"iana"},"application/vnd.multiad.creator":{"source":"iana"},"application/vnd.multiad.creator.cif":{"source":"iana"},"application/vnd.music-niff":{"source":"iana"},"application/vnd.musician":{"source":"iana","extensions":["mus"]},"application/vnd.muvee.style":{"source":"iana","extensions":["msty"]},"application/vnd.mynfc":{"source":"iana","extensions":["taglet"]},"application/vnd.ncd.control":{"source":"iana"},"application/vnd.ncd.reference":{"source":"iana"},"application/vnd.nearst.inv+json":{"source":"iana","compressible":true},"application/vnd.nebumind.line":{"source":"iana"},"application/vnd.nervana":{"source":"iana"},"application/vnd.netfpx":{"source":"iana"},"application/vnd.neurolanguage.nlu":{"source":"iana","extensions":["nlu"]},"application/vnd.nimn":{"source":"iana"},"application/vnd.nintendo.nitro.rom":{"source":"iana"},"application/vnd.nintendo.snes.rom":{"source":"iana"},"application/vnd.nitf":{"source":"iana","extensions":["ntf","nitf"]},"application/vnd.noblenet-directory":{"source":"iana","extensions":["nnd"]},"application/vnd.noblenet-sealer":{"source":"iana","extensions":["nns"]},"application/vnd.noblenet-web":{"source":"iana","extensions":["nnw"]},"application/vnd.nokia.catalogs":{"source":"iana"},"application/vnd.nokia.conml+wbxml":{"source":"iana"},"application/vnd.nokia.conml+xml":{"source":"iana","compressible":true},"application/vnd.nokia.iptv.config+xml":{"source":"iana","compressible":true},"application/vnd.nokia.isds-radio-presets":{"source":"iana"},"application/vnd.nokia.landmark+wbxml":{"source":"iana"},"application/vnd.nokia.landmark+xml":{"source":"iana","compressible":true},"application/vnd.nokia.landmarkcollection+xml":{"source":"iana","compressible":true},"application/vnd.nokia.n-gage.ac+xml":{"source":"iana","compressible":true,"extensions":["ac"]},"application/vnd.nokia.n-gage.data":{"source":"iana","extensions":["ngdat"]},"application/vnd.nokia.n-gage.symbian.install":{"source":"iana","extensions":["n-gage"]},"application/vnd.nokia.ncd":{"source":"iana"},"application/vnd.nokia.pcd+wbxml":{"source":"iana"},"application/vnd.nokia.pcd+xml":{"source":"iana","compressible":true},"application/vnd.nokia.radio-preset":{"source":"iana","extensions":["rpst"]},"application/vnd.nokia.radio-presets":{"source":"iana","extensions":["rpss"]},"application/vnd.novadigm.edm":{"source":"iana","extensions":["edm"]},"application/vnd.novadigm.edx":{"source":"iana","extensions":["edx"]},"application/vnd.novadigm.ext":{"source":"iana","extensions":["ext"]},"application/vnd.ntt-local.content-share":{"source":"iana"},"application/vnd.ntt-local.file-transfer":{"source":"iana"},"application/vnd.ntt-local.ogw_remote-access":{"source":"iana"},"application/vnd.ntt-local.sip-ta_remote":{"source":"iana"},"application/vnd.ntt-local.sip-ta_tcp_stream":{"source":"iana"},"application/vnd.oasis.opendocument.chart":{"source":"iana","extensions":["odc"]},"application/vnd.oasis.opendocument.chart-template":{"source":"iana","extensions":["otc"]},"application/vnd.oasis.opendocument.database":{"source":"iana","extensions":["odb"]},"application/vnd.oasis.opendocument.formula":{"source":"iana","extensions":["odf"]},"application/vnd.oasis.opendocument.formula-template":{"source":"iana","extensions":["odft"]},"application/vnd.oasis.opendocument.graphics":{"source":"iana","compressible":false,"extensions":["odg"]},"application/vnd.oasis.opendocument.graphics-template":{"source":"iana","extensions":["otg"]},"application/vnd.oasis.opendocument.image":{"source":"iana","extensions":["odi"]},"application/vnd.oasis.opendocument.image-template":{"source":"iana","extensions":["oti"]},"application/vnd.oasis.opendocument.presentation":{"source":"iana","compressible":false,"extensions":["odp"]},"application/vnd.oasis.opendocument.presentation-template":{"source":"iana","extensions":["otp"]},"application/vnd.oasis.opendocument.spreadsheet":{"source":"iana","compressible":false,"extensions":["ods"]},"application/vnd.oasis.opendocument.spreadsheet-template":{"source":"iana","extensions":["ots"]},"application/vnd.oasis.opendocument.text":{"source":"iana","compressible":false,"extensions":["odt"]},"application/vnd.oasis.opendocument.text-master":{"source":"iana","extensions":["odm"]},"application/vnd.oasis.opendocument.text-template":{"source":"iana","extensions":["ott"]},"application/vnd.oasis.opendocument.text-web":{"source":"iana","extensions":["oth"]},"application/vnd.obn":{"source":"iana"},"application/vnd.ocf+cbor":{"source":"iana"},"application/vnd.oci.image.manifest.v1+json":{"source":"iana","compressible":true},"application/vnd.oftn.l10n+json":{"source":"iana","compressible":true},"application/vnd.oipf.contentaccessdownload+xml":{"source":"iana","compressible":true},"application/vnd.oipf.contentaccessstreaming+xml":{"source":"iana","compressible":true},"application/vnd.oipf.cspg-hexbinary":{"source":"iana"},"application/vnd.oipf.dae.svg+xml":{"source":"iana","compressible":true},"application/vnd.oipf.dae.xhtml+xml":{"source":"iana","compressible":true},"application/vnd.oipf.mippvcontrolmessage+xml":{"source":"iana","compressible":true},"application/vnd.oipf.pae.gem":{"source":"iana"},"application/vnd.oipf.spdiscovery+xml":{"source":"iana","compressible":true},"application/vnd.oipf.spdlist+xml":{"source":"iana","compressible":true},"application/vnd.oipf.ueprofile+xml":{"source":"iana","compressible":true},"application/vnd.oipf.userprofile+xml":{"source":"iana","compressible":true},"application/vnd.olpc-sugar":{"source":"iana","extensions":["xo"]},"application/vnd.oma-scws-config":{"source":"iana"},"application/vnd.oma-scws-http-request":{"source":"iana"},"application/vnd.oma-scws-http-response":{"source":"iana"},"application/vnd.oma.bcast.associated-procedure-parameter+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.drm-trigger+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.imd+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.ltkm":{"source":"iana"},"application/vnd.oma.bcast.notification+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.provisioningtrigger":{"source":"iana"},"application/vnd.oma.bcast.sgboot":{"source":"iana"},"application/vnd.oma.bcast.sgdd+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.sgdu":{"source":"iana"},"application/vnd.oma.bcast.simple-symbol-container":{"source":"iana"},"application/vnd.oma.bcast.smartcard-trigger+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.sprov+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.stkm":{"source":"iana"},"application/vnd.oma.cab-address-book+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-feature-handler+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-pcc+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-subs-invite+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-user-prefs+xml":{"source":"iana","compressible":true},"application/vnd.oma.dcd":{"source":"iana"},"application/vnd.oma.dcdc":{"source":"iana"},"application/vnd.oma.dd2+xml":{"source":"iana","compressible":true,"extensions":["dd2"]},"application/vnd.oma.drm.risd+xml":{"source":"iana","compressible":true},"application/vnd.oma.group-usage-list+xml":{"source":"iana","compressible":true},"application/vnd.oma.lwm2m+cbor":{"source":"iana"},"application/vnd.oma.lwm2m+json":{"source":"iana","compressible":true},"application/vnd.oma.lwm2m+tlv":{"source":"iana"},"application/vnd.oma.pal+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.detailed-progress-report+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.final-report+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.groups+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.invocation-descriptor+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.optimized-progress-report+xml":{"source":"iana","compressible":true},"application/vnd.oma.push":{"source":"iana"},"application/vnd.oma.scidm.messages+xml":{"source":"iana","compressible":true},"application/vnd.oma.xcap-directory+xml":{"source":"iana","compressible":true},"application/vnd.omads-email+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.omads-file+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.omads-folder+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.omaloc-supl-init":{"source":"iana"},"application/vnd.onepager":{"source":"iana"},"application/vnd.onepagertamp":{"source":"iana"},"application/vnd.onepagertamx":{"source":"iana"},"application/vnd.onepagertat":{"source":"iana"},"application/vnd.onepagertatp":{"source":"iana"},"application/vnd.onepagertatx":{"source":"iana"},"application/vnd.openblox.game+xml":{"source":"iana","compressible":true,"extensions":["obgx"]},"application/vnd.openblox.game-binary":{"source":"iana"},"application/vnd.openeye.oeb":{"source":"iana"},"application/vnd.openofficeorg.extension":{"source":"apache","extensions":["oxt"]},"application/vnd.openstreetmap.data+xml":{"source":"iana","compressible":true,"extensions":["osm"]},"application/vnd.openxmlformats-officedocument.custom-properties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.customxmlproperties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawing+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.chart+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.extended-properties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.comments+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.presentation":{"source":"iana","compressible":false,"extensions":["pptx"]},"application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.presprops+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slide":{"source":"iana","extensions":["sldx"]},"application/vnd.openxmlformats-officedocument.presentationml.slide+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slideshow":{"source":"iana","extensions":["ppsx"]},"application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.tags+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.template":{"source":"iana","extensions":["potx"]},"application/vnd.openxmlformats-officedocument.presentationml.template.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":{"source":"iana","compressible":false,"extensions":["xlsx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.template":{"source":"iana","extensions":["xltx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.theme+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.themeoverride+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.vmldrawing":{"source":"iana"},"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.document":{"source":"iana","compressible":false,"extensions":["docx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.template":{"source":"iana","extensions":["dotx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-package.core-properties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-package.relationships+xml":{"source":"iana","compressible":true},"application/vnd.oracle.resource+json":{"source":"iana","compressible":true},"application/vnd.orange.indata":{"source":"iana"},"application/vnd.osa.netdeploy":{"source":"iana"},"application/vnd.osgeo.mapguide.package":{"source":"iana","extensions":["mgp"]},"application/vnd.osgi.bundle":{"source":"iana"},"application/vnd.osgi.dp":{"source":"iana","extensions":["dp"]},"application/vnd.osgi.subsystem":{"source":"iana","extensions":["esa"]},"application/vnd.otps.ct-kip+xml":{"source":"iana","compressible":true},"application/vnd.oxli.countgraph":{"source":"iana"},"application/vnd.pagerduty+json":{"source":"iana","compressible":true},"application/vnd.palm":{"source":"iana","extensions":["pdb","pqa","oprc"]},"application/vnd.panoply":{"source":"iana"},"application/vnd.paos.xml":{"source":"iana"},"application/vnd.patentdive":{"source":"iana"},"application/vnd.patientecommsdoc":{"source":"iana"},"application/vnd.pawaafile":{"source":"iana","extensions":["paw"]},"application/vnd.pcos":{"source":"iana"},"application/vnd.pg.format":{"source":"iana","extensions":["str"]},"application/vnd.pg.osasli":{"source":"iana","extensions":["ei6"]},"application/vnd.piaccess.application-licence":{"source":"iana"},"application/vnd.picsel":{"source":"iana","extensions":["efif"]},"application/vnd.pmi.widget":{"source":"iana","extensions":["wg"]},"application/vnd.poc.group-advertisement+xml":{"source":"iana","compressible":true},"application/vnd.pocketlearn":{"source":"iana","extensions":["plf"]},"application/vnd.powerbuilder6":{"source":"iana","extensions":["pbd"]},"application/vnd.powerbuilder6-s":{"source":"iana"},"application/vnd.powerbuilder7":{"source":"iana"},"application/vnd.powerbuilder7-s":{"source":"iana"},"application/vnd.powerbuilder75":{"source":"iana"},"application/vnd.powerbuilder75-s":{"source":"iana"},"application/vnd.preminet":{"source":"iana"},"application/vnd.previewsystems.box":{"source":"iana","extensions":["box"]},"application/vnd.proteus.magazine":{"source":"iana","extensions":["mgz"]},"application/vnd.psfs":{"source":"iana"},"application/vnd.publishare-delta-tree":{"source":"iana","extensions":["qps"]},"application/vnd.pvi.ptid1":{"source":"iana","extensions":["ptid"]},"application/vnd.pwg-multiplexed":{"source":"iana"},"application/vnd.pwg-xhtml-print+xml":{"source":"iana","compressible":true},"application/vnd.qualcomm.brew-app-res":{"source":"iana"},"application/vnd.quarantainenet":{"source":"iana"},"application/vnd.quark.quarkxpress":{"source":"iana","extensions":["qxd","qxt","qwd","qwt","qxl","qxb"]},"application/vnd.quobject-quoxdocument":{"source":"iana"},"application/vnd.radisys.moml+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-conf+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-conn+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-dialog+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-stream+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-conf+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-base+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-fax-detect+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-fax-sendrecv+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-group+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-speech+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-transform+xml":{"source":"iana","compressible":true},"application/vnd.rainstor.data":{"source":"iana"},"application/vnd.rapid":{"source":"iana"},"application/vnd.rar":{"source":"iana","extensions":["rar"]},"application/vnd.realvnc.bed":{"source":"iana","extensions":["bed"]},"application/vnd.recordare.musicxml":{"source":"iana","extensions":["mxl"]},"application/vnd.recordare.musicxml+xml":{"source":"iana","compressible":true,"extensions":["musicxml"]},"application/vnd.renlearn.rlprint":{"source":"iana"},"application/vnd.restful+json":{"source":"iana","compressible":true},"application/vnd.rig.cryptonote":{"source":"iana","extensions":["cryptonote"]},"application/vnd.rim.cod":{"source":"apache","extensions":["cod"]},"application/vnd.rn-realmedia":{"source":"apache","extensions":["rm"]},"application/vnd.rn-realmedia-vbr":{"source":"apache","extensions":["rmvb"]},"application/vnd.route66.link66+xml":{"source":"iana","compressible":true,"extensions":["link66"]},"application/vnd.rs-274x":{"source":"iana"},"application/vnd.ruckus.download":{"source":"iana"},"application/vnd.s3sms":{"source":"iana"},"application/vnd.sailingtracker.track":{"source":"iana","extensions":["st"]},"application/vnd.sar":{"source":"iana"},"application/vnd.sbm.cid":{"source":"iana"},"application/vnd.sbm.mid2":{"source":"iana"},"application/vnd.scribus":{"source":"iana"},"application/vnd.sealed.3df":{"source":"iana"},"application/vnd.sealed.csf":{"source":"iana"},"application/vnd.sealed.doc":{"source":"iana"},"application/vnd.sealed.eml":{"source":"iana"},"application/vnd.sealed.mht":{"source":"iana"},"application/vnd.sealed.net":{"source":"iana"},"application/vnd.sealed.ppt":{"source":"iana"},"application/vnd.sealed.tiff":{"source":"iana"},"application/vnd.sealed.xls":{"source":"iana"},"application/vnd.sealedmedia.softseal.html":{"source":"iana"},"application/vnd.sealedmedia.softseal.pdf":{"source":"iana"},"application/vnd.seemail":{"source":"iana","extensions":["see"]},"application/vnd.seis+json":{"source":"iana","compressible":true},"application/vnd.sema":{"source":"iana","extensions":["sema"]},"application/vnd.semd":{"source":"iana","extensions":["semd"]},"application/vnd.semf":{"source":"iana","extensions":["semf"]},"application/vnd.shade-save-file":{"source":"iana"},"application/vnd.shana.informed.formdata":{"source":"iana","extensions":["ifm"]},"application/vnd.shana.informed.formtemplate":{"source":"iana","extensions":["itp"]},"application/vnd.shana.informed.interchange":{"source":"iana","extensions":["iif"]},"application/vnd.shana.informed.package":{"source":"iana","extensions":["ipk"]},"application/vnd.shootproof+json":{"source":"iana","compressible":true},"application/vnd.shopkick+json":{"source":"iana","compressible":true},"application/vnd.shp":{"source":"iana"},"application/vnd.shx":{"source":"iana"},"application/vnd.sigrok.session":{"source":"iana"},"application/vnd.simtech-mindmapper":{"source":"iana","extensions":["twd","twds"]},"application/vnd.siren+json":{"source":"iana","compressible":true},"application/vnd.smaf":{"source":"iana","extensions":["mmf"]},"application/vnd.smart.notebook":{"source":"iana"},"application/vnd.smart.teacher":{"source":"iana","extensions":["teacher"]},"application/vnd.snesdev-page-table":{"source":"iana"},"application/vnd.software602.filler.form+xml":{"source":"iana","compressible":true,"extensions":["fo"]},"application/vnd.software602.filler.form-xml-zip":{"source":"iana"},"application/vnd.solent.sdkm+xml":{"source":"iana","compressible":true,"extensions":["sdkm","sdkd"]},"application/vnd.spotfire.dxp":{"source":"iana","extensions":["dxp"]},"application/vnd.spotfire.sfs":{"source":"iana","extensions":["sfs"]},"application/vnd.sqlite3":{"source":"iana"},"application/vnd.sss-cod":{"source":"iana"},"application/vnd.sss-dtf":{"source":"iana"},"application/vnd.sss-ntf":{"source":"iana"},"application/vnd.stardivision.calc":{"source":"apache","extensions":["sdc"]},"application/vnd.stardivision.draw":{"source":"apache","extensions":["sda"]},"application/vnd.stardivision.impress":{"source":"apache","extensions":["sdd"]},"application/vnd.stardivision.math":{"source":"apache","extensions":["smf"]},"application/vnd.stardivision.writer":{"source":"apache","extensions":["sdw","vor"]},"application/vnd.stardivision.writer-global":{"source":"apache","extensions":["sgl"]},"application/vnd.stepmania.package":{"source":"iana","extensions":["smzip"]},"application/vnd.stepmania.stepchart":{"source":"iana","extensions":["sm"]},"application/vnd.street-stream":{"source":"iana"},"application/vnd.sun.wadl+xml":{"source":"iana","compressible":true,"extensions":["wadl"]},"application/vnd.sun.xml.calc":{"source":"apache","extensions":["sxc"]},"application/vnd.sun.xml.calc.template":{"source":"apache","extensions":["stc"]},"application/vnd.sun.xml.draw":{"source":"apache","extensions":["sxd"]},"application/vnd.sun.xml.draw.template":{"source":"apache","extensions":["std"]},"application/vnd.sun.xml.impress":{"source":"apache","extensions":["sxi"]},"application/vnd.sun.xml.impress.template":{"source":"apache","extensions":["sti"]},"application/vnd.sun.xml.math":{"source":"apache","extensions":["sxm"]},"application/vnd.sun.xml.writer":{"source":"apache","extensions":["sxw"]},"application/vnd.sun.xml.writer.global":{"source":"apache","extensions":["sxg"]},"application/vnd.sun.xml.writer.template":{"source":"apache","extensions":["stw"]},"application/vnd.sus-calendar":{"source":"iana","extensions":["sus","susp"]},"application/vnd.svd":{"source":"iana","extensions":["svd"]},"application/vnd.swiftview-ics":{"source":"iana"},"application/vnd.sycle+xml":{"source":"iana","compressible":true},"application/vnd.symbian.install":{"source":"apache","extensions":["sis","sisx"]},"application/vnd.syncml+xml":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["xsm"]},"application/vnd.syncml.dm+wbxml":{"source":"iana","charset":"UTF-8","extensions":["bdm"]},"application/vnd.syncml.dm+xml":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["xdm"]},"application/vnd.syncml.dm.notification":{"source":"iana"},"application/vnd.syncml.dmddf+wbxml":{"source":"iana"},"application/vnd.syncml.dmddf+xml":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["ddf"]},"application/vnd.syncml.dmtnds+wbxml":{"source":"iana"},"application/vnd.syncml.dmtnds+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.syncml.ds.notification":{"source":"iana"},"application/vnd.tableschema+json":{"source":"iana","compressible":true},"application/vnd.tao.intent-module-archive":{"source":"iana","extensions":["tao"]},"application/vnd.tcpdump.pcap":{"source":"iana","extensions":["pcap","cap","dmp"]},"application/vnd.think-cell.ppttc+json":{"source":"iana","compressible":true},"application/vnd.tmd.mediaflex.api+xml":{"source":"iana","compressible":true},"application/vnd.tml":{"source":"iana"},"application/vnd.tmobile-livetv":{"source":"iana","extensions":["tmo"]},"application/vnd.tri.onesource":{"source":"iana"},"application/vnd.trid.tpt":{"source":"iana","extensions":["tpt"]},"application/vnd.triscape.mxs":{"source":"iana","extensions":["mxs"]},"application/vnd.trueapp":{"source":"iana","extensions":["tra"]},"application/vnd.truedoc":{"source":"iana"},"application/vnd.ubisoft.webplayer":{"source":"iana"},"application/vnd.ufdl":{"source":"iana","extensions":["ufd","ufdl"]},"application/vnd.uiq.theme":{"source":"iana","extensions":["utz"]},"application/vnd.umajin":{"source":"iana","extensions":["umj"]},"application/vnd.unity":{"source":"iana","extensions":["unityweb"]},"application/vnd.uoml+xml":{"source":"iana","compressible":true,"extensions":["uoml"]},"application/vnd.uplanet.alert":{"source":"iana"},"application/vnd.uplanet.alert-wbxml":{"source":"iana"},"application/vnd.uplanet.bearer-choice":{"source":"iana"},"application/vnd.uplanet.bearer-choice-wbxml":{"source":"iana"},"application/vnd.uplanet.cacheop":{"source":"iana"},"application/vnd.uplanet.cacheop-wbxml":{"source":"iana"},"application/vnd.uplanet.channel":{"source":"iana"},"application/vnd.uplanet.channel-wbxml":{"source":"iana"},"application/vnd.uplanet.list":{"source":"iana"},"application/vnd.uplanet.list-wbxml":{"source":"iana"},"application/vnd.uplanet.listcmd":{"source":"iana"},"application/vnd.uplanet.listcmd-wbxml":{"source":"iana"},"application/vnd.uplanet.signal":{"source":"iana"},"application/vnd.uri-map":{"source":"iana"},"application/vnd.valve.source.material":{"source":"iana"},"application/vnd.vcx":{"source":"iana","extensions":["vcx"]},"application/vnd.vd-study":{"source":"iana"},"application/vnd.vectorworks":{"source":"iana"},"application/vnd.vel+json":{"source":"iana","compressible":true},"application/vnd.verimatrix.vcas":{"source":"iana"},"application/vnd.veryant.thin":{"source":"iana"},"application/vnd.ves.encrypted":{"source":"iana"},"application/vnd.vidsoft.vidconference":{"source":"iana"},"application/vnd.visio":{"source":"iana","extensions":["vsd","vst","vss","vsw"]},"application/vnd.visionary":{"source":"iana","extensions":["vis"]},"application/vnd.vividence.scriptfile":{"source":"iana"},"application/vnd.vsf":{"source":"iana","extensions":["vsf"]},"application/vnd.wap.sic":{"source":"iana"},"application/vnd.wap.slc":{"source":"iana"},"application/vnd.wap.wbxml":{"source":"iana","charset":"UTF-8","extensions":["wbxml"]},"application/vnd.wap.wmlc":{"source":"iana","extensions":["wmlc"]},"application/vnd.wap.wmlscriptc":{"source":"iana","extensions":["wmlsc"]},"application/vnd.webturbo":{"source":"iana","extensions":["wtb"]},"application/vnd.wfa.dpp":{"source":"iana"},"application/vnd.wfa.p2p":{"source":"iana"},"application/vnd.wfa.wsc":{"source":"iana"},"application/vnd.windows.devicepairing":{"source":"iana"},"application/vnd.wmc":{"source":"iana"},"application/vnd.wmf.bootstrap":{"source":"iana"},"application/vnd.wolfram.mathematica":{"source":"iana"},"application/vnd.wolfram.mathematica.package":{"source":"iana"},"application/vnd.wolfram.player":{"source":"iana","extensions":["nbp"]},"application/vnd.wordperfect":{"source":"iana","extensions":["wpd"]},"application/vnd.wqd":{"source":"iana","extensions":["wqd"]},"application/vnd.wrq-hp3000-labelled":{"source":"iana"},"application/vnd.wt.stf":{"source":"iana","extensions":["stf"]},"application/vnd.wv.csp+wbxml":{"source":"iana"},"application/vnd.wv.csp+xml":{"source":"iana","compressible":true},"application/vnd.wv.ssp+xml":{"source":"iana","compressible":true},"application/vnd.xacml+json":{"source":"iana","compressible":true},"application/vnd.xara":{"source":"iana","extensions":["xar"]},"application/vnd.xfdl":{"source":"iana","extensions":["xfdl"]},"application/vnd.xfdl.webform":{"source":"iana"},"application/vnd.xmi+xml":{"source":"iana","compressible":true},"application/vnd.xmpie.cpkg":{"source":"iana"},"application/vnd.xmpie.dpkg":{"source":"iana"},"application/vnd.xmpie.plan":{"source":"iana"},"application/vnd.xmpie.ppkg":{"source":"iana"},"application/vnd.xmpie.xlim":{"source":"iana"},"application/vnd.yamaha.hv-dic":{"source":"iana","extensions":["hvd"]},"application/vnd.yamaha.hv-script":{"source":"iana","extensions":["hvs"]},"application/vnd.yamaha.hv-voice":{"source":"iana","extensions":["hvp"]},"application/vnd.yamaha.openscoreformat":{"source":"iana","extensions":["osf"]},"application/vnd.yamaha.openscoreformat.osfpvg+xml":{"source":"iana","compressible":true,"extensions":["osfpvg"]},"application/vnd.yamaha.remote-setup":{"source":"iana"},"application/vnd.yamaha.smaf-audio":{"source":"iana","extensions":["saf"]},"application/vnd.yamaha.smaf-phrase":{"source":"iana","extensions":["spf"]},"application/vnd.yamaha.through-ngn":{"source":"iana"},"application/vnd.yamaha.tunnel-udpencap":{"source":"iana"},"application/vnd.yaoweme":{"source":"iana"},"application/vnd.yellowriver-custom-menu":{"source":"iana","extensions":["cmp"]},"application/vnd.youtube.yt":{"source":"iana"},"application/vnd.zul":{"source":"iana","extensions":["zir","zirz"]},"application/vnd.zzazz.deck+xml":{"source":"iana","compressible":true,"extensions":["zaz"]},"application/voicexml+xml":{"source":"iana","compressible":true,"extensions":["vxml"]},"application/voucher-cms+json":{"source":"iana","compressible":true},"application/vq-rtcpxr":{"source":"iana"},"application/wasm":{"compressible":true,"extensions":["wasm"]},"application/watcherinfo+xml":{"source":"iana","compressible":true},"application/webpush-options+json":{"source":"iana","compressible":true},"application/whoispp-query":{"source":"iana"},"application/whoispp-response":{"source":"iana"},"application/widget":{"source":"iana","extensions":["wgt"]},"application/winhlp":{"source":"apache","extensions":["hlp"]},"application/wita":{"source":"iana"},"application/wordperfect5.1":{"source":"iana"},"application/wsdl+xml":{"source":"iana","compressible":true,"extensions":["wsdl"]},"application/wspolicy+xml":{"source":"iana","compressible":true,"extensions":["wspolicy"]},"application/x-7z-compressed":{"source":"apache","compressible":false,"extensions":["7z"]},"application/x-abiword":{"source":"apache","extensions":["abw"]},"application/x-ace-compressed":{"source":"apache","extensions":["ace"]},"application/x-amf":{"source":"apache"},"application/x-apple-diskimage":{"source":"apache","extensions":["dmg"]},"application/x-arj":{"compressible":false,"extensions":["arj"]},"application/x-authorware-bin":{"source":"apache","extensions":["aab","x32","u32","vox"]},"application/x-authorware-map":{"source":"apache","extensions":["aam"]},"application/x-authorware-seg":{"source":"apache","extensions":["aas"]},"application/x-bcpio":{"source":"apache","extensions":["bcpio"]},"application/x-bdoc":{"compressible":false,"extensions":["bdoc"]},"application/x-bittorrent":{"source":"apache","extensions":["torrent"]},"application/x-blorb":{"source":"apache","extensions":["blb","blorb"]},"application/x-bzip":{"source":"apache","compressible":false,"extensions":["bz"]},"application/x-bzip2":{"source":"apache","compressible":false,"extensions":["bz2","boz"]},"application/x-cbr":{"source":"apache","extensions":["cbr","cba","cbt","cbz","cb7"]},"application/x-cdlink":{"source":"apache","extensions":["vcd"]},"application/x-cfs-compressed":{"source":"apache","extensions":["cfs"]},"application/x-chat":{"source":"apache","extensions":["chat"]},"application/x-chess-pgn":{"source":"apache","extensions":["pgn"]},"application/x-chrome-extension":{"extensions":["crx"]},"application/x-cocoa":{"source":"nginx","extensions":["cco"]},"application/x-compress":{"source":"apache"},"application/x-conference":{"source":"apache","extensions":["nsc"]},"application/x-cpio":{"source":"apache","extensions":["cpio"]},"application/x-csh":{"source":"apache","extensions":["csh"]},"application/x-deb":{"compressible":false},"application/x-debian-package":{"source":"apache","extensions":["deb","udeb"]},"application/x-dgc-compressed":{"source":"apache","extensions":["dgc"]},"application/x-director":{"source":"apache","extensions":["dir","dcr","dxr","cst","cct","cxt","w3d","fgd","swa"]},"application/x-doom":{"source":"apache","extensions":["wad"]},"application/x-dtbncx+xml":{"source":"apache","compressible":true,"extensions":["ncx"]},"application/x-dtbook+xml":{"source":"apache","compressible":true,"extensions":["dtb"]},"application/x-dtbresource+xml":{"source":"apache","compressible":true,"extensions":["res"]},"application/x-dvi":{"source":"apache","compressible":false,"extensions":["dvi"]},"application/x-envoy":{"source":"apache","extensions":["evy"]},"application/x-eva":{"source":"apache","extensions":["eva"]},"application/x-font-bdf":{"source":"apache","extensions":["bdf"]},"application/x-font-dos":{"source":"apache"},"application/x-font-framemaker":{"source":"apache"},"application/x-font-ghostscript":{"source":"apache","extensions":["gsf"]},"application/x-font-libgrx":{"source":"apache"},"application/x-font-linux-psf":{"source":"apache","extensions":["psf"]},"application/x-font-pcf":{"source":"apache","extensions":["pcf"]},"application/x-font-snf":{"source":"apache","extensions":["snf"]},"application/x-font-speedo":{"source":"apache"},"application/x-font-sunos-news":{"source":"apache"},"application/x-font-type1":{"source":"apache","extensions":["pfa","pfb","pfm","afm"]},"application/x-font-vfont":{"source":"apache"},"application/x-freearc":{"source":"apache","extensions":["arc"]},"application/x-futuresplash":{"source":"apache","extensions":["spl"]},"application/x-gca-compressed":{"source":"apache","extensions":["gca"]},"application/x-glulx":{"source":"apache","extensions":["ulx"]},"application/x-gnumeric":{"source":"apache","extensions":["gnumeric"]},"application/x-gramps-xml":{"source":"apache","extensions":["gramps"]},"application/x-gtar":{"source":"apache","extensions":["gtar"]},"application/x-gzip":{"source":"apache"},"application/x-hdf":{"source":"apache","extensions":["hdf"]},"application/x-httpd-php":{"compressible":true,"extensions":["php"]},"application/x-install-instructions":{"source":"apache","extensions":["install"]},"application/x-iso9660-image":{"source":"apache","extensions":["iso"]},"application/x-java-archive-diff":{"source":"nginx","extensions":["jardiff"]},"application/x-java-jnlp-file":{"source":"apache","compressible":false,"extensions":["jnlp"]},"application/x-javascript":{"compressible":true},"application/x-keepass2":{"extensions":["kdbx"]},"application/x-latex":{"source":"apache","compressible":false,"extensions":["latex"]},"application/x-lua-bytecode":{"extensions":["luac"]},"application/x-lzh-compressed":{"source":"apache","extensions":["lzh","lha"]},"application/x-makeself":{"source":"nginx","extensions":["run"]},"application/x-mie":{"source":"apache","extensions":["mie"]},"application/x-mobipocket-ebook":{"source":"apache","extensions":["prc","mobi"]},"application/x-mpegurl":{"compressible":false},"application/x-ms-application":{"source":"apache","extensions":["application"]},"application/x-ms-shortcut":{"source":"apache","extensions":["lnk"]},"application/x-ms-wmd":{"source":"apache","extensions":["wmd"]},"application/x-ms-wmz":{"source":"apache","extensions":["wmz"]},"application/x-ms-xbap":{"source":"apache","extensions":["xbap"]},"application/x-msaccess":{"source":"apache","extensions":["mdb"]},"application/x-msbinder":{"source":"apache","extensions":["obd"]},"application/x-mscardfile":{"source":"apache","extensions":["crd"]},"application/x-msclip":{"source":"apache","extensions":["clp"]},"application/x-msdos-program":{"extensions":["exe"]},"application/x-msdownload":{"source":"apache","extensions":["exe","dll","com","bat","msi"]},"application/x-msmediaview":{"source":"apache","extensions":["mvb","m13","m14"]},"application/x-msmetafile":{"source":"apache","extensions":["wmf","wmz","emf","emz"]},"application/x-msmoney":{"source":"apache","extensions":["mny"]},"application/x-mspublisher":{"source":"apache","extensions":["pub"]},"application/x-msschedule":{"source":"apache","extensions":["scd"]},"application/x-msterminal":{"source":"apache","extensions":["trm"]},"application/x-mswrite":{"source":"apache","extensions":["wri"]},"application/x-netcdf":{"source":"apache","extensions":["nc","cdf"]},"application/x-ns-proxy-autoconfig":{"compressible":true,"extensions":["pac"]},"application/x-nzb":{"source":"apache","extensions":["nzb"]},"application/x-perl":{"source":"nginx","extensions":["pl","pm"]},"application/x-pilot":{"source":"nginx","extensions":["prc","pdb"]},"application/x-pkcs12":{"source":"apache","compressible":false,"extensions":["p12","pfx"]},"application/x-pkcs7-certificates":{"source":"apache","extensions":["p7b","spc"]},"application/x-pkcs7-certreqresp":{"source":"apache","extensions":["p7r"]},"application/x-pki-message":{"source":"iana"},"application/x-rar-compressed":{"source":"apache","compressible":false,"extensions":["rar"]},"application/x-redhat-package-manager":{"source":"nginx","extensions":["rpm"]},"application/x-research-info-systems":{"source":"apache","extensions":["ris"]},"application/x-sea":{"source":"nginx","extensions":["sea"]},"application/x-sh":{"source":"apache","compressible":true,"extensions":["sh"]},"application/x-shar":{"source":"apache","extensions":["shar"]},"application/x-shockwave-flash":{"source":"apache","compressible":false,"extensions":["swf"]},"application/x-silverlight-app":{"source":"apache","extensions":["xap"]},"application/x-sql":{"source":"apache","extensions":["sql"]},"application/x-stuffit":{"source":"apache","compressible":false,"extensions":["sit"]},"application/x-stuffitx":{"source":"apache","extensions":["sitx"]},"application/x-subrip":{"source":"apache","extensions":["srt"]},"application/x-sv4cpio":{"source":"apache","extensions":["sv4cpio"]},"application/x-sv4crc":{"source":"apache","extensions":["sv4crc"]},"application/x-t3vm-image":{"source":"apache","extensions":["t3"]},"application/x-tads":{"source":"apache","extensions":["gam"]},"application/x-tar":{"source":"apache","compressible":true,"extensions":["tar"]},"application/x-tcl":{"source":"apache","extensions":["tcl","tk"]},"application/x-tex":{"source":"apache","extensions":["tex"]},"application/x-tex-tfm":{"source":"apache","extensions":["tfm"]},"application/x-texinfo":{"source":"apache","extensions":["texinfo","texi"]},"application/x-tgif":{"source":"apache","extensions":["obj"]},"application/x-ustar":{"source":"apache","extensions":["ustar"]},"application/x-virtualbox-hdd":{"compressible":true,"extensions":["hdd"]},"application/x-virtualbox-ova":{"compressible":true,"extensions":["ova"]},"application/x-virtualbox-ovf":{"compressible":true,"extensions":["ovf"]},"application/x-virtualbox-vbox":{"compressible":true,"extensions":["vbox"]},"application/x-virtualbox-vbox-extpack":{"compressible":false,"extensions":["vbox-extpack"]},"application/x-virtualbox-vdi":{"compressible":true,"extensions":["vdi"]},"application/x-virtualbox-vhd":{"compressible":true,"extensions":["vhd"]},"application/x-virtualbox-vmdk":{"compressible":true,"extensions":["vmdk"]},"application/x-wais-source":{"source":"apache","extensions":["src"]},"application/x-web-app-manifest+json":{"compressible":true,"extensions":["webapp"]},"application/x-www-form-urlencoded":{"source":"iana","compressible":true},"application/x-x509-ca-cert":{"source":"iana","extensions":["der","crt","pem"]},"application/x-x509-ca-ra-cert":{"source":"iana"},"application/x-x509-next-ca-cert":{"source":"iana"},"application/x-xfig":{"source":"apache","extensions":["fig"]},"application/x-xliff+xml":{"source":"apache","compressible":true,"extensions":["xlf"]},"application/x-xpinstall":{"source":"apache","compressible":false,"extensions":["xpi"]},"application/x-xz":{"source":"apache","extensions":["xz"]},"application/x-zmachine":{"source":"apache","extensions":["z1","z2","z3","z4","z5","z6","z7","z8"]},"application/x400-bp":{"source":"iana"},"application/xacml+xml":{"source":"iana","compressible":true},"application/xaml+xml":{"source":"apache","compressible":true,"extensions":["xaml"]},"application/xcap-att+xml":{"source":"iana","compressible":true,"extensions":["xav"]},"application/xcap-caps+xml":{"source":"iana","compressible":true,"extensions":["xca"]},"application/xcap-diff+xml":{"source":"iana","compressible":true,"extensions":["xdf"]},"application/xcap-el+xml":{"source":"iana","compressible":true,"extensions":["xel"]},"application/xcap-error+xml":{"source":"iana","compressible":true},"application/xcap-ns+xml":{"source":"iana","compressible":true,"extensions":["xns"]},"application/xcon-conference-info+xml":{"source":"iana","compressible":true},"application/xcon-conference-info-diff+xml":{"source":"iana","compressible":true},"application/xenc+xml":{"source":"iana","compressible":true,"extensions":["xenc"]},"application/xhtml+xml":{"source":"iana","compressible":true,"extensions":["xhtml","xht"]},"application/xhtml-voice+xml":{"source":"apache","compressible":true},"application/xliff+xml":{"source":"iana","compressible":true,"extensions":["xlf"]},"application/xml":{"source":"iana","compressible":true,"extensions":["xml","xsl","xsd","rng"]},"application/xml-dtd":{"source":"iana","compressible":true,"extensions":["dtd"]},"application/xml-external-parsed-entity":{"source":"iana"},"application/xml-patch+xml":{"source":"iana","compressible":true},"application/xmpp+xml":{"source":"iana","compressible":true},"application/xop+xml":{"source":"iana","compressible":true,"extensions":["xop"]},"application/xproc+xml":{"source":"apache","compressible":true,"extensions":["xpl"]},"application/xslt+xml":{"source":"iana","compressible":true,"extensions":["xsl","xslt"]},"application/xspf+xml":{"source":"apache","compressible":true,"extensions":["xspf"]},"application/xv+xml":{"source":"iana","compressible":true,"extensions":["mxml","xhvml","xvml","xvm"]},"application/yang":{"source":"iana","extensions":["yang"]},"application/yang-data+json":{"source":"iana","compressible":true},"application/yang-data+xml":{"source":"iana","compressible":true},"application/yang-patch+json":{"source":"iana","compressible":true},"application/yang-patch+xml":{"source":"iana","compressible":true},"application/yin+xml":{"source":"iana","compressible":true,"extensions":["yin"]},"application/zip":{"source":"iana","compressible":false,"extensions":["zip"]},"application/zlib":{"source":"iana"},"application/zstd":{"source":"iana"},"audio/1d-interleaved-parityfec":{"source":"iana"},"audio/32kadpcm":{"source":"iana"},"audio/3gpp":{"source":"iana","compressible":false,"extensions":["3gpp"]},"audio/3gpp2":{"source":"iana"},"audio/aac":{"source":"iana"},"audio/ac3":{"source":"iana"},"audio/adpcm":{"source":"apache","extensions":["adp"]},"audio/amr":{"source":"iana","extensions":["amr"]},"audio/amr-wb":{"source":"iana"},"audio/amr-wb+":{"source":"iana"},"audio/aptx":{"source":"iana"},"audio/asc":{"source":"iana"},"audio/atrac-advanced-lossless":{"source":"iana"},"audio/atrac-x":{"source":"iana"},"audio/atrac3":{"source":"iana"},"audio/basic":{"source":"iana","compressible":false,"extensions":["au","snd"]},"audio/bv16":{"source":"iana"},"audio/bv32":{"source":"iana"},"audio/clearmode":{"source":"iana"},"audio/cn":{"source":"iana"},"audio/dat12":{"source":"iana"},"audio/dls":{"source":"iana"},"audio/dsr-es201108":{"source":"iana"},"audio/dsr-es202050":{"source":"iana"},"audio/dsr-es202211":{"source":"iana"},"audio/dsr-es202212":{"source":"iana"},"audio/dv":{"source":"iana"},"audio/dvi4":{"source":"iana"},"audio/eac3":{"source":"iana"},"audio/encaprtp":{"source":"iana"},"audio/evrc":{"source":"iana"},"audio/evrc-qcp":{"source":"iana"},"audio/evrc0":{"source":"iana"},"audio/evrc1":{"source":"iana"},"audio/evrcb":{"source":"iana"},"audio/evrcb0":{"source":"iana"},"audio/evrcb1":{"source":"iana"},"audio/evrcnw":{"source":"iana"},"audio/evrcnw0":{"source":"iana"},"audio/evrcnw1":{"source":"iana"},"audio/evrcwb":{"source":"iana"},"audio/evrcwb0":{"source":"iana"},"audio/evrcwb1":{"source":"iana"},"audio/evs":{"source":"iana"},"audio/flexfec":{"source":"iana"},"audio/fwdred":{"source":"iana"},"audio/g711-0":{"source":"iana"},"audio/g719":{"source":"iana"},"audio/g722":{"source":"iana"},"audio/g7221":{"source":"iana"},"audio/g723":{"source":"iana"},"audio/g726-16":{"source":"iana"},"audio/g726-24":{"source":"iana"},"audio/g726-32":{"source":"iana"},"audio/g726-40":{"source":"iana"},"audio/g728":{"source":"iana"},"audio/g729":{"source":"iana"},"audio/g7291":{"source":"iana"},"audio/g729d":{"source":"iana"},"audio/g729e":{"source":"iana"},"audio/gsm":{"source":"iana"},"audio/gsm-efr":{"source":"iana"},"audio/gsm-hr-08":{"source":"iana"},"audio/ilbc":{"source":"iana"},"audio/ip-mr_v2.5":{"source":"iana"},"audio/isac":{"source":"apache"},"audio/l16":{"source":"iana"},"audio/l20":{"source":"iana"},"audio/l24":{"source":"iana","compressible":false},"audio/l8":{"source":"iana"},"audio/lpc":{"source":"iana"},"audio/melp":{"source":"iana"},"audio/melp1200":{"source":"iana"},"audio/melp2400":{"source":"iana"},"audio/melp600":{"source":"iana"},"audio/mhas":{"source":"iana"},"audio/midi":{"source":"apache","extensions":["mid","midi","kar","rmi"]},"audio/mobile-xmf":{"source":"iana","extensions":["mxmf"]},"audio/mp3":{"compressible":false,"extensions":["mp3"]},"audio/mp4":{"source":"iana","compressible":false,"extensions":["m4a","mp4a"]},"audio/mp4a-latm":{"source":"iana"},"audio/mpa":{"source":"iana"},"audio/mpa-robust":{"source":"iana"},"audio/mpeg":{"source":"iana","compressible":false,"extensions":["mpga","mp2","mp2a","mp3","m2a","m3a"]},"audio/mpeg4-generic":{"source":"iana"},"audio/musepack":{"source":"apache"},"audio/ogg":{"source":"iana","compressible":false,"extensions":["oga","ogg","spx","opus"]},"audio/opus":{"source":"iana"},"audio/parityfec":{"source":"iana"},"audio/pcma":{"source":"iana"},"audio/pcma-wb":{"source":"iana"},"audio/pcmu":{"source":"iana"},"audio/pcmu-wb":{"source":"iana"},"audio/prs.sid":{"source":"iana"},"audio/qcelp":{"source":"iana"},"audio/raptorfec":{"source":"iana"},"audio/red":{"source":"iana"},"audio/rtp-enc-aescm128":{"source":"iana"},"audio/rtp-midi":{"source":"iana"},"audio/rtploopback":{"source":"iana"},"audio/rtx":{"source":"iana"},"audio/s3m":{"source":"apache","extensions":["s3m"]},"audio/scip":{"source":"iana"},"audio/silk":{"source":"apache","extensions":["sil"]},"audio/smv":{"source":"iana"},"audio/smv-qcp":{"source":"iana"},"audio/smv0":{"source":"iana"},"audio/sofa":{"source":"iana"},"audio/sp-midi":{"source":"iana"},"audio/speex":{"source":"iana"},"audio/t140c":{"source":"iana"},"audio/t38":{"source":"iana"},"audio/telephone-event":{"source":"iana"},"audio/tetra_acelp":{"source":"iana"},"audio/tetra_acelp_bb":{"source":"iana"},"audio/tone":{"source":"iana"},"audio/tsvcis":{"source":"iana"},"audio/uemclip":{"source":"iana"},"audio/ulpfec":{"source":"iana"},"audio/usac":{"source":"iana"},"audio/vdvi":{"source":"iana"},"audio/vmr-wb":{"source":"iana"},"audio/vnd.3gpp.iufp":{"source":"iana"},"audio/vnd.4sb":{"source":"iana"},"audio/vnd.audiokoz":{"source":"iana"},"audio/vnd.celp":{"source":"iana"},"audio/vnd.cisco.nse":{"source":"iana"},"audio/vnd.cmles.radio-events":{"source":"iana"},"audio/vnd.cns.anp1":{"source":"iana"},"audio/vnd.cns.inf1":{"source":"iana"},"audio/vnd.dece.audio":{"source":"iana","extensions":["uva","uvva"]},"audio/vnd.digital-winds":{"source":"iana","extensions":["eol"]},"audio/vnd.dlna.adts":{"source":"iana"},"audio/vnd.dolby.heaac.1":{"source":"iana"},"audio/vnd.dolby.heaac.2":{"source":"iana"},"audio/vnd.dolby.mlp":{"source":"iana"},"audio/vnd.dolby.mps":{"source":"iana"},"audio/vnd.dolby.pl2":{"source":"iana"},"audio/vnd.dolby.pl2x":{"source":"iana"},"audio/vnd.dolby.pl2z":{"source":"iana"},"audio/vnd.dolby.pulse.1":{"source":"iana"},"audio/vnd.dra":{"source":"iana","extensions":["dra"]},"audio/vnd.dts":{"source":"iana","extensions":["dts"]},"audio/vnd.dts.hd":{"source":"iana","extensions":["dtshd"]},"audio/vnd.dts.uhd":{"source":"iana"},"audio/vnd.dvb.file":{"source":"iana"},"audio/vnd.everad.plj":{"source":"iana"},"audio/vnd.hns.audio":{"source":"iana"},"audio/vnd.lucent.voice":{"source":"iana","extensions":["lvp"]},"audio/vnd.ms-playready.media.pya":{"source":"iana","extensions":["pya"]},"audio/vnd.nokia.mobile-xmf":{"source":"iana"},"audio/vnd.nortel.vbk":{"source":"iana"},"audio/vnd.nuera.ecelp4800":{"source":"iana","extensions":["ecelp4800"]},"audio/vnd.nuera.ecelp7470":{"source":"iana","extensions":["ecelp7470"]},"audio/vnd.nuera.ecelp9600":{"source":"iana","extensions":["ecelp9600"]},"audio/vnd.octel.sbc":{"source":"iana"},"audio/vnd.presonus.multitrack":{"source":"iana"},"audio/vnd.qcelp":{"source":"iana"},"audio/vnd.rhetorex.32kadpcm":{"source":"iana"},"audio/vnd.rip":{"source":"iana","extensions":["rip"]},"audio/vnd.rn-realaudio":{"compressible":false},"audio/vnd.sealedmedia.softseal.mpeg":{"source":"iana"},"audio/vnd.vmx.cvsd":{"source":"iana"},"audio/vnd.wave":{"compressible":false},"audio/vorbis":{"source":"iana","compressible":false},"audio/vorbis-config":{"source":"iana"},"audio/wav":{"compressible":false,"extensions":["wav"]},"audio/wave":{"compressible":false,"extensions":["wav"]},"audio/webm":{"source":"apache","compressible":false,"extensions":["weba"]},"audio/x-aac":{"source":"apache","compressible":false,"extensions":["aac"]},"audio/x-aiff":{"source":"apache","extensions":["aif","aiff","aifc"]},"audio/x-caf":{"source":"apache","compressible":false,"extensions":["caf"]},"audio/x-flac":{"source":"apache","extensions":["flac"]},"audio/x-m4a":{"source":"nginx","extensions":["m4a"]},"audio/x-matroska":{"source":"apache","extensions":["mka"]},"audio/x-mpegurl":{"source":"apache","extensions":["m3u"]},"audio/x-ms-wax":{"source":"apache","extensions":["wax"]},"audio/x-ms-wma":{"source":"apache","extensions":["wma"]},"audio/x-pn-realaudio":{"source":"apache","extensions":["ram","ra"]},"audio/x-pn-realaudio-plugin":{"source":"apache","extensions":["rmp"]},"audio/x-realaudio":{"source":"nginx","extensions":["ra"]},"audio/x-tta":{"source":"apache"},"audio/x-wav":{"source":"apache","extensions":["wav"]},"audio/xm":{"source":"apache","extensions":["xm"]},"chemical/x-cdx":{"source":"apache","extensions":["cdx"]},"chemical/x-cif":{"source":"apache","extensions":["cif"]},"chemical/x-cmdf":{"source":"apache","extensions":["cmdf"]},"chemical/x-cml":{"source":"apache","extensions":["cml"]},"chemical/x-csml":{"source":"apache","extensions":["csml"]},"chemical/x-pdb":{"source":"apache"},"chemical/x-xyz":{"source":"apache","extensions":["xyz"]},"font/collection":{"source":"iana","extensions":["ttc"]},"font/otf":{"source":"iana","compressible":true,"extensions":["otf"]},"font/sfnt":{"source":"iana"},"font/ttf":{"source":"iana","compressible":true,"extensions":["ttf"]},"font/woff":{"source":"iana","extensions":["woff"]},"font/woff2":{"source":"iana","extensions":["woff2"]},"image/aces":{"source":"iana","extensions":["exr"]},"image/apng":{"compressible":false,"extensions":["apng"]},"image/avci":{"source":"iana"},"image/avcs":{"source":"iana"},"image/avif":{"source":"iana","compressible":false,"extensions":["avif"]},"image/bmp":{"source":"iana","compressible":true,"extensions":["bmp"]},"image/cgm":{"source":"iana","extensions":["cgm"]},"image/dicom-rle":{"source":"iana","extensions":["drle"]},"image/emf":{"source":"iana","extensions":["emf"]},"image/fits":{"source":"iana","extensions":["fits"]},"image/g3fax":{"source":"iana","extensions":["g3"]},"image/gif":{"source":"iana","compressible":false,"extensions":["gif"]},"image/heic":{"source":"iana","extensions":["heic"]},"image/heic-sequence":{"source":"iana","extensions":["heics"]},"image/heif":{"source":"iana","extensions":["heif"]},"image/heif-sequence":{"source":"iana","extensions":["heifs"]},"image/hej2k":{"source":"iana","extensions":["hej2"]},"image/hsj2":{"source":"iana","extensions":["hsj2"]},"image/ief":{"source":"iana","extensions":["ief"]},"image/jls":{"source":"iana","extensions":["jls"]},"image/jp2":{"source":"iana","compressible":false,"extensions":["jp2","jpg2"]},"image/jpeg":{"source":"iana","compressible":false,"extensions":["jpeg","jpg","jpe"]},"image/jph":{"source":"iana","extensions":["jph"]},"image/jphc":{"source":"iana","extensions":["jhc"]},"image/jpm":{"source":"iana","compressible":false,"extensions":["jpm"]},"image/jpx":{"source":"iana","compressible":false,"extensions":["jpx","jpf"]},"image/jxr":{"source":"iana","extensions":["jxr"]},"image/jxra":{"source":"iana","extensions":["jxra"]},"image/jxrs":{"source":"iana","extensions":["jxrs"]},"image/jxs":{"source":"iana","extensions":["jxs"]},"image/jxsc":{"source":"iana","extensions":["jxsc"]},"image/jxsi":{"source":"iana","extensions":["jxsi"]},"image/jxss":{"source":"iana","extensions":["jxss"]},"image/ktx":{"source":"iana","extensions":["ktx"]},"image/ktx2":{"source":"iana","extensions":["ktx2"]},"image/naplps":{"source":"iana"},"image/pjpeg":{"compressible":false},"image/png":{"source":"iana","compressible":false,"extensions":["png"]},"image/prs.btif":{"source":"iana","extensions":["btif"]},"image/prs.pti":{"source":"iana","extensions":["pti"]},"image/pwg-raster":{"source":"iana"},"image/sgi":{"source":"apache","extensions":["sgi"]},"image/svg+xml":{"source":"iana","compressible":true,"extensions":["svg","svgz"]},"image/t38":{"source":"iana","extensions":["t38"]},"image/tiff":{"source":"iana","compressible":false,"extensions":["tif","tiff"]},"image/tiff-fx":{"source":"iana","extensions":["tfx"]},"image/vnd.adobe.photoshop":{"source":"iana","compressible":true,"extensions":["psd"]},"image/vnd.airzip.accelerator.azv":{"source":"iana","extensions":["azv"]},"image/vnd.cns.inf2":{"source":"iana"},"image/vnd.dece.graphic":{"source":"iana","extensions":["uvi","uvvi","uvg","uvvg"]},"image/vnd.djvu":{"source":"iana","extensions":["djvu","djv"]},"image/vnd.dvb.subtitle":{"source":"iana","extensions":["sub"]},"image/vnd.dwg":{"source":"iana","extensions":["dwg"]},"image/vnd.dxf":{"source":"iana","extensions":["dxf"]},"image/vnd.fastbidsheet":{"source":"iana","extensions":["fbs"]},"image/vnd.fpx":{"source":"iana","extensions":["fpx"]},"image/vnd.fst":{"source":"iana","extensions":["fst"]},"image/vnd.fujixerox.edmics-mmr":{"source":"iana","extensions":["mmr"]},"image/vnd.fujixerox.edmics-rlc":{"source":"iana","extensions":["rlc"]},"image/vnd.globalgraphics.pgb":{"source":"iana"},"image/vnd.microsoft.icon":{"source":"iana","extensions":["ico"]},"image/vnd.mix":{"source":"iana"},"image/vnd.mozilla.apng":{"source":"iana"},"image/vnd.ms-dds":{"extensions":["dds"]},"image/vnd.ms-modi":{"source":"iana","extensions":["mdi"]},"image/vnd.ms-photo":{"source":"apache","extensions":["wdp"]},"image/vnd.net-fpx":{"source":"iana","extensions":["npx"]},"image/vnd.pco.b16":{"source":"iana","extensions":["b16"]},"image/vnd.radiance":{"source":"iana"},"image/vnd.sealed.png":{"source":"iana"},"image/vnd.sealedmedia.softseal.gif":{"source":"iana"},"image/vnd.sealedmedia.softseal.jpg":{"source":"iana"},"image/vnd.svf":{"source":"iana"},"image/vnd.tencent.tap":{"source":"iana","extensions":["tap"]},"image/vnd.valve.source.texture":{"source":"iana","extensions":["vtf"]},"image/vnd.wap.wbmp":{"source":"iana","extensions":["wbmp"]},"image/vnd.xiff":{"source":"iana","extensions":["xif"]},"image/vnd.zbrush.pcx":{"source":"iana","extensions":["pcx"]},"image/webp":{"source":"apache","extensions":["webp"]},"image/wmf":{"source":"iana","extensions":["wmf"]},"image/x-3ds":{"source":"apache","extensions":["3ds"]},"image/x-cmu-raster":{"source":"apache","extensions":["ras"]},"image/x-cmx":{"source":"apache","extensions":["cmx"]},"image/x-freehand":{"source":"apache","extensions":["fh","fhc","fh4","fh5","fh7"]},"image/x-icon":{"source":"apache","compressible":true,"extensions":["ico"]},"image/x-jng":{"source":"nginx","extensions":["jng"]},"image/x-mrsid-image":{"source":"apache","extensions":["sid"]},"image/x-ms-bmp":{"source":"nginx","compressible":true,"extensions":["bmp"]},"image/x-pcx":{"source":"apache","extensions":["pcx"]},"image/x-pict":{"source":"apache","extensions":["pic","pct"]},"image/x-portable-anymap":{"source":"apache","extensions":["pnm"]},"image/x-portable-bitmap":{"source":"apache","extensions":["pbm"]},"image/x-portable-graymap":{"source":"apache","extensions":["pgm"]},"image/x-portable-pixmap":{"source":"apache","extensions":["ppm"]},"image/x-rgb":{"source":"apache","extensions":["rgb"]},"image/x-tga":{"source":"apache","extensions":["tga"]},"image/x-xbitmap":{"source":"apache","extensions":["xbm"]},"image/x-xcf":{"compressible":false},"image/x-xpixmap":{"source":"apache","extensions":["xpm"]},"image/x-xwindowdump":{"source":"apache","extensions":["xwd"]},"message/cpim":{"source":"iana"},"message/delivery-status":{"source":"iana"},"message/disposition-notification":{"source":"iana","extensions":["disposition-notification"]},"message/external-body":{"source":"iana"},"message/feedback-report":{"source":"iana"},"message/global":{"source":"iana","extensions":["u8msg"]},"message/global-delivery-status":{"source":"iana","extensions":["u8dsn"]},"message/global-disposition-notification":{"source":"iana","extensions":["u8mdn"]},"message/global-headers":{"source":"iana","extensions":["u8hdr"]},"message/http":{"source":"iana","compressible":false},"message/imdn+xml":{"source":"iana","compressible":true},"message/news":{"source":"iana"},"message/partial":{"source":"iana","compressible":false},"message/rfc822":{"source":"iana","compressible":true,"extensions":["eml","mime"]},"message/s-http":{"source":"iana"},"message/sip":{"source":"iana"},"message/sipfrag":{"source":"iana"},"message/tracking-status":{"source":"iana"},"message/vnd.si.simp":{"source":"iana"},"message/vnd.wfa.wsc":{"source":"iana","extensions":["wsc"]},"model/3mf":{"source":"iana","extensions":["3mf"]},"model/e57":{"source":"iana"},"model/gltf+json":{"source":"iana","compressible":true,"extensions":["gltf"]},"model/gltf-binary":{"source":"iana","compressible":true,"extensions":["glb"]},"model/iges":{"source":"iana","compressible":false,"extensions":["igs","iges"]},"model/mesh":{"source":"iana","compressible":false,"extensions":["msh","mesh","silo"]},"model/mtl":{"source":"iana","extensions":["mtl"]},"model/obj":{"source":"iana","extensions":["obj"]},"model/stl":{"source":"iana","extensions":["stl"]},"model/vnd.collada+xml":{"source":"iana","compressible":true,"extensions":["dae"]},"model/vnd.dwf":{"source":"iana","extensions":["dwf"]},"model/vnd.flatland.3dml":{"source":"iana"},"model/vnd.gdl":{"source":"iana","extensions":["gdl"]},"model/vnd.gs-gdl":{"source":"apache"},"model/vnd.gs.gdl":{"source":"iana"},"model/vnd.gtw":{"source":"iana","extensions":["gtw"]},"model/vnd.moml+xml":{"source":"iana","compressible":true},"model/vnd.mts":{"source":"iana","extensions":["mts"]},"model/vnd.opengex":{"source":"iana","extensions":["ogex"]},"model/vnd.parasolid.transmit.binary":{"source":"iana","extensions":["x_b"]},"model/vnd.parasolid.transmit.text":{"source":"iana","extensions":["x_t"]},"model/vnd.rosette.annotated-data-model":{"source":"iana"},"model/vnd.sap.vds":{"source":"iana","extensions":["vds"]},"model/vnd.usdz+zip":{"source":"iana","compressible":false,"extensions":["usdz"]},"model/vnd.valve.source.compiled-map":{"source":"iana","extensions":["bsp"]},"model/vnd.vtu":{"source":"iana","extensions":["vtu"]},"model/vrml":{"source":"iana","compressible":false,"extensions":["wrl","vrml"]},"model/x3d+binary":{"source":"apache","compressible":false,"extensions":["x3db","x3dbz"]},"model/x3d+fastinfoset":{"source":"iana","extensions":["x3db"]},"model/x3d+vrml":{"source":"apache","compressible":false,"extensions":["x3dv","x3dvz"]},"model/x3d+xml":{"source":"iana","compressible":true,"extensions":["x3d","x3dz"]},"model/x3d-vrml":{"source":"iana","extensions":["x3dv"]},"multipart/alternative":{"source":"iana","compressible":false},"multipart/appledouble":{"source":"iana"},"multipart/byteranges":{"source":"iana"},"multipart/digest":{"source":"iana"},"multipart/encrypted":{"source":"iana","compressible":false},"multipart/form-data":{"source":"iana","compressible":false},"multipart/header-set":{"source":"iana"},"multipart/mixed":{"source":"iana"},"multipart/multilingual":{"source":"iana"},"multipart/parallel":{"source":"iana"},"multipart/related":{"source":"iana","compressible":false},"multipart/report":{"source":"iana"},"multipart/signed":{"source":"iana","compressible":false},"multipart/vnd.bint.med-plus":{"source":"iana"},"multipart/voice-message":{"source":"iana"},"multipart/x-mixed-replace":{"source":"iana"},"text/1d-interleaved-parityfec":{"source":"iana"},"text/cache-manifest":{"source":"iana","compressible":true,"extensions":["appcache","manifest"]},"text/calendar":{"source":"iana","extensions":["ics","ifb"]},"text/calender":{"compressible":true},"text/cmd":{"compressible":true},"text/coffeescript":{"extensions":["coffee","litcoffee"]},"text/cql":{"source":"iana"},"text/cql-expression":{"source":"iana"},"text/cql-identifier":{"source":"iana"},"text/css":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["css"]},"text/csv":{"source":"iana","compressible":true,"extensions":["csv"]},"text/csv-schema":{"source":"iana"},"text/directory":{"source":"iana"},"text/dns":{"source":"iana"},"text/ecmascript":{"source":"iana"},"text/encaprtp":{"source":"iana"},"text/enriched":{"source":"iana"},"text/fhirpath":{"source":"iana"},"text/flexfec":{"source":"iana"},"text/fwdred":{"source":"iana"},"text/gff3":{"source":"iana"},"text/grammar-ref-list":{"source":"iana"},"text/html":{"source":"iana","compressible":true,"extensions":["html","htm","shtml"]},"text/jade":{"extensions":["jade"]},"text/javascript":{"source":"iana","compressible":true},"text/jcr-cnd":{"source":"iana"},"text/jsx":{"compressible":true,"extensions":["jsx"]},"text/less":{"compressible":true,"extensions":["less"]},"text/markdown":{"source":"iana","compressible":true,"extensions":["markdown","md"]},"text/mathml":{"source":"nginx","extensions":["mml"]},"text/mdx":{"compressible":true,"extensions":["mdx"]},"text/mizar":{"source":"iana"},"text/n3":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["n3"]},"text/parameters":{"source":"iana","charset":"UTF-8"},"text/parityfec":{"source":"iana"},"text/plain":{"source":"iana","compressible":true,"extensions":["txt","text","conf","def","list","log","in","ini"]},"text/provenance-notation":{"source":"iana","charset":"UTF-8"},"text/prs.fallenstein.rst":{"source":"iana"},"text/prs.lines.tag":{"source":"iana","extensions":["dsc"]},"text/prs.prop.logic":{"source":"iana"},"text/raptorfec":{"source":"iana"},"text/red":{"source":"iana"},"text/rfc822-headers":{"source":"iana"},"text/richtext":{"source":"iana","compressible":true,"extensions":["rtx"]},"text/rtf":{"source":"iana","compressible":true,"extensions":["rtf"]},"text/rtp-enc-aescm128":{"source":"iana"},"text/rtploopback":{"source":"iana"},"text/rtx":{"source":"iana"},"text/sgml":{"source":"iana","extensions":["sgml","sgm"]},"text/shaclc":{"source":"iana"},"text/shex":{"extensions":["shex"]},"text/slim":{"extensions":["slim","slm"]},"text/spdx":{"source":"iana","extensions":["spdx"]},"text/strings":{"source":"iana"},"text/stylus":{"extensions":["stylus","styl"]},"text/t140":{"source":"iana"},"text/tab-separated-values":{"source":"iana","compressible":true,"extensions":["tsv"]},"text/troff":{"source":"iana","extensions":["t","tr","roff","man","me","ms"]},"text/turtle":{"source":"iana","charset":"UTF-8","extensions":["ttl"]},"text/ulpfec":{"source":"iana"},"text/uri-list":{"source":"iana","compressible":true,"extensions":["uri","uris","urls"]},"text/vcard":{"source":"iana","compressible":true,"extensions":["vcard"]},"text/vnd.a":{"source":"iana"},"text/vnd.abc":{"source":"iana"},"text/vnd.ascii-art":{"source":"iana"},"text/vnd.curl":{"source":"iana","extensions":["curl"]},"text/vnd.curl.dcurl":{"source":"apache","extensions":["dcurl"]},"text/vnd.curl.mcurl":{"source":"apache","extensions":["mcurl"]},"text/vnd.curl.scurl":{"source":"apache","extensions":["scurl"]},"text/vnd.debian.copyright":{"source":"iana","charset":"UTF-8"},"text/vnd.dmclientscript":{"source":"iana"},"text/vnd.dvb.subtitle":{"source":"iana","extensions":["sub"]},"text/vnd.esmertec.theme-descriptor":{"source":"iana","charset":"UTF-8"},"text/vnd.ficlab.flt":{"source":"iana"},"text/vnd.fly":{"source":"iana","extensions":["fly"]},"text/vnd.fmi.flexstor":{"source":"iana","extensions":["flx"]},"text/vnd.gml":{"source":"iana"},"text/vnd.graphviz":{"source":"iana","extensions":["gv"]},"text/vnd.hans":{"source":"iana"},"text/vnd.hgl":{"source":"iana"},"text/vnd.in3d.3dml":{"source":"iana","extensions":["3dml"]},"text/vnd.in3d.spot":{"source":"iana","extensions":["spot"]},"text/vnd.iptc.newsml":{"source":"iana"},"text/vnd.iptc.nitf":{"source":"iana"},"text/vnd.latex-z":{"source":"iana"},"text/vnd.motorola.reflex":{"source":"iana"},"text/vnd.ms-mediapackage":{"source":"iana"},"text/vnd.net2phone.commcenter.command":{"source":"iana"},"text/vnd.radisys.msml-basic-layout":{"source":"iana"},"text/vnd.senx.warpscript":{"source":"iana"},"text/vnd.si.uricatalogue":{"source":"iana"},"text/vnd.sosi":{"source":"iana"},"text/vnd.sun.j2me.app-descriptor":{"source":"iana","charset":"UTF-8","extensions":["jad"]},"text/vnd.trolltech.linguist":{"source":"iana","charset":"UTF-8"},"text/vnd.wap.si":{"source":"iana"},"text/vnd.wap.sl":{"source":"iana"},"text/vnd.wap.wml":{"source":"iana","extensions":["wml"]},"text/vnd.wap.wmlscript":{"source":"iana","extensions":["wmls"]},"text/vtt":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["vtt"]},"text/x-asm":{"source":"apache","extensions":["s","asm"]},"text/x-c":{"source":"apache","extensions":["c","cc","cxx","cpp","h","hh","dic"]},"text/x-component":{"source":"nginx","extensions":["htc"]},"text/x-fortran":{"source":"apache","extensions":["f","for","f77","f90"]},"text/x-gwt-rpc":{"compressible":true},"text/x-handlebars-template":{"extensions":["hbs"]},"text/x-java-source":{"source":"apache","extensions":["java"]},"text/x-jquery-tmpl":{"compressible":true},"text/x-lua":{"extensions":["lua"]},"text/x-markdown":{"compressible":true,"extensions":["mkd"]},"text/x-nfo":{"source":"apache","extensions":["nfo"]},"text/x-opml":{"source":"apache","extensions":["opml"]},"text/x-org":{"compressible":true,"extensions":["org"]},"text/x-pascal":{"source":"apache","extensions":["p","pas"]},"text/x-processing":{"compressible":true,"extensions":["pde"]},"text/x-sass":{"extensions":["sass"]},"text/x-scss":{"extensions":["scss"]},"text/x-setext":{"source":"apache","extensions":["etx"]},"text/x-sfv":{"source":"apache","extensions":["sfv"]},"text/x-suse-ymp":{"compressible":true,"extensions":["ymp"]},"text/x-uuencode":{"source":"apache","extensions":["uu"]},"text/x-vcalendar":{"source":"apache","extensions":["vcs"]},"text/x-vcard":{"source":"apache","extensions":["vcf"]},"text/xml":{"source":"iana","compressible":true,"extensions":["xml"]},"text/xml-external-parsed-entity":{"source":"iana"},"text/yaml":{"extensions":["yaml","yml"]},"video/1d-interleaved-parityfec":{"source":"iana"},"video/3gpp":{"source":"iana","extensions":["3gp","3gpp"]},"video/3gpp-tt":{"source":"iana"},"video/3gpp2":{"source":"iana","extensions":["3g2"]},"video/av1":{"source":"iana"},"video/bmpeg":{"source":"iana"},"video/bt656":{"source":"iana"},"video/celb":{"source":"iana"},"video/dv":{"source":"iana"},"video/encaprtp":{"source":"iana"},"video/ffv1":{"source":"iana"},"video/flexfec":{"source":"iana"},"video/h261":{"source":"iana","extensions":["h261"]},"video/h263":{"source":"iana","extensions":["h263"]},"video/h263-1998":{"source":"iana"},"video/h263-2000":{"source":"iana"},"video/h264":{"source":"iana","extensions":["h264"]},"video/h264-rcdo":{"source":"iana"},"video/h264-svc":{"source":"iana"},"video/h265":{"source":"iana"},"video/iso.segment":{"source":"iana","extensions":["m4s"]},"video/jpeg":{"source":"iana","extensions":["jpgv"]},"video/jpeg2000":{"source":"iana"},"video/jpm":{"source":"apache","extensions":["jpm","jpgm"]},"video/mj2":{"source":"iana","extensions":["mj2","mjp2"]},"video/mp1s":{"source":"iana"},"video/mp2p":{"source":"iana"},"video/mp2t":{"source":"iana","extensions":["ts"]},"video/mp4":{"source":"iana","compressible":false,"extensions":["mp4","mp4v","mpg4"]},"video/mp4v-es":{"source":"iana"},"video/mpeg":{"source":"iana","compressible":false,"extensions":["mpeg","mpg","mpe","m1v","m2v"]},"video/mpeg4-generic":{"source":"iana"},"video/mpv":{"source":"iana"},"video/nv":{"source":"iana"},"video/ogg":{"source":"iana","compressible":false,"extensions":["ogv"]},"video/parityfec":{"source":"iana"},"video/pointer":{"source":"iana"},"video/quicktime":{"source":"iana","compressible":false,"extensions":["qt","mov"]},"video/raptorfec":{"source":"iana"},"video/raw":{"source":"iana"},"video/rtp-enc-aescm128":{"source":"iana"},"video/rtploopback":{"source":"iana"},"video/rtx":{"source":"iana"},"video/scip":{"source":"iana"},"video/smpte291":{"source":"iana"},"video/smpte292m":{"source":"iana"},"video/ulpfec":{"source":"iana"},"video/vc1":{"source":"iana"},"video/vc2":{"source":"iana"},"video/vnd.cctv":{"source":"iana"},"video/vnd.dece.hd":{"source":"iana","extensions":["uvh","uvvh"]},"video/vnd.dece.mobile":{"source":"iana","extensions":["uvm","uvvm"]},"video/vnd.dece.mp4":{"source":"iana"},"video/vnd.dece.pd":{"source":"iana","extensions":["uvp","uvvp"]},"video/vnd.dece.sd":{"source":"iana","extensions":["uvs","uvvs"]},"video/vnd.dece.video":{"source":"iana","extensions":["uvv","uvvv"]},"video/vnd.directv.mpeg":{"source":"iana"},"video/vnd.directv.mpeg-tts":{"source":"iana"},"video/vnd.dlna.mpeg-tts":{"source":"iana"},"video/vnd.dvb.file":{"source":"iana","extensions":["dvb"]},"video/vnd.fvt":{"source":"iana","extensions":["fvt"]},"video/vnd.hns.video":{"source":"iana"},"video/vnd.iptvforum.1dparityfec-1010":{"source":"iana"},"video/vnd.iptvforum.1dparityfec-2005":{"source":"iana"},"video/vnd.iptvforum.2dparityfec-1010":{"source":"iana"},"video/vnd.iptvforum.2dparityfec-2005":{"source":"iana"},"video/vnd.iptvforum.ttsavc":{"source":"iana"},"video/vnd.iptvforum.ttsmpeg2":{"source":"iana"},"video/vnd.motorola.video":{"source":"iana"},"video/vnd.motorola.videop":{"source":"iana"},"video/vnd.mpegurl":{"source":"iana","extensions":["mxu","m4u"]},"video/vnd.ms-playready.media.pyv":{"source":"iana","extensions":["pyv"]},"video/vnd.nokia.interleaved-multimedia":{"source":"iana"},"video/vnd.nokia.mp4vr":{"source":"iana"},"video/vnd.nokia.videovoip":{"source":"iana"},"video/vnd.objectvideo":{"source":"iana"},"video/vnd.radgamettools.bink":{"source":"iana"},"video/vnd.radgamettools.smacker":{"source":"iana"},"video/vnd.sealed.mpeg1":{"source":"iana"},"video/vnd.sealed.mpeg4":{"source":"iana"},"video/vnd.sealed.swf":{"source":"iana"},"video/vnd.sealedmedia.softseal.mov":{"source":"iana"},"video/vnd.uvvu.mp4":{"source":"iana","extensions":["uvu","uvvu"]},"video/vnd.vivo":{"source":"iana","extensions":["viv"]},"video/vnd.youtube.yt":{"source":"iana"},"video/vp8":{"source":"iana"},"video/webm":{"source":"apache","compressible":false,"extensions":["webm"]},"video/x-f4v":{"source":"apache","extensions":["f4v"]},"video/x-fli":{"source":"apache","extensions":["fli"]},"video/x-flv":{"source":"apache","compressible":false,"extensions":["flv"]},"video/x-m4v":{"source":"apache","extensions":["m4v"]},"video/x-matroska":{"source":"apache","compressible":false,"extensions":["mkv","mk3d","mks"]},"video/x-mng":{"source":"apache","extensions":["mng"]},"video/x-ms-asf":{"source":"apache","extensions":["asf","asx"]},"video/x-ms-vob":{"source":"apache","extensions":["vob"]},"video/x-ms-wm":{"source":"apache","extensions":["wm"]},"video/x-ms-wmv":{"source":"apache","compressible":false,"extensions":["wmv"]},"video/x-ms-wmx":{"source":"apache","extensions":["wmx"]},"video/x-ms-wvx":{"source":"apache","extensions":["wvx"]},"video/x-msvideo":{"source":"apache","extensions":["avi"]},"video/x-sgi-movie":{"source":"apache","extensions":["movie"]},"video/x-smv":{"source":"apache","extensions":["smv"]},"x-conference/x-cooltalk":{"source":"apache","extensions":["ice"]},"x-shader/x-fragment":{"compressible":true},"x-shader/x-vertex":{"compressible":true}}')},5234:(e,t,n)=>{e.exports=n(3313)},983:(e,t,n)=>{"use strict";var i,a,s,o=n(5234),r=n(5622).extname,c=/^\s*([^;\s]*)(?:;|\s|$)/,p=/^text\//i;function l(e){if(!e||"string"!=typeof e)return!1;var t=c.exec(e),n=t&&o[t[1].toLowerCase()];return n&&n.charset?n.charset:!(!t||!p.test(t[1]))&&"UTF-8"}t.charset=l,t.charsets={lookup:l},t.contentType=function(e){if(!e||"string"!=typeof e)return!1;var n=-1===e.indexOf("/")?t.lookup(e):e;if(!n)return!1;if(-1===n.indexOf("charset")){var i=t.charset(n);i&&(n+="; charset="+i.toLowerCase())}return n},t.extension=function(e){if(!e||"string"!=typeof e)return!1;var n=c.exec(e),i=n&&t.extensions[n[1].toLowerCase()];if(!i||!i.length)return!1;return i[0]},t.extensions=Object.create(null),t.lookup=function(e){if(!e||"string"!=typeof e)return!1;var n=r("x."+e).toLowerCase().substr(1);if(!n)return!1;return t.types[n]||!1},t.types=Object.create(null),i=t.extensions,a=t.types,s=["nginx","apache",void 0,"iana"],Object.keys(o).forEach((function(e){var t=o[e],n=t.extensions;if(n&&n.length){i[e]=n;for(var r=0;r<n.length;r++){var c=n[r];if(a[c]){var p=s.indexOf(o[a[c]].source),l=s.indexOf(t.source);if("application/octet-stream"!==a[c]&&(p>l||p===l&&"application/"===a[c].substr(0,12)))continue}a[c]=e}}}))},7824:e=>{var t=1e3,n=60*t,i=60*n,a=24*i,s=7*a,o=365.25*a;function r(e,t,n,i){var a=t>=1.5*n;return Math.round(e/n)+" "+i+(a?"s":"")}e.exports=function(e,c){c=c||{};var p=typeof e;if("string"===p&&e.length>0)return function(e){if((e=String(e)).length>100)return;var r=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(!r)return;var c=parseFloat(r[1]);switch((r[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return c*o;case"weeks":case"week":case"w":return c*s;case"days":case"day":case"d":return c*a;case"hours":case"hour":case"hrs":case"hr":case"h":return c*i;case"minutes":case"minute":case"mins":case"min":case"m":return c*n;case"seconds":case"second":case"secs":case"sec":case"s":return c*t;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return c;default:return}}(e);if("number"===p&&isFinite(e))return c.long?function(e){var s=Math.abs(e);if(s>=a)return r(e,s,a,"day");if(s>=i)return r(e,s,i,"hour");if(s>=n)return r(e,s,n,"minute");if(s>=t)return r(e,s,t,"second");return e+" ms"}(e):function(e){var s=Math.abs(e);if(s>=a)return Math.round(e/a)+"d";if(s>=i)return Math.round(e/i)+"h";if(s>=n)return Math.round(e/n)+"m";if(s>=t)return Math.round(e/t)+"s";return e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},159:(e,t,n)=>{"use strict";var i=Object.create(null);function a(e){if(!(this instanceof a))return new a(e);this.request=e}function s(e){var t=i[e];if(void 0!==t)return t;switch(e){case"charset":t=n(8558);break;case"encoding":t=n(4328);break;case"language":t=n(8035);break;case"mediaType":t=n(4097);break;default:throw new Error("Cannot find module '"+e+"'")}return i[e]=t,t}e.exports=a,e.exports.Negotiator=a,a.prototype.charset=function(e){var t=this.charsets(e);return t&&t[0]},a.prototype.charsets=function(e){return(0,s("charset").preferredCharsets)(this.request.headers["accept-charset"],e)},a.prototype.encoding=function(e){var t=this.encodings(e);return t&&t[0]},a.prototype.encodings=function(e){return(0,s("encoding").preferredEncodings)(this.request.headers["accept-encoding"],e)},a.prototype.language=function(e){var t=this.languages(e);return t&&t[0]},a.prototype.languages=function(e){return(0,s("language").preferredLanguages)(this.request.headers["accept-language"],e)},a.prototype.mediaType=function(e){var t=this.mediaTypes(e);return t&&t[0]},a.prototype.mediaTypes=function(e){return(0,s("mediaType").preferredMediaTypes)(this.request.headers.accept,e)},a.prototype.preferredCharset=a.prototype.charset,a.prototype.preferredCharsets=a.prototype.charsets,a.prototype.preferredEncoding=a.prototype.encoding,a.prototype.preferredEncodings=a.prototype.encodings,a.prototype.preferredLanguage=a.prototype.language,a.prototype.preferredLanguages=a.prototype.languages,a.prototype.preferredMediaType=a.prototype.mediaType,a.prototype.preferredMediaTypes=a.prototype.mediaTypes},8558:e=>{"use strict";e.exports=a,e.exports.preferredCharsets=a;var t=/^\s*([^\s;]+)\s*(?:;(.*))?$/;function n(e,n){var i=t.exec(e);if(!i)return null;var a=i[1],s=1;if(i[2])for(var o=i[2].split(";"),r=0;r<o.length;r++){var c=o[r].trim().split("=");if("q"===c[0]){s=parseFloat(c[1]);break}}return{charset:a,q:s,i:n}}function i(e,t,n){var i=0;if(t.charset.toLowerCase()===e.toLowerCase())i|=1;else if("*"!==t.charset)return null;return{i:n,o:t.i,q:t.q,s:i}}function a(e,t){var a=function(e){for(var t=e.split(","),i=0,a=0;i<t.length;i++){var s=n(t[i].trim(),i);s&&(t[a++]=s)}return t.length=a,t}(void 0===e?"*":e||"");if(!t)return a.filter(r).sort(s).map(o);var c=t.map((function(e,t){return function(e,t,n){for(var a={o:-1,q:0,s:0},s=0;s<t.length;s++){var o=i(e,t[s],n);o&&(a.s-o.s||a.q-o.q||a.o-o.o)<0&&(a=o)}return a}(e,a,t)}));return c.filter(r).sort(s).map((function(e){return t[c.indexOf(e)]}))}function s(e,t){return t.q-e.q||t.s-e.s||e.o-t.o||e.i-t.i||0}function o(e){return e.charset}function r(e){return e.q>0}},4328:e=>{"use strict";e.exports=a,e.exports.preferredEncodings=a;var t=/^\s*([^\s;]+)\s*(?:;(.*))?$/;function n(e,n){var i=t.exec(e);if(!i)return null;var a=i[1],s=1;if(i[2])for(var o=i[2].split(";"),r=0;r<o.length;r++){var c=o[r].trim().split("=");if("q"===c[0]){s=parseFloat(c[1]);break}}return{encoding:a,q:s,i:n}}function i(e,t,n){var i=0;if(t.encoding.toLowerCase()===e.toLowerCase())i|=1;else if("*"!==t.encoding)return null;return{i:n,o:t.i,q:t.q,s:i}}function a(e,t){var a=function(e){for(var t=e.split(","),a=!1,s=1,o=0,r=0;o<t.length;o++){var c=n(t[o].trim(),o);c&&(t[r++]=c,a=a||i("identity",c),s=Math.min(s,c.q||1))}return a||(t[r++]={encoding:"identity",q:s,i:o}),t.length=r,t}(e||"");if(!t)return a.filter(r).sort(s).map(o);var c=t.map((function(e,t){return function(e,t,n){for(var a={o:-1,q:0,s:0},s=0;s<t.length;s++){var o=i(e,t[s],n);o&&(a.s-o.s||a.q-o.q||a.o-o.o)<0&&(a=o)}return a}(e,a,t)}));return c.filter(r).sort(s).map((function(e){return t[c.indexOf(e)]}))}function s(e,t){return t.q-e.q||t.s-e.s||e.o-t.o||e.i-t.i||0}function o(e){return e.encoding}function r(e){return e.q>0}},8035:e=>{"use strict";e.exports=a,e.exports.preferredLanguages=a;var t=/^\s*([^\s\-;]+)(?:-([^\s;]+))?\s*(?:;(.*))?$/;function n(e,n){var i=t.exec(e);if(!i)return null;var a=i[1],s=i[2],o=a;s&&(o+="-"+s);var r=1;if(i[3])for(var c=i[3].split(";"),p=0;p<c.length;p++){var l=c[p].split("=");"q"===l[0]&&(r=parseFloat(l[1]))}return{prefix:a,suffix:s,q:r,i:n,full:o}}function i(e,t,i){var a=n(e);if(!a)return null;var s=0;if(t.full.toLowerCase()===a.full.toLowerCase())s|=4;else if(t.prefix.toLowerCase()===a.full.toLowerCase())s|=2;else if(t.full.toLowerCase()===a.prefix.toLowerCase())s|=1;else if("*"!==t.full)return null;return{i,o:t.i,q:t.q,s}}function a(e,t){var a=function(e){for(var t=e.split(","),i=0,a=0;i<t.length;i++){var s=n(t[i].trim(),i);s&&(t[a++]=s)}return t.length=a,t}(void 0===e?"*":e||"");if(!t)return a.filter(r).sort(s).map(o);var c=t.map((function(e,t){return function(e,t,n){for(var a={o:-1,q:0,s:0},s=0;s<t.length;s++){var o=i(e,t[s],n);o&&(a.s-o.s||a.q-o.q||a.o-o.o)<0&&(a=o)}return a}(e,a,t)}));return c.filter(r).sort(s).map((function(e){return t[c.indexOf(e)]}))}function s(e,t){return t.q-e.q||t.s-e.s||e.o-t.o||e.i-t.i||0}function o(e){return e.full}function r(e){return e.q>0}},4097:e=>{"use strict";e.exports=s,e.exports.preferredMediaTypes=s;var t=/^\s*([^\s\/;]+)\/([^;\s]+)\s*(?:;(.*))?$/;function n(e){for(var t=function(e){for(var t=e.split(","),n=1,i=0;n<t.length;n++)p(t[i])%2==0?t[++i]=t[n]:t[i]+=","+t[n];return t.length=i+1,t}(e),n=0,a=0;n<t.length;n++){var s=i(t[n].trim(),n);s&&(t[a++]=s)}return t.length=a,t}function i(e,n){var i=t.exec(e);if(!i)return null;var a=Object.create(null),s=1,o=i[2],r=i[1];if(i[3])for(var c=function(e){for(var t=e.split(";"),n=1,i=0;n<t.length;n++)p(t[i])%2==0?t[++i]=t[n]:t[i]+=";"+t[n];t.length=i+1;for(n=0;n<t.length;n++)t[n]=t[n].trim();return t}(i[3]).map(l),u=0;u<c.length;u++){var d=c[u],m=d[0].toLowerCase(),f=d[1],h=f&&'"'===f[0]&&'"'===f[f.length-1]?f.substr(1,f.length-2):f;if("q"===m){s=parseFloat(h);break}a[m]=h}return{type:r,subtype:o,params:a,q:s,i:n}}function a(e,t,n){var a=i(e),s=0;if(!a)return null;if(t.type.toLowerCase()==a.type.toLowerCase())s|=4;else if("*"!=t.type)return null;if(t.subtype.toLowerCase()==a.subtype.toLowerCase())s|=2;else if("*"!=t.subtype)return null;var o=Object.keys(t.params);if(o.length>0){if(!o.every((function(e){return"*"==t.params[e]||(t.params[e]||"").toLowerCase()==(a.params[e]||"").toLowerCase()})))return null;s|=1}return{i:n,o:t.i,q:t.q,s}}function s(e,t){var i=n(void 0===e?"*/*":e||"");if(!t)return i.filter(c).sort(o).map(r);var s=t.map((function(e,t){return function(e,t,n){for(var i={o:-1,q:0,s:0},s=0;s<t.length;s++){var o=a(e,t[s],n);o&&(i.s-o.s||i.q-o.q||i.o-o.o)<0&&(i=o)}return i}(e,i,t)}));return s.filter(c).sort(o).map((function(e){return t[s.indexOf(e)]}))}function o(e,t){return t.q-e.q||t.s-e.s||e.o-t.o||e.i-t.i||0}function r(e){return e.type+"/"+e.subtype}function c(e){return e.q>0}function p(e){for(var t=0,n=0;-1!==(n=e.indexOf('"',n));)t++,n++;return t}function l(e){var t,n,i=e.indexOf("=");return-1===i?t=e:(t=e.substr(0,i),n=e.substr(i+1)),[t,n]}},9516:(e,t,n)=>{var i=n(5747),a=n(5622),s=n(2087),o=require,r=process.config&&process.config.variables||{},c=!!{NODEENV:"production",BROWSER:!1}.PREBUILDS_ONLY,p=process.versions.modules,l=!(!process.versions||!process.versions.electron)||!!{NODEENV:"production",BROWSER:!1}.ELECTRON_RUN_AS_NODE||"undefined"!=typeof window&&window.process&&"renderer"===window.process.type?"electron":"node",u=s.arch(),d=s.platform(),m={NODEENV:"production",BROWSER:!1}.LIBC||(function(e){return"linux"===e&&i.existsSync("/etc/alpine-release")}(d)?"musl":"glibc"),f={NODEENV:"production",BROWSER:!1}.ARM_VERSION||("arm64"===u?"8":r.arm_version)||"",h=(process.versions.uv||"").split(".")[0];function v(e){return o(v.path(e))}function x(e){try{return i.readdirSync(e)}catch(e){return[]}}function g(e,t){var n=x(e).filter(t);return n[0]&&a.join(e,n[0])}function b(e){return/\.node$/.test(e)}function y(e){var t=e.split("."),n={file:e,specificity:0};if("node"===t.pop()){for(var i=0;i<t.length;i++){var a=t[i];if("node"===a||"electron"===a||"node-webkit"===a)n.runtime=a;else if("napi"===a)n.napi=!0;else if("abi"===a.slice(0,3))n.abi=a.slice(3);else if("uv"===a.slice(0,2))n.uv=a.slice(2);else if("armv"===a.slice(0,4))n.armv=a.slice(4);else{if("glibc"!==a&&"musl"!==a)continue;n.libc=a}n.specificity++}return n}}function w(e,t){return function(n){return null!=n&&(!(n.runtime!==e&&!function(e){return"node"===e.runtime&&e.napi}(n))&&(!(n.abi!==t&&!n.napi)&&((!n.uv||n.uv===h)&&((!n.armv||n.armv===f)&&(!n.libc||n.libc===m)))))}}function _(e){return function(t,n){return t.runtime!==n.runtime?t.runtime===e?-1:1:t.abi!==n.abi?t.abi?-1:1:t.specificity!==n.specificity?t.specificity>n.specificity?-1:1:0}}e.exports=v,v.path=function(e){e=a.resolve(e||".");try{var t=o(a.join(e,"package.json")).name.toUpperCase().replace(/-/g,"_");({NODEENV:"production",BROWSER:!1})[t+"_PREBUILD"]&&(e={NODEENV:"production",BROWSER:!1}[t+"_PREBUILD"])}catch(e){}if(!c){var n=g(a.join(e,"build/Release"),b);if(n)return n;var i=g(a.join(e,"build/Debug"),b);if(i)return i}var s=k(e);if(s)return s;var r=k(a.dirname(process.execPath));if(r)return r;var v=["platform="+d,"arch="+u,"runtime="+l,"abi="+p,"uv="+h,f?"armv="+f:"","libc="+m,"node="+process.versions.node,process.versions&&process.versions.electron?"electron="+process.versions.electron:"","webpack=true"].filter(Boolean).join(" ");throw new Error("No native build was found for "+v+"\n    loaded from: "+e+"\n");function k(e){var t=a.join(e,"prebuilds",d+"-"+u),n=x(t).map(y).filter(w(l,p)).sort(_(l))[0];if(n)return a.join(t,n.file)}},v.parseTags=y,v.matchTags=w,v.compareTags=_},7418:e=>{"use strict";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;function a(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var i={};return"abcdefghijklmnopqrst".split("").forEach((function(e){i[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},i)).join("")}catch(e){return!1}}()?Object.assign:function(e,s){for(var o,r,c=a(e),p=1;p<arguments.length;p++){for(var l in o=Object(arguments[p]))n.call(o,l)&&(c[l]=o[l]);if(t){r=t(o);for(var u=0;u<r.length;u++)i.call(o,r[u])&&(c[r[u]]=o[r[u]])}}return c}},7840:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Adapter=void 0;const i=n(8614);class a extends i.EventEmitter{constructor(e){super(),this.nsp=e,this.rooms=new Map,this.sids=new Map,this.encoder=e.server.encoder}init(){}close(){}addAll(e,t){this.sids.has(e)||this.sids.set(e,new Set);for(const n of t)this.sids.get(e).add(n),this.rooms.has(n)||(this.rooms.set(n,new Set),this.emit("create-room",n)),this.rooms.get(n).has(e)||(this.rooms.get(n).add(e),this.emit("join-room",n,e))}del(e,t){this.sids.has(e)&&this.sids.get(e).delete(t),this._del(t,e)}_del(e,t){if(this.rooms.has(e)){this.rooms.get(e).delete(t)&&this.emit("leave-room",e,t),0===this.rooms.get(e).size&&(this.rooms.delete(e),this.emit("delete-room",e))}}delAll(e){if(this.sids.has(e)){for(const t of this.sids.get(e))this._del(t,e);this.sids.delete(e)}}broadcast(e,t){const n=t.flags||{},i={preEncoded:!0,volatile:n.volatile,compress:n.compress};e.nsp=this.nsp.name;const a=this.encoder.encode(e);this.apply(t,(e=>{e.packet(a,i)}))}sockets(e){const t=new Set;return this.apply({rooms:e},(e=>{t.add(e.id)})),Promise.resolve(t)}socketRooms(e){return this.sids.get(e)}fetchSockets(e){const t=[];return this.apply(e,(e=>{t.push(e)})),Promise.resolve(t)}addSockets(e,t){this.apply(e,(e=>{e.join(t)}))}delSockets(e,t){this.apply(e,(e=>{t.forEach((t=>e.leave(t)))}))}disconnectSockets(e,t){this.apply(e,(e=>{e.disconnect(t)}))}apply(e,t){const n=e.rooms,i=this.computeExceptSids(e.except);if(n.size){const e=new Set;for(const a of n)if(this.rooms.has(a))for(const n of this.rooms.get(a)){if(e.has(n)||i.has(n))continue;const a=this.nsp.sockets.get(n);a&&(t(a),e.add(n))}}else for(const[e]of this.sids){if(i.has(e))continue;const n=this.nsp.sockets.get(e);n&&t(n)}}computeExceptSids(e){const t=new Set;if(e&&e.size>0)for(const n of e)this.rooms.has(n)&&this.rooms.get(n).forEach((e=>t.add(e)));return t}}t.Adapter=a},7719:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.reconstructPacket=t.deconstructPacket=void 0;const i=n(2986);function a(e,t){if(!e)return e;if(i.isBinary(e)){const n={_placeholder:!0,num:t.length};return t.push(e),n}if(Array.isArray(e)){const n=new Array(e.length);for(let i=0;i<e.length;i++)n[i]=a(e[i],t);return n}if("object"==typeof e&&!(e instanceof Date)){const n={};for(const i in e)e.hasOwnProperty(i)&&(n[i]=a(e[i],t));return n}return e}function s(e,t){if(!e)return e;if(e&&e._placeholder)return t[e.num];if(Array.isArray(e))for(let n=0;n<e.length;n++)e[n]=s(e[n],t);else if("object"==typeof e)for(const n in e)e.hasOwnProperty(n)&&(e[n]=s(e[n],t));return e}t.deconstructPacket=function(e){const t=[],n=e.data,i=e;return i.data=a(n,t),i.attachments=t.length,{packet:i,buffers:t}},t.reconstructPacket=function(e,t){return e.data=s(e.data,t),e.attachments=void 0,e}},5485:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Decoder=t.Encoder=t.PacketType=t.protocol=void 0;const i=n(8767),a=n(7719),s=n(2986),o=n(5158)("socket.io-parser");var r;t.protocol=5,function(e){e[e.CONNECT=0]="CONNECT",e[e.DISCONNECT=1]="DISCONNECT",e[e.EVENT=2]="EVENT",e[e.ACK=3]="ACK",e[e.CONNECT_ERROR=4]="CONNECT_ERROR",e[e.BINARY_EVENT=5]="BINARY_EVENT",e[e.BINARY_ACK=6]="BINARY_ACK"}(r=t.PacketType||(t.PacketType={}));t.Encoder=class{encode(e){return o("encoding packet %j",e),e.type!==r.EVENT&&e.type!==r.ACK||!s.hasBinary(e)?[this.encodeAsString(e)]:(e.type=e.type===r.EVENT?r.BINARY_EVENT:r.BINARY_ACK,this.encodeAsBinary(e))}encodeAsString(e){let t=""+e.type;return e.type!==r.BINARY_EVENT&&e.type!==r.BINARY_ACK||(t+=e.attachments+"-"),e.nsp&&"/"!==e.nsp&&(t+=e.nsp+","),null!=e.id&&(t+=e.id),null!=e.data&&(t+=JSON.stringify(e.data)),o("encoded %j as %s",e,t),t}encodeAsBinary(e){const t=a.deconstructPacket(e),n=this.encodeAsString(t.packet),i=t.buffers;return i.unshift(n),i}};class c extends i{constructor(){super()}add(e){let t;if("string"==typeof e)t=this.decodeString(e),t.type===r.BINARY_EVENT||t.type===r.BINARY_ACK?(this.reconstructor=new p(t),0===t.attachments&&super.emit("decoded",t)):super.emit("decoded",t);else{if(!s.isBinary(e)&&!e.base64)throw new Error("Unknown type: "+e);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");t=this.reconstructor.takeBinaryData(e),t&&(this.reconstructor=null,super.emit("decoded",t))}}decodeString(e){let t=0;const n={type:Number(e.charAt(0))};if(void 0===r[n.type])throw new Error("unknown packet type "+n.type);if(n.type===r.BINARY_EVENT||n.type===r.BINARY_ACK){const i=t+1;for(;"-"!==e.charAt(++t)&&t!=e.length;);const a=e.substring(i,t);if(a!=Number(a)||"-"!==e.charAt(t))throw new Error("Illegal attachments");n.attachments=Number(a)}if("/"===e.charAt(t+1)){const i=t+1;for(;++t;){if(","===e.charAt(t))break;if(t===e.length)break}n.nsp=e.substring(i,t)}else n.nsp="/";const i=e.charAt(t+1);if(""!==i&&Number(i)==i){const i=t+1;for(;++t;){const n=e.charAt(t);if(null==n||Number(n)!=n){--t;break}if(t===e.length)break}n.id=Number(e.substring(i,t+1))}if(e.charAt(++t)){const i=function(e){try{return JSON.parse(e)}catch(e){return!1}}(e.substr(t));if(!c.isPayloadValid(n.type,i))throw new Error("invalid payload");n.data=i}return o("decoded %s as %j",e,n),n}static isPayloadValid(e,t){switch(e){case r.CONNECT:return"object"==typeof t;case r.DISCONNECT:return void 0===t;case r.CONNECT_ERROR:return"string"==typeof t||"object"==typeof t;case r.EVENT:case r.BINARY_EVENT:return Array.isArray(t)&&t.length>0;case r.ACK:case r.BINARY_ACK:return Array.isArray(t)}}destroy(){this.reconstructor&&this.reconstructor.finishedReconstruction()}}t.Decoder=c;class p{constructor(e){this.packet=e,this.buffers=[],this.reconPack=e}takeBinaryData(e){if(this.buffers.push(e),this.buffers.length===this.reconPack.attachments){const e=a.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),e}return null}finishedReconstruction(){this.reconPack=null,this.buffers=[]}}},2986:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.hasBinary=t.isBinary=void 0;const n="function"==typeof ArrayBuffer,i=Object.prototype.toString,a="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===i.call(Blob),s="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===i.call(File);function o(e){return n&&(e instanceof ArrayBuffer||(e=>"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(e):e.buffer instanceof ArrayBuffer)(e))||a&&e instanceof Blob||s&&e instanceof File}t.isBinary=o,t.hasBinary=function e(t,n){if(!t||"object"!=typeof t)return!1;if(Array.isArray(t)){for(let n=0,i=t.length;n<i;n++)if(e(t[n]))return!0;return!1}if(o(t))return!0;if(t.toJSON&&"function"==typeof t.toJSON&&1===arguments.length)return e(t.toJSON(),!0);for(const n in t)if(Object.prototype.hasOwnProperty.call(t,n)&&e(t[n]))return!0;return!1}},2555:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.RemoteSocket=t.BroadcastOperator=void 0;const i=n(7121),a=n(5485);class s{constructor(e,t=new Set,n=new Set,i={}){this.adapter=e,this.rooms=t,this.exceptRooms=n,this.flags=i}to(e){const t=new Set(this.rooms);return Array.isArray(e)?e.forEach((e=>t.add(e))):t.add(e),new s(this.adapter,t,this.exceptRooms,this.flags)}in(e){return this.to(e)}except(e){const t=new Set(this.exceptRooms);return Array.isArray(e)?e.forEach((e=>t.add(e))):t.add(e),new s(this.adapter,this.rooms,t,this.flags)}compress(e){const t=Object.assign({},this.flags,{compress:e});return new s(this.adapter,this.rooms,this.exceptRooms,t)}get volatile(){const e=Object.assign({},this.flags,{volatile:!0});return new s(this.adapter,this.rooms,this.exceptRooms,e)}get local(){const e=Object.assign({},this.flags,{local:!0});return new s(this.adapter,this.rooms,this.exceptRooms,e)}emit(e,...t){if(i.RESERVED_EVENTS.has(e))throw new Error(`"${e}" is a reserved event name`);const n=[e,...t],s={type:a.PacketType.EVENT,data:n};if("function"==typeof n[n.length-1])throw new Error("Callbacks are not supported when broadcasting");return this.adapter.broadcast(s,{rooms:this.rooms,except:this.exceptRooms,flags:this.flags}),!0}allSockets(){if(!this.adapter)throw new Error("No adapter for this namespace, are you trying to get the list of clients of a dynamic namespace?");return this.adapter.sockets(this.rooms)}fetchSockets(){return this.adapter.fetchSockets({rooms:this.rooms,except:this.exceptRooms}).then((e=>e.map((e=>e instanceof i.Socket?e:new o(this.adapter,e)))))}socketsJoin(e){this.adapter.addSockets({rooms:this.rooms,except:this.exceptRooms},Array.isArray(e)?e:[e])}socketsLeave(e){this.adapter.delSockets({rooms:this.rooms,except:this.exceptRooms},Array.isArray(e)?e:[e])}disconnectSockets(e=!1){this.adapter.disconnectSockets({rooms:this.rooms,except:this.exceptRooms},e)}}t.BroadcastOperator=s;class o{constructor(e,t){this.id=t.id,this.handshake=t.handshake,this.rooms=new Set(t.rooms),this.data=t.data,this.operator=new s(e,new Set([this.id]))}emit(e,...t){return this.operator.emit(e,...t)}join(e){return this.operator.socketsJoin(e)}leave(e){return this.operator.socketsLeave(e)}disconnect(e=!1){return this.operator.disconnectSockets(e),this}}t.RemoteSocket=o},2783:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Client=void 0;const i=n(5485),a=n(5158),s=n(8835),o=a("socket.io:client");t.Client=class{constructor(e,t){this.sockets=new Map,this.nsps=new Map,this.server=e,this.conn=t,this.encoder=e.encoder,this.decoder=new e._parser.Decoder,this.id=t.id,this.setup()}get request(){return this.conn.request}setup(){this.onclose=this.onclose.bind(this),this.ondata=this.ondata.bind(this),this.onerror=this.onerror.bind(this),this.ondecoded=this.ondecoded.bind(this),this.decoder.on("decoded",this.ondecoded),this.conn.on("data",this.ondata),this.conn.on("error",this.onerror),this.conn.on("close",this.onclose),this.connectTimeout=setTimeout((()=>{0===this.nsps.size?(o("no namespace joined yet, close the client"),this.close()):o("the client has already joined a namespace, nothing to do")}),this.server._connectTimeout)}connect(e,t={}){if(this.server._nsps.has(e))return o("connecting to namespace %s",e),this.doConnect(e,t);this.server._checkNamespace(e,t,(n=>{n?(o("dynamic namespace %s was created",n),this.doConnect(e,t)):(o("creation of namespace %s was denied",e),this._packet({type:i.PacketType.CONNECT_ERROR,nsp:e,data:{message:"Invalid namespace"}}))}))}doConnect(e,t){const n=this.server.of(e),i=n._add(this,t,(()=>{this.sockets.set(i.id,i),this.nsps.set(n.name,i),this.connectTimeout&&(clearTimeout(this.connectTimeout),this.connectTimeout=void 0)}))}_disconnect(){for(const e of this.sockets.values())e.disconnect();this.sockets.clear(),this.close()}_remove(e){if(this.sockets.has(e.id)){const t=this.sockets.get(e.id).nsp.name;this.sockets.delete(e.id),this.nsps.delete(t)}else o("ignoring remove for %s",e.id)}close(){"open"===this.conn.readyState&&(o("forcing transport close"),this.conn.close(),this.onclose("forced server close"))}_packet(e,t){t=t||{};const n=this;function i(e){if(!t.volatile||n.conn.transport.writable)for(let i=0;i<e.length;i++)n.conn.write(e[i],{compress:t.compress})}"open"===this.conn.readyState?(o("writing packet %j",e),t.preEncoded?i(e):i(this.encoder.encode(e))):o("ignoring packet write %j",e)}ondata(e){try{this.decoder.add(e)}catch(e){this.onerror(e)}}ondecoded(e){if(i.PacketType.CONNECT===e.type)if(3===this.conn.protocol){const t=s.parse(e.nsp,!0);this.connect(t.pathname,t.query)}else this.connect(e.nsp,e.data);else{const t=this.nsps.get(e.nsp);t?process.nextTick((function(){t._onpacket(e)})):o("no socket for namespace %s",e.nsp)}}onerror(e){for(const t of this.sockets.values())t._onerror(e);this.conn.close()}onclose(e){o("client close with reason %s",e),this.destroy();for(const t of this.sockets.values())t._onclose(e);this.sockets.clear(),this.decoder.destroy()}destroy(){this.conn.removeListener("data",this.ondata),this.conn.removeListener("error",this.onerror),this.conn.removeListener("close",this.onclose),this.decoder.removeListener("decoded",this.ondecoded),this.connectTimeout&&(clearTimeout(this.connectTimeout),this.connectTimeout=void 0)}}},2730:function(e,t,n){"use strict";var i=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&i(t,e,n);return a(t,e),t},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Namespace=t.Socket=t.Server=void 0;const r=n(8605),c=n(5747),p=n(8761),l=n(9078),u=n(2413),d=n(5622),m=n(2731),f=n(2783),h=n(8614),v=n(1984);Object.defineProperty(t,"Namespace",{enumerable:!0,get:function(){return v.Namespace}});const x=n(1255),g=n(7840),b=s(n(5485)),y=o(n(5158)),w=n(7121);Object.defineProperty(t,"Socket",{enumerable:!0,get:function(){return w.Socket}});const _=n(7257),k=y.default("socket.io:server"),E=n(7865).i8,j=/\.map/;class S extends _.StrictEventEmitter{constructor(e,t={}){super(),this._nsps=new Map,this.parentNsps=new Map,"object"==typeof e&&e instanceof Object&&!e.listen&&(t=e,e=void 0),this.path(t.path||"/socket.io"),this.connectTimeout(t.connectTimeout||45e3),this.serveClient(!1!==t.serveClient),this._parser=t.parser||b,this.encoder=new this._parser.Encoder,this.adapter(t.adapter||g.Adapter),this.sockets=this.of("/"),this.opts=t,e&&this.attach(e)}serveClient(e){return arguments.length?(this._serveClient=e,this):this._serveClient}_checkNamespace(e,t,n){if(0===this.parentNsps.size)return n(!1);const i=this.parentNsps.keys(),a=()=>{const s=i.next();if(s.done)return n(!1);s.value(e,t,((t,i)=>{t||!i?a():n(this.parentNsps.get(s.value).createChild(e))}))};a()}path(e){if(!arguments.length)return this._path;this._path=e.replace(/\/$/,"");const t=this._path.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&");return this.clientPathRegex=new RegExp("^"+t+"/socket\\.io(\\.min|\\.msgpack\\.min)?\\.js(\\.map)?$"),this}connectTimeout(e){return void 0===e?this._connectTimeout:(this._connectTimeout=e,this)}adapter(e){if(!arguments.length)return this._adapter;this._adapter=e;for(const e of this._nsps.values())e._initAdapter();return this}listen(e,t={}){return this.attach(e,t)}attach(e,t={}){if("function"==typeof e){throw new Error("You are trying to attach socket.io to an express request handler function. Please pass a http.Server instance.")}if(Number(e)==e&&(e=Number(e)),"number"==typeof e){k("creating http server and binding to %d",e);const t=e;(e=r.createServer(((e,t)=>{t.writeHead(404),t.end()}))).listen(t)}return Object.assign(t,this.opts),t.path=t.path||this._path,this.initEngine(e,t),this}initEngine(e,t){k("creating engine.io instance with opts %j",t),this.eio=m.attach(e,t),this._serveClient&&this.attachServe(e),this.httpServer=e,this.bind(this.eio)}attachServe(e){k("attaching client serving req handler");const t=e.listeners("request").slice(0);e.removeAllListeners("request"),e.on("request",((n,i)=>{if(this.clientPathRegex.test(n.url))this.serve(n,i);else for(let a=0;a<t.length;a++)t[a].call(e,n,i)}))}serve(e,t){const n=e.url.replace(this._path,""),i=j.test(n),a=i?"map":"source",s='"'+E+'"',o="W/"+s,r=e.headers["if-none-match"];if(r&&(s===r||o===r))return k("serve client %s 304",a),t.writeHead(304),void t.end();k("serve client %s",a),t.setHeader("Cache-Control","public, max-age=0"),t.setHeader("Content-Type","application/"+(i?"json":"javascript")),t.setHeader("ETag",s),i||t.setHeader("X-SourceMap",n.substring(1)+".map"),S.sendFile(n,e,t)}static sendFile(e,t,n){const i=c.createReadStream(d.join(__dirname,"../client-dist/",e)),a=e=>{e&&n.end()};switch(l(t).encodings(["br","gzip","deflate"])){case"br":n.writeHead(200,{"content-encoding":"br"}),i.pipe(p.createBrotliCompress()).pipe(n),u.pipeline(i,p.createBrotliCompress(),n,a);break;case"gzip":n.writeHead(200,{"content-encoding":"gzip"}),u.pipeline(i,p.createGzip(),n,a);break;case"deflate":n.writeHead(200,{"content-encoding":"deflate"}),u.pipeline(i,p.createDeflate(),n,a);break;default:n.writeHead(200),u.pipeline(i,n,a)}}bind(e){return this.engine=e,this.engine.on("connection",this.onconnection.bind(this)),this}onconnection(e){k("incoming connection with id %s",e.id);const t=new f.Client(this,e);return 3===e.protocol&&t.connect("/"),this}of(e,t){if("function"==typeof e||e instanceof RegExp){const n=new x.ParentNamespace(this);return k("initializing parent namespace %s",n.name),"function"==typeof e?this.parentNsps.set(e,n):this.parentNsps.set(((t,n,i)=>i(null,e.test(t))),n),t&&n.on("connect",t),n}"/"!==String(e)[0]&&(e="/"+e);let n=this._nsps.get(e);return n||(k("initializing namespace %s",e),n=new v.Namespace(this,e),this._nsps.set(e,n)),t&&n.on("connect",t),n}close(e){for(const e of this.sockets.sockets.values())e._onclose("server shutting down");this.engine.close(),this.httpServer?this.httpServer.close(e):e&&e()}use(e){return this.sockets.use(e),this}to(e){return this.sockets.to(e)}in(e){return this.sockets.in(e)}except(e){return this.sockets.except(e),this}send(...e){return this.sockets.emit("message",...e),this}write(...e){return this.sockets.emit("message",...e),this}allSockets(){return this.sockets.allSockets()}compress(e){return this.sockets.compress(e)}get volatile(){return this.sockets.volatile}get local(){return this.sockets.local}fetchSockets(){return this.sockets.fetchSockets()}socketsJoin(e){return this.sockets.socketsJoin(e)}socketsLeave(e){return this.sockets.socketsLeave(e)}disconnectSockets(e=!1){return this.sockets.disconnectSockets(e)}}t.Server=S;Object.keys(h.EventEmitter.prototype).filter((function(e){return"function"==typeof h.EventEmitter.prototype[e]})).forEach((function(e){S.prototype[e]=function(){return this.sockets[e].apply(this.sockets,arguments)}})),e.exports=(e,t)=>new S(e,t),e.exports.Server=S},1984:function(e,t,n){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Namespace=void 0;const a=n(7121),s=n(7257),o=i(n(5158)),r=n(2555),c=o.default("socket.io:namespace");class p extends s.StrictEventEmitter{constructor(e,t){super(),this.sockets=new Map,this._fns=[],this._ids=0,this.server=e,this.name=t,this._initAdapter()}_initAdapter(){this.adapter=new(this.server.adapter())(this)}use(e){return this._fns.push(e),this}run(e,t){const n=this._fns.slice(0);if(!n.length)return t(null);!function i(a){n[a](e,(function(e){return e?t(e):n[a+1]?void i(a+1):t(null)}))}(0)}to(e){return new r.BroadcastOperator(this.adapter).to(e)}in(e){return new r.BroadcastOperator(this.adapter).in(e)}except(e){return new r.BroadcastOperator(this.adapter).except(e)}_add(e,t,n){c("adding socket to nsp %s",this.name);const i=new a.Socket(this,e,t);return this.run(i,(t=>{process.nextTick((()=>{if("open"==e.conn.readyState){if(t)return 3===e.conn.protocol?i._error(t.data||t.message):i._error({message:t.message,data:t.data});this.sockets.set(i.id,i),i._onconnect(),n&&n(),this.emitReserved("connect",i),this.emitReserved("connection",i)}else c("next called after client was closed - ignoring socket")}))})),i}_remove(e){this.sockets.has(e.id)?this.sockets.delete(e.id):c("ignoring remove for %s",e.id)}emit(e,...t){return new r.BroadcastOperator(this.adapter).emit(e,...t)}send(...e){return this.emit("message",...e),this}write(...e){return this.emit("message",...e),this}allSockets(){return new r.BroadcastOperator(this.adapter).allSockets()}compress(e){return new r.BroadcastOperator(this.adapter).compress(e)}get volatile(){return new r.BroadcastOperator(this.adapter).volatile}get local(){return new r.BroadcastOperator(this.adapter).local}fetchSockets(){return new r.BroadcastOperator(this.adapter).fetchSockets()}socketsJoin(e){return new r.BroadcastOperator(this.adapter).socketsJoin(e)}socketsLeave(e){return new r.BroadcastOperator(this.adapter).socketsLeave(e)}disconnectSockets(e=!1){return new r.BroadcastOperator(this.adapter).disconnectSockets(e)}}t.Namespace=p},1255:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ParentNamespace=void 0;const i=n(1984);class a extends i.Namespace{constructor(e){super(e,"/_"+a.count++),this.children=new Set}_initAdapter(){this.adapter={broadcast:(e,t)=>{this.children.forEach((n=>{n.adapter.broadcast(e,t)}))}}}emit(e,...t){return this.children.forEach((n=>{n.emit(e,...t)})),!0}createChild(e){const t=new i.Namespace(this.server,e);return t._fns=this._fns.slice(0),this.listeners("connect").forEach((e=>t.on("connect",e))),this.listeners("connection").forEach((e=>t.on("connection",e))),this.children.add(t),this.server._nsps.set(e,t),t}}t.ParentNamespace=a,a.count=0},7121:function(e,t,n){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Socket=t.RESERVED_EVENTS=void 0;const a=n(5485),s=n(8835),o=i(n(5158)),r=n(7257),c=i(n(7936)),p=n(2555),l=o.default("socket.io:socket");t.RESERVED_EVENTS=new Set(["connect","connect_error","disconnect","disconnecting","newListener","removeListener"]);class u extends r.StrictEventEmitter{constructor(e,t,n){super(),this.nsp=e,this.client=t,this.data={},this.acks=new Map,this.fns=[],this.flags={},this.server=e.server,this.adapter=this.nsp.adapter,3===t.conn.protocol?this.id="/"!==e.name?e.name+"#"+t.id:t.id:this.id=c.default.generateId(),this.connected=!0,this.disconnected=!1,this.handshake=this.buildHandshake(n)}buildHandshake(e){return{headers:this.request.headers,time:new Date+"",address:this.conn.remoteAddress,xdomain:!!this.request.headers.origin,secure:!!this.request.connection.encrypted,issued:+new Date,url:this.request.url,query:s.parse(this.request.url,!0).query,auth:e}}emit(e,...n){if(t.RESERVED_EVENTS.has(e))throw new Error(`"${e}" is a reserved event name`);const i=[e,...n],s={type:a.PacketType.EVENT,data:i};"function"==typeof i[i.length-1]&&(l("emitting packet with ack id %d",this.nsp._ids),this.acks.set(this.nsp._ids,i.pop()),s.id=this.nsp._ids++);const o=Object.assign({},this.flags);return this.flags={},this.packet(s,o),!0}to(e){return this.newBroadcastOperator().to(e)}in(e){return this.newBroadcastOperator().in(e)}except(e){return this.newBroadcastOperator().except(e)}send(...e){return this.emit("message",...e),this}write(...e){return this.emit("message",...e),this}packet(e,t={}){e.nsp=this.nsp.name,t.compress=!1!==t.compress,this.client._packet(e,t)}join(e){return l("join room %s",e),this.adapter.addAll(this.id,new Set(Array.isArray(e)?e:[e]))}leave(e){return l("leave room %s",e),this.adapter.del(this.id,e)}leaveAll(){this.adapter.delAll(this.id)}_onconnect(){l("socket connected - writing packet"),this.join(this.id),3===this.conn.protocol?this.packet({type:a.PacketType.CONNECT}):this.packet({type:a.PacketType.CONNECT,data:{sid:this.id}})}_onpacket(e){switch(l("got packet %j",e),e.type){case a.PacketType.EVENT:case a.PacketType.BINARY_EVENT:this.onevent(e);break;case a.PacketType.ACK:case a.PacketType.BINARY_ACK:this.onack(e);break;case a.PacketType.DISCONNECT:this.ondisconnect();break;case a.PacketType.CONNECT_ERROR:this._onerror(new Error(e.data))}}onevent(e){const t=e.data||[];if(l("emitting event %j",t),null!=e.id&&(l("attaching ack callback to event"),t.push(this.ack(e.id))),this._anyListeners&&this._anyListeners.length){const e=this._anyListeners.slice();for(const n of e)n.apply(this,t)}this.dispatch(t)}ack(e){const t=this;let n=!1;return function(){if(n)return;const i=Array.prototype.slice.call(arguments);l("sending ack %j",i),t.packet({id:e,type:a.PacketType.ACK,data:i}),n=!0}}onack(e){const t=this.acks.get(e.id);"function"==typeof t?(l("calling ack %s with %j",e.id,e.data),t.apply(this,e.data),this.acks.delete(e.id)):l("bad ack %s",e.id)}ondisconnect(){l("got disconnect packet"),this._onclose("client namespace disconnect")}_onerror(e){this.listeners("error").length?this.emitReserved("error",e):(console.error("Missing error handler on `socket`."),console.error(e.stack))}_onclose(e){if(!this.connected)return this;l("closing socket - reason %s",e),this.emitReserved("disconnecting",e),this.leaveAll(),this.nsp._remove(this),this.client._remove(this),this.connected=!1,this.disconnected=!0,this.emitReserved("disconnect",e)}_error(e){this.packet({type:a.PacketType.CONNECT_ERROR,data:e})}disconnect(e=!1){return this.connected?(e?this.client._disconnect():(this.packet({type:a.PacketType.DISCONNECT}),this._onclose("server namespace disconnect")),this):this}compress(e){return this.flags.compress=e,this}get volatile(){return this.flags.volatile=!0,this}get broadcast(){return this.newBroadcastOperator()}get local(){return this.newBroadcastOperator().local}dispatch(e){l("dispatching an event %j",e),this.run(e,(t=>{process.nextTick((()=>{if(t)return this._onerror(t);this.connected?super.emitUntyped.apply(this,e):l("ignore packet received after disconnection")}))}))}use(e){return this.fns.push(e),this}run(e,t){const n=this.fns.slice(0);if(!n.length)return t(null);!function i(a){n[a](e,(function(e){return e?t(e):n[a+1]?void i(a+1):t(null)}))}(0)}get request(){return this.client.request}get conn(){return this.client.conn}get rooms(){return this.adapter.socketRooms(this.id)||new Set}onAny(e){return this._anyListeners=this._anyListeners||[],this._anyListeners.push(e),this}prependAny(e){return this._anyListeners=this._anyListeners||[],this._anyListeners.unshift(e),this}offAny(e){if(!this._anyListeners)return this;if(e){const t=this._anyListeners;for(let n=0;n<t.length;n++)if(e===t[n])return t.splice(n,1),this}else this._anyListeners=[];return this}listenersAny(){return this._anyListeners||[]}newBroadcastOperator(){const e=Object.assign({},this.flags);return this.flags={},new p.BroadcastOperator(this.adapter,new Set,new Set([this.id]),e)}}t.Socket=u},7257:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.StrictEventEmitter=void 0;const i=n(8614);class a extends i.EventEmitter{on(e,t){return super.on(e,t)}once(e,t){return super.once(e,t)}emit(e,...t){return super.emit(e,...t)}emitReserved(e,...t){return super.emit(e,...t)}emitUntyped(e,...t){return super.emit(e,...t)}listeners(e){return super.listeners(e)}}t.StrictEventEmitter=a},7865:e=>{"use strict";e.exports={i8:"4.0.1"}},2130:(e,t,n)=>{"use strict";const i=n(2087),a=n(3867),s=n(6560),{env:o}=process;let r;function c(e){return 0!==e&&{level:e,hasBasic:!0,has256:e>=2,has16m:e>=3}}function p(e,t){if(0===r)return 0;if(s("color=16m")||s("color=full")||s("color=truecolor"))return 3;if(s("color=256"))return 2;if(e&&!t&&void 0===r)return 0;const n=r||0;if("dumb"===o.TERM)return n;if("win32"===process.platform){const e=i.release().split(".");return Number(e[0])>=10&&Number(e[2])>=10586?Number(e[2])>=14931?3:2:1}if("CI"in o)return["TRAVIS","CIRCLECI","APPVEYOR","GITLAB_CI","GITHUB_ACTIONS","BUILDKITE"].some((e=>e in o))||"codeship"===o.CI_NAME?1:n;if("TEAMCITY_VERSION"in o)return/^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(o.TEAMCITY_VERSION)?1:0;if("truecolor"===o.COLORTERM)return 3;if("TERM_PROGRAM"in o){const e=parseInt((o.TERM_PROGRAM_VERSION||"").split(".")[0],10);switch(o.TERM_PROGRAM){case"iTerm.app":return e>=3?3:2;case"Apple_Terminal":return 2}}return/-256(color)?$/i.test(o.TERM)?2:/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(o.TERM)||"COLORTERM"in o?1:n}s("no-color")||s("no-colors")||s("color=false")||s("color=never")?r=0:(s("color")||s("colors")||s("color=true")||s("color=always"))&&(r=1),"FORCE_COLOR"in o&&(r="true"===o.FORCE_COLOR?1:"false"===o.FORCE_COLOR?0:0===o.FORCE_COLOR.length?1:Math.min(parseInt(o.FORCE_COLOR,10),3)),e.exports={supportsColor:function(e){return c(p(e,e&&e.isTTY))},stdout:c(p(!0,a.isatty(1))),stderr:c(p(!0,a.isatty(2)))}},3516:function(e,t,n){"use strict";var i=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),a=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||i(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),a(n(6904),t),a(n(2537),t),a(n(8678),t),a(n(6416),t),a(n(1049),t)},6416:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},1049:function(e,t,n){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.BinanceService=void 0;const a=i(n(9669)),s=n(8678);class o{constructor(){this.fetchDepth=async e=>{let t=await a.default.get(o.endpoint,{params:e});return new s.OrderBookResponse(t.data).data()},this.fetchDepthStream=async e=>new Promise(((t,n)=>{e.on("diff_depth_stream",(e=>{let n=new s.OrderBookResponse(JSON.parse(e));t(n.data())}))}))}}t.BinanceService=o,o.endpoint="https://api.binance.com/api/v3/depth"},6904:(e,t)=>{"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.IndexSymbolUtils=t.IndexSymbolEnum=void 0,function(e){e[e.BTCUSDT=0]="BTCUSDT",e[e.BNBBTC=1]="BNBBTC",e[e.ETHBTC=2]="ETHBTC"}(n=t.IndexSymbolEnum||(t.IndexSymbolEnum={})),function(e){e.enumToArr=()=>{const e=[];for(const[t,i]of Object.entries(n))Number.isNaN(Number(t))&&e.push(t);return e},e.enumToStr=e=>n[e]}(t.IndexSymbolUtils||(t.IndexSymbolUtils={}))},2537:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.OrderResponse=void 0;t.OrderResponse=class{constructor(e){this.price_=0,this.quantity_=0,this.price_=parseFloat(e[0]),this.quantity_=parseFloat(e[1])}get price(){return this.price_}get quantity(){return this.quantity_}get total(){return Number((this.price_*this.quantity_).toFixed(8))}}},8678:function(e,t,n){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.OrderBookResponse=t.initialOrderBook=void 0;const a=i(n(2718)),s=n(2537);t.initialOrderBook={bids:[{quantity:0,price:0}],asks:[{quantity:0,price:0}]};t.OrderBookResponse=class{constructor(e){this.orderbookResponse_={bids:[],asks:[]},this.parseOrder_=(e,t)=>{const n=Object.keys(e);for(let i of n){const n=a.default.find(t,(e=>e===i));if(void 0!==n)for(let i of e[n])this.orderbookResponse_[t[0]].push(new s.OrderResponse(i))}},this.parseOrder_(e,["bids","b"]),this.parseOrder_(e,["asks","a"]),this.orderbookResponse_.lastUpdateId=e.lastUpdateId}data(){return this.orderbookResponse_}}},3094:function(e,t,n){"use strict";var i=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&i(t,e,n);return a(t,e),t},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.WebServer=void 0;const r=s(n(2718)),c=o(n(5747)),p=o(n(5622)),l=s(n(8605)),u=o(n(8777)),d=n(8614),m=o(n(2730)),f=n(3516),h=n(2299);function v(e,t){const n=new u.default(`wss://stream.binance.com:9443/ws/${e}@depth@1000ms`,{headers:{"Access-Control-Allow-Origin":"*"}});return n.onclose=t,n.onopen=e=>{console.log("WebSocket connected to Binance")},n}class x{setCSP_(e){e.setHeader("Content-Security-Policy","connect-src 'self' https://api.binance.com/ wss://stream.binance.com:9443/;default-src 'self' http://verdancy.herokuapp.com/;script-src 'self' http://verdancy.herokuapp.com/;style-src 'self' http://verdancy.herokuapp.com/ https://fonts.googleapis.com/ 'unsafe-inline';font-src 'self' https://fonts.gstatic.com/;img-src 'self';frame-src 'self';")}addStaticPath_(e,t,n){let i="."+e.url;if(r.contains(i.split("/"),"dist")){let e="text/html";switch(p.default.extname(i)){case".js":e="text/javascript";break;case".css":e="text/css";break;case".json":e="application/json"}t.writeHead(200,{"Content-type":e}),t.end(c.default.readFileSync(p.default.resolve(process.cwd(),n,p.default.parse(i).base),{encoding:"utf8"}))}}process(e,t){if(this.setCSP_(t),this.addStaticPath_(e,t,h.paths.output.dist),"/"===e.url&&c.default.existsSync(p.default.resolve(process.cwd(),h.paths.output.base))){var n=c.default.readFileSync(p.default.resolve(process.cwd(),h.paths.output.base,"index.html"),{encoding:"utf8"});t.writeHead(200,{"Content-type":"text/html"}),t.end(n)}if("/about"===e.url&&c.default.existsSync(p.default.resolve(process.cwd(),h.paths.output.base))){n=c.default.readFileSync(p.default.resolve(process.cwd(),h.paths.output.base,"index.html"),{encoding:"utf8"});t.writeHead(200,{"Content-type":"text/html"}),t.end(n)}}}class g extends d.EventEmitter{constructor(e){super(),this.port=e,this.serv_=new x,this.httpserver=l.createServer(((e,t)=>{this.serv_.process(e,t)}))}async listen(){await new Promise((e=>{!function(e){const t=new m.default.Server(e,{path:"/socket.io"});let n=v(f.IndexSymbolUtils.enumToStr(f.IndexSymbolEnum.BTCUSDT).toLowerCase(),(e=>{console.log("WebSocket disconnected from Binance")}));t.on("connection",(e=>{n.onmessage=t=>{e.emit("diff_depth_stream",t.data)},e.on("diff_depth_stream__update_symbol",(e=>{n.close(),n=v(e.symbol.toLowerCase(),(e=>{console.log("WebSocket disconnected from Binance")}))})),e.on("disconnect",(()=>{}))}))}(this.httpserver.listen(this.port,(()=>{e()})))})),this.emit("listening")}async close(){await new Promise((e=>{this.httpserver.listening&&this.httpserver.close((()=>{e()}))}))}}t.WebServer=g},7775:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});var n="1.13.1",i="object"==typeof self&&self.self===self&&self||"object"==typeof global&&global.global===global&&global||Function("return this")()||{},a=Array.prototype,s=Object.prototype,o="undefined"!=typeof Symbol?Symbol.prototype:null,r=a.push,c=a.slice,p=s.toString,l=s.hasOwnProperty,u="undefined"!=typeof ArrayBuffer,d="undefined"!=typeof DataView,m=Array.isArray,f=Object.keys,h=Object.create,v=u&&ArrayBuffer.isView,x=isNaN,g=isFinite,b=!{toString:null}.propertyIsEnumerable("toString"),y=["valueOf","isPrototypeOf","toString","propertyIsEnumerable","hasOwnProperty","toLocaleString"],w=Math.pow(2,53)-1;function _(e,t){return t=null==t?e.length-1:+t,function(){for(var n=Math.max(arguments.length-t,0),i=Array(n),a=0;a<n;a++)i[a]=arguments[a+t];switch(t){case 0:return e.call(this,i);case 1:return e.call(this,arguments[0],i);case 2:return e.call(this,arguments[0],arguments[1],i)}var s=Array(t+1);for(a=0;a<t;a++)s[a]=arguments[a];return s[t]=i,e.apply(this,s)}}function k(e){var t=typeof e;return"function"===t||"object"===t&&!!e}function E(e){return null===e}function j(e){return void 0===e}function S(e){return!0===e||!1===e||"[object Boolean]"===p.call(e)}function C(e){return!(!e||1!==e.nodeType)}function O(e){var t="[object "+e+"]";return function(e){return p.call(e)===t}}var T=O("String"),B=O("Number"),R=O("Date"),A=O("RegExp"),N=O("Error"),q=O("Symbol"),P=O("ArrayBuffer"),L=O("Function"),I=i.document&&i.document.childNodes;"object"!=typeof Int8Array&&"function"!=typeof I&&(L=function(e){return"function"==typeof e||!1});var F=L,U=O("Object"),M=d&&U(new DataView(new ArrayBuffer(8))),z="undefined"!=typeof Map&&U(new Map),D=O("DataView");var V=M?function(e){return null!=e&&F(e.getInt8)&&P(e.buffer)}:D,W=m||O("Array");function $(e,t){return null!=e&&l.call(e,t)}var H=O("Arguments");!function(){H(arguments)||(H=function(e){return $(e,"callee")})}();var G=H;function Y(e){return!q(e)&&g(e)&&!isNaN(parseFloat(e))}function K(e){return B(e)&&x(e)}function J(e){return function(){return e}}function X(e){return function(t){var n=e(t);return"number"==typeof n&&n>=0&&n<=w}}function Z(e){return function(t){return null==t?void 0:t[e]}}var Q=Z("byteLength"),ee=X(Q),te=/\[object ((I|Ui)nt(8|16|32)|Float(32|64)|Uint8Clamped|Big(I|Ui)nt64)Array\]/;var ne=u?function(e){return v?v(e)&&!V(e):ee(e)&&te.test(p.call(e))}:J(!1),ie=Z("length");function ae(e,t){t=function(e){for(var t={},n=e.length,i=0;i<n;++i)t[e[i]]=!0;return{contains:function(e){return t[e]},push:function(n){return t[n]=!0,e.push(n)}}}(t);var n=y.length,i=e.constructor,a=F(i)&&i.prototype||s,o="constructor";for($(e,o)&&!t.contains(o)&&t.push(o);n--;)(o=y[n])in e&&e[o]!==a[o]&&!t.contains(o)&&t.push(o)}function se(e){if(!k(e))return[];if(f)return f(e);var t=[];for(var n in e)$(e,n)&&t.push(n);return b&&ae(e,t),t}function oe(e){if(null==e)return!0;var t=ie(e);return"number"==typeof t&&(W(e)||T(e)||G(e))?0===t:0===ie(se(e))}function re(e,t){var n=se(t),i=n.length;if(null==e)return!i;for(var a=Object(e),s=0;s<i;s++){var o=n[s];if(t[o]!==a[o]||!(o in a))return!1}return!0}function ce(e){return e instanceof ce?e:this instanceof ce?void(this._wrapped=e):new ce(e)}function pe(e){return new Uint8Array(e.buffer||e,e.byteOffset||0,Q(e))}ce.VERSION=n,ce.prototype.value=function(){return this._wrapped},ce.prototype.valueOf=ce.prototype.toJSON=ce.prototype.value,ce.prototype.toString=function(){return String(this._wrapped)};var le="[object DataView]";function ue(e,t,n,i){if(e===t)return 0!==e||1/e==1/t;if(null==e||null==t)return!1;if(e!=e)return t!=t;var a=typeof e;return("function"===a||"object"===a||"object"==typeof t)&&de(e,t,n,i)}function de(e,t,n,i){e instanceof ce&&(e=e._wrapped),t instanceof ce&&(t=t._wrapped);var a=p.call(e);if(a!==p.call(t))return!1;if(M&&"[object Object]"==a&&V(e)){if(!V(t))return!1;a=le}switch(a){case"[object RegExp]":case"[object String]":return""+e==""+t;case"[object Number]":return+e!=+e?+t!=+t:0==+e?1/+e==1/t:+e==+t;case"[object Date]":case"[object Boolean]":return+e==+t;case"[object Symbol]":return o.valueOf.call(e)===o.valueOf.call(t);case"[object ArrayBuffer]":case le:return de(pe(e),pe(t),n,i)}var s="[object Array]"===a;if(!s&&ne(e)){if(Q(e)!==Q(t))return!1;if(e.buffer===t.buffer&&e.byteOffset===t.byteOffset)return!0;s=!0}if(!s){if("object"!=typeof e||"object"!=typeof t)return!1;var r=e.constructor,c=t.constructor;if(r!==c&&!(F(r)&&r instanceof r&&F(c)&&c instanceof c)&&"constructor"in e&&"constructor"in t)return!1}i=i||[];for(var l=(n=n||[]).length;l--;)if(n[l]===e)return i[l]===t;if(n.push(e),i.push(t),s){if((l=e.length)!==t.length)return!1;for(;l--;)if(!ue(e[l],t[l],n,i))return!1}else{var u,d=se(e);if(l=d.length,se(t).length!==l)return!1;for(;l--;)if(!$(t,u=d[l])||!ue(e[u],t[u],n,i))return!1}return n.pop(),i.pop(),!0}function me(e,t){return ue(e,t)}function fe(e){if(!k(e))return[];var t=[];for(var n in e)t.push(n);return b&&ae(e,t),t}function he(e){var t=ie(e);return function(n){if(null==n)return!1;var i=fe(n);if(ie(i))return!1;for(var a=0;a<t;a++)if(!F(n[e[a]]))return!1;return e!==ye||!F(n[ve])}}var ve="forEach",xe=["clear","delete"],ge=["get","has","set"],be=xe.concat(ve,ge),ye=xe.concat(ge),we=["add"].concat(xe,ve,"has"),_e=z?he(be):O("Map"),ke=z?he(ye):O("WeakMap"),Ee=z?he(we):O("Set"),je=O("WeakSet");function Se(e){for(var t=se(e),n=t.length,i=Array(n),a=0;a<n;a++)i[a]=e[t[a]];return i}function Ce(e){for(var t=se(e),n=t.length,i=Array(n),a=0;a<n;a++)i[a]=[t[a],e[t[a]]];return i}function Oe(e){for(var t={},n=se(e),i=0,a=n.length;i<a;i++)t[e[n[i]]]=n[i];return t}function Te(e){var t=[];for(var n in e)F(e[n])&&t.push(n);return t.sort()}function Be(e,t){return function(n){var i=arguments.length;if(t&&(n=Object(n)),i<2||null==n)return n;for(var a=1;a<i;a++)for(var s=arguments[a],o=e(s),r=o.length,c=0;c<r;c++){var p=o[c];t&&void 0!==n[p]||(n[p]=s[p])}return n}}var Re=Be(fe),Ae=Be(se),Ne=Be(fe,!0);function qe(e){if(!k(e))return{};if(h)return h(e);var t=function(){};t.prototype=e;var n=new t;return t.prototype=null,n}function Pe(e,t){var n=qe(e);return t&&Ae(n,t),n}function Le(e){return k(e)?W(e)?e.slice():Re({},e):e}function Ie(e,t){return t(e),e}function Fe(e){return W(e)?e:[e]}function Ue(e){return ce.toPath(e)}function Me(e,t){for(var n=t.length,i=0;i<n;i++){if(null==e)return;e=e[t[i]]}return n?e:void 0}function ze(e,t,n){var i=Me(e,Ue(t));return j(i)?n:i}function De(e,t){for(var n=(t=Ue(t)).length,i=0;i<n;i++){var a=t[i];if(!$(e,a))return!1;e=e[a]}return!!n}function Ve(e){return e}function We(e){return e=Ae({},e),function(t){return re(t,e)}}function $e(e){return e=Ue(e),function(t){return Me(t,e)}}function He(e,t,n){if(void 0===t)return e;switch(null==n?3:n){case 1:return function(n){return e.call(t,n)};case 3:return function(n,i,a){return e.call(t,n,i,a)};case 4:return function(n,i,a,s){return e.call(t,n,i,a,s)}}return function(){return e.apply(t,arguments)}}function Ge(e,t,n){return null==e?Ve:F(e)?He(e,t,n):k(e)&&!W(e)?We(e):$e(e)}function Ye(e,t){return Ge(e,t,1/0)}function Ke(e,t,n){return ce.iteratee!==Ye?ce.iteratee(e,t):Ge(e,t,n)}function Je(e,t,n){t=Ke(t,n);for(var i=se(e),a=i.length,s={},o=0;o<a;o++){var r=i[o];s[r]=t(e[r],r,e)}return s}function Xe(){}function Ze(e){return null==e?Xe:function(t){return ze(e,t)}}function Qe(e,t,n){var i=Array(Math.max(0,e));t=He(t,n,1);for(var a=0;a<e;a++)i[a]=t(a);return i}function et(e,t){return null==t&&(t=e,e=0),e+Math.floor(Math.random()*(t-e+1))}ce.toPath=Fe,ce.iteratee=Ye;var tt=Date.now||function(){return(new Date).getTime()};function nt(e){var t=function(t){return e[t]},n="(?:"+se(e).join("|")+")",i=RegExp(n),a=RegExp(n,"g");return function(e){return e=null==e?"":""+e,i.test(e)?e.replace(a,t):e}}var it={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},at=nt(it),st=nt(Oe(it)),ot=ce.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g},rt=/(.)^/,ct={"'":"'","\\":"\\","\r":"r","\n":"n","\u2028":"u2028","\u2029":"u2029"},pt=/\\|'|\r|\n|\u2028|\u2029/g;function lt(e){return"\\"+ct[e]}var ut=/^\s*(\w|\$)+\s*$/;function dt(e,t,n){!t&&n&&(t=n),t=Ne({},t,ce.templateSettings);var i=RegExp([(t.escape||rt).source,(t.interpolate||rt).source,(t.evaluate||rt).source].join("|")+"|$","g"),a=0,s="__p+='";e.replace(i,(function(t,n,i,o,r){return s+=e.slice(a,r).replace(pt,lt),a=r+t.length,n?s+="'+\n((__t=("+n+"))==null?'':_.escape(__t))+\n'":i?s+="'+\n((__t=("+i+"))==null?'':__t)+\n'":o&&(s+="';\n"+o+"\n__p+='"),t})),s+="';\n";var o,r=t.variable;if(r){if(!ut.test(r))throw new Error("variable is not a bare identifier: "+r)}else s="with(obj||{}){\n"+s+"}\n",r="obj";s="var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n"+s+"return __p;\n";try{o=new Function(r,"_",s)}catch(e){throw e.source=s,e}var c=function(e){return o.call(this,e,ce)};return c.source="function("+r+"){\n"+s+"}",c}function mt(e,t,n){var i=(t=Ue(t)).length;if(!i)return F(n)?n.call(e):n;for(var a=0;a<i;a++){var s=null==e?void 0:e[t[a]];void 0===s&&(s=n,a=i),e=F(s)?s.call(e):s}return e}var ft=0;function ht(e){var t=++ft+"";return e?e+t:t}function vt(e){var t=ce(e);return t._chain=!0,t}function xt(e,t,n,i,a){if(!(i instanceof t))return e.apply(n,a);var s=qe(e.prototype),o=e.apply(s,a);return k(o)?o:s}var gt=_((function(e,t){var n=gt.placeholder,i=function(){for(var a=0,s=t.length,o=Array(s),r=0;r<s;r++)o[r]=t[r]===n?arguments[a++]:t[r];for(;a<arguments.length;)o.push(arguments[a++]);return xt(e,i,this,this,o)};return i}));gt.placeholder=ce;var bt=_((function(e,t,n){if(!F(e))throw new TypeError("Bind must be called on a function");var i=_((function(a){return xt(e,i,t,this,n.concat(a))}));return i})),yt=X(ie);function wt(e,t,n,i){if(i=i||[],t||0===t){if(t<=0)return i.concat(e)}else t=1/0;for(var a=i.length,s=0,o=ie(e);s<o;s++){var r=e[s];if(yt(r)&&(W(r)||G(r)))if(t>1)wt(r,t-1,n,i),a=i.length;else for(var c=0,p=r.length;c<p;)i[a++]=r[c++];else n||(i[a++]=r)}return i}var _t=_((function(e,t){var n=(t=wt(t,!1,!1)).length;if(n<1)throw new Error("bindAll must be passed function names");for(;n--;){var i=t[n];e[i]=bt(e[i],e)}return e}));function kt(e,t){var n=function(i){var a=n.cache,s=""+(t?t.apply(this,arguments):i);return $(a,s)||(a[s]=e.apply(this,arguments)),a[s]};return n.cache={},n}var Et=_((function(e,t,n){return setTimeout((function(){return e.apply(null,n)}),t)})),jt=gt(Et,ce,1);function St(e,t,n){var i,a,s,o,r=0;n||(n={});var c=function(){r=!1===n.leading?0:tt(),i=null,o=e.apply(a,s),i||(a=s=null)},p=function(){var p=tt();r||!1!==n.leading||(r=p);var l=t-(p-r);return a=this,s=arguments,l<=0||l>t?(i&&(clearTimeout(i),i=null),r=p,o=e.apply(a,s),i||(a=s=null)):i||!1===n.trailing||(i=setTimeout(c,l)),o};return p.cancel=function(){clearTimeout(i),r=0,i=a=s=null},p}function Ct(e,t,n){var i,a,s,o,r,c=function(){var p=tt()-a;t>p?i=setTimeout(c,t-p):(i=null,n||(o=e.apply(r,s)),i||(s=r=null))},p=_((function(p){return r=this,s=p,a=tt(),i||(i=setTimeout(c,t),n&&(o=e.apply(r,s))),o}));return p.cancel=function(){clearTimeout(i),i=s=r=null},p}function Ot(e,t){return gt(t,e)}function Tt(e){return function(){return!e.apply(this,arguments)}}function Bt(){var e=arguments,t=e.length-1;return function(){for(var n=t,i=e[t].apply(this,arguments);n--;)i=e[n].call(this,i);return i}}function Rt(e,t){return function(){if(--e<1)return t.apply(this,arguments)}}function At(e,t){var n;return function(){return--e>0&&(n=t.apply(this,arguments)),e<=1&&(t=null),n}}var Nt=gt(At,2);function qt(e,t,n){t=Ke(t,n);for(var i,a=se(e),s=0,o=a.length;s<o;s++)if(t(e[i=a[s]],i,e))return i}function Pt(e){return function(t,n,i){n=Ke(n,i);for(var a=ie(t),s=e>0?0:a-1;s>=0&&s<a;s+=e)if(n(t[s],s,t))return s;return-1}}var Lt=Pt(1),It=Pt(-1);function Ft(e,t,n,i){for(var a=(n=Ke(n,i,1))(t),s=0,o=ie(e);s<o;){var r=Math.floor((s+o)/2);n(e[r])<a?s=r+1:o=r}return s}function Ut(e,t,n){return function(i,a,s){var o=0,r=ie(i);if("number"==typeof s)e>0?o=s>=0?s:Math.max(s+r,o):r=s>=0?Math.min(s+1,r):s+r+1;else if(n&&s&&r)return i[s=n(i,a)]===a?s:-1;if(a!=a)return(s=t(c.call(i,o,r),K))>=0?s+o:-1;for(s=e>0?o:r-1;s>=0&&s<r;s+=e)if(i[s]===a)return s;return-1}}var Mt=Ut(1,Lt,Ft),zt=Ut(-1,It);function Dt(e,t,n){var i=(yt(e)?Lt:qt)(e,t,n);if(void 0!==i&&-1!==i)return e[i]}function Vt(e,t){return Dt(e,We(t))}function Wt(e,t,n){var i,a;if(t=He(t,n),yt(e))for(i=0,a=e.length;i<a;i++)t(e[i],i,e);else{var s=se(e);for(i=0,a=s.length;i<a;i++)t(e[s[i]],s[i],e)}return e}function $t(e,t,n){t=Ke(t,n);for(var i=!yt(e)&&se(e),a=(i||e).length,s=Array(a),o=0;o<a;o++){var r=i?i[o]:o;s[o]=t(e[r],r,e)}return s}function Ht(e){var t=function(t,n,i,a){var s=!yt(t)&&se(t),o=(s||t).length,r=e>0?0:o-1;for(a||(i=t[s?s[r]:r],r+=e);r>=0&&r<o;r+=e){var c=s?s[r]:r;i=n(i,t[c],c,t)}return i};return function(e,n,i,a){var s=arguments.length>=3;return t(e,He(n,a,4),i,s)}}var Gt=Ht(1),Yt=Ht(-1);function Kt(e,t,n){var i=[];return t=Ke(t,n),Wt(e,(function(e,n,a){t(e,n,a)&&i.push(e)})),i}function Jt(e,t,n){return Kt(e,Tt(Ke(t)),n)}function Xt(e,t,n){t=Ke(t,n);for(var i=!yt(e)&&se(e),a=(i||e).length,s=0;s<a;s++){var o=i?i[s]:s;if(!t(e[o],o,e))return!1}return!0}function Zt(e,t,n){t=Ke(t,n);for(var i=!yt(e)&&se(e),a=(i||e).length,s=0;s<a;s++){var o=i?i[s]:s;if(t(e[o],o,e))return!0}return!1}function Qt(e,t,n,i){return yt(e)||(e=Se(e)),("number"!=typeof n||i)&&(n=0),Mt(e,t,n)>=0}var en=_((function(e,t,n){var i,a;return F(t)?a=t:(t=Ue(t),i=t.slice(0,-1),t=t[t.length-1]),$t(e,(function(e){var s=a;if(!s){if(i&&i.length&&(e=Me(e,i)),null==e)return;s=e[t]}return null==s?s:s.apply(e,n)}))}));function tn(e,t){return $t(e,$e(t))}function nn(e,t){return Kt(e,We(t))}function an(e,t,n){var i,a,s=-1/0,o=-1/0;if(null==t||"number"==typeof t&&"object"!=typeof e[0]&&null!=e)for(var r=0,c=(e=yt(e)?e:Se(e)).length;r<c;r++)null!=(i=e[r])&&i>s&&(s=i);else t=Ke(t,n),Wt(e,(function(e,n,i){((a=t(e,n,i))>o||a===-1/0&&s===-1/0)&&(s=e,o=a)}));return s}function sn(e,t,n){var i,a,s=1/0,o=1/0;if(null==t||"number"==typeof t&&"object"!=typeof e[0]&&null!=e)for(var r=0,c=(e=yt(e)?e:Se(e)).length;r<c;r++)null!=(i=e[r])&&i<s&&(s=i);else t=Ke(t,n),Wt(e,(function(e,n,i){((a=t(e,n,i))<o||a===1/0&&s===1/0)&&(s=e,o=a)}));return s}function on(e,t,n){if(null==t||n)return yt(e)||(e=Se(e)),e[et(e.length-1)];var i=yt(e)?Le(e):Se(e),a=ie(i);t=Math.max(Math.min(t,a),0);for(var s=a-1,o=0;o<t;o++){var r=et(o,s),c=i[o];i[o]=i[r],i[r]=c}return i.slice(0,t)}function rn(e){return on(e,1/0)}function cn(e,t,n){var i=0;return t=Ke(t,n),tn($t(e,(function(e,n,a){return{value:e,index:i++,criteria:t(e,n,a)}})).sort((function(e,t){var n=e.criteria,i=t.criteria;if(n!==i){if(n>i||void 0===n)return 1;if(n<i||void 0===i)return-1}return e.index-t.index})),"value")}function pn(e,t){return function(n,i,a){var s=t?[[],[]]:{};return i=Ke(i,a),Wt(n,(function(t,a){var o=i(t,a,n);e(s,t,o)})),s}}var ln=pn((function(e,t,n){$(e,n)?e[n].push(t):e[n]=[t]})),un=pn((function(e,t,n){e[n]=t})),dn=pn((function(e,t,n){$(e,n)?e[n]++:e[n]=1})),mn=pn((function(e,t,n){e[n?0:1].push(t)}),!0),fn=/[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;function hn(e){return e?W(e)?c.call(e):T(e)?e.match(fn):yt(e)?$t(e,Ve):Se(e):[]}function vn(e){return null==e?0:yt(e)?e.length:se(e).length}function xn(e,t,n){return t in n}var gn=_((function(e,t){var n={},i=t[0];if(null==e)return n;F(i)?(t.length>1&&(i=He(i,t[1])),t=fe(e)):(i=xn,t=wt(t,!1,!1),e=Object(e));for(var a=0,s=t.length;a<s;a++){var o=t[a],r=e[o];i(r,o,e)&&(n[o]=r)}return n})),bn=_((function(e,t){var n,i=t[0];return F(i)?(i=Tt(i),t.length>1&&(n=t[1])):(t=$t(wt(t,!1,!1),String),i=function(e,n){return!Qt(t,n)}),gn(e,i,n)}));function yn(e,t,n){return c.call(e,0,Math.max(0,e.length-(null==t||n?1:t)))}function wn(e,t,n){return null==e||e.length<1?null==t||n?void 0:[]:null==t||n?e[0]:yn(e,e.length-t)}function _n(e,t,n){return c.call(e,null==t||n?1:t)}function kn(e,t,n){return null==e||e.length<1?null==t||n?void 0:[]:null==t||n?e[e.length-1]:_n(e,Math.max(0,e.length-t))}function En(e){return Kt(e,Boolean)}function jn(e,t){return wt(e,t,!1)}var Sn=_((function(e,t){return t=wt(t,!0,!0),Kt(e,(function(e){return!Qt(t,e)}))})),Cn=_((function(e,t){return Sn(e,t)}));function On(e,t,n,i){S(t)||(i=n,n=t,t=!1),null!=n&&(n=Ke(n,i));for(var a=[],s=[],o=0,r=ie(e);o<r;o++){var c=e[o],p=n?n(c,o,e):c;t&&!n?(o&&s===p||a.push(c),s=p):n?Qt(s,p)||(s.push(p),a.push(c)):Qt(a,c)||a.push(c)}return a}var Tn=_((function(e){return On(wt(e,!0,!0))}));function Bn(e){for(var t=[],n=arguments.length,i=0,a=ie(e);i<a;i++){var s=e[i];if(!Qt(t,s)){var o;for(o=1;o<n&&Qt(arguments[o],s);o++);o===n&&t.push(s)}}return t}function Rn(e){for(var t=e&&an(e,ie).length||0,n=Array(t),i=0;i<t;i++)n[i]=tn(e,i);return n}var An=_(Rn);function Nn(e,t){for(var n={},i=0,a=ie(e);i<a;i++)t?n[e[i]]=t[i]:n[e[i][0]]=e[i][1];return n}function qn(e,t,n){null==t&&(t=e||0,e=0),n||(n=t<e?-1:1);for(var i=Math.max(Math.ceil((t-e)/n),0),a=Array(i),s=0;s<i;s++,e+=n)a[s]=e;return a}function Pn(e,t){if(null==t||t<1)return[];for(var n=[],i=0,a=e.length;i<a;)n.push(c.call(e,i,i+=t));return n}function Ln(e,t){return e._chain?ce(t).chain():t}function In(e){return Wt(Te(e),(function(t){var n=ce[t]=e[t];ce.prototype[t]=function(){var e=[this._wrapped];return r.apply(e,arguments),Ln(this,n.apply(ce,e))}})),ce}Wt(["pop","push","reverse","shift","sort","splice","unshift"],(function(e){var t=a[e];ce.prototype[e]=function(){var n=this._wrapped;return null!=n&&(t.apply(n,arguments),"shift"!==e&&"splice"!==e||0!==n.length||delete n[0]),Ln(this,n)}})),Wt(["concat","join","slice"],(function(e){var t=a[e];ce.prototype[e]=function(){var e=this._wrapped;return null!=e&&(e=t.apply(e,arguments)),Ln(this,e)}}));var Fn=In({__proto__:null,VERSION:n,restArguments:_,isObject:k,isNull:E,isUndefined:j,isBoolean:S,isElement:C,isString:T,isNumber:B,isDate:R,isRegExp:A,isError:N,isSymbol:q,isArrayBuffer:P,isDataView:V,isArray:W,isFunction:F,isArguments:G,isFinite:Y,isNaN:K,isTypedArray:ne,isEmpty:oe,isMatch:re,isEqual:me,isMap:_e,isWeakMap:ke,isSet:Ee,isWeakSet:je,keys:se,allKeys:fe,values:Se,pairs:Ce,invert:Oe,functions:Te,methods:Te,extend:Re,extendOwn:Ae,assign:Ae,defaults:Ne,create:Pe,clone:Le,tap:Ie,get:ze,has:De,mapObject:Je,identity:Ve,constant:J,noop:Xe,toPath:Fe,property:$e,propertyOf:Ze,matcher:We,matches:We,times:Qe,random:et,now:tt,escape:at,unescape:st,templateSettings:ot,template:dt,result:mt,uniqueId:ht,chain:vt,iteratee:Ye,partial:gt,bind:bt,bindAll:_t,memoize:kt,delay:Et,defer:jt,throttle:St,debounce:Ct,wrap:Ot,negate:Tt,compose:Bt,after:Rt,before:At,once:Nt,findKey:qt,findIndex:Lt,findLastIndex:It,sortedIndex:Ft,indexOf:Mt,lastIndexOf:zt,find:Dt,detect:Dt,findWhere:Vt,each:Wt,forEach:Wt,map:$t,collect:$t,reduce:Gt,foldl:Gt,inject:Gt,reduceRight:Yt,foldr:Yt,filter:Kt,select:Kt,reject:Jt,every:Xt,all:Xt,some:Zt,any:Zt,contains:Qt,includes:Qt,include:Qt,invoke:en,pluck:tn,where:nn,max:an,min:sn,shuffle:rn,sample:on,sortBy:cn,groupBy:ln,indexBy:un,countBy:dn,partition:mn,toArray:hn,size:vn,pick:gn,omit:bn,first:wn,head:wn,take:wn,initial:yn,last:kn,rest:_n,tail:_n,drop:_n,compact:En,flatten:jn,without:Cn,uniq:On,unique:On,union:Tn,intersection:Bn,difference:Sn,unzip:Rn,transpose:Rn,zip:An,object:Nn,range:qn,chunk:Pn,mixin:In,default:ce});Fn._=Fn,t.VERSION=n,t._=Fn,t._escape=at,t._unescape=st,t.after=Rt,t.allKeys=fe,t.before=At,t.bind=bt,t.bindAll=_t,t.chain=vt,t.chunk=Pn,t.clone=Le,t.compact=En,t.compose=Bt,t.constant=J,t.contains=Qt,t.countBy=dn,t.create=Pe,t.debounce=Ct,t.defaults=Ne,t.defer=jt,t.delay=Et,t.difference=Sn,t.each=Wt,t.every=Xt,t.extend=Re,t.extendOwn=Ae,t.filter=Kt,t.find=Dt,t.findIndex=Lt,t.findKey=qt,t.findLastIndex=It,t.findWhere=Vt,t.first=wn,t.flatten=jn,t.functions=Te,t.get=ze,t.groupBy=ln,t.has=De,t.identity=Ve,t.indexBy=un,t.indexOf=Mt,t.initial=yn,t.intersection=Bn,t.invert=Oe,t.invoke=en,t.isArguments=G,t.isArray=W,t.isArrayBuffer=P,t.isBoolean=S,t.isDataView=V,t.isDate=R,t.isElement=C,t.isEmpty=oe,t.isEqual=me,t.isError=N,t.isFinite=Y,t.isFunction=F,t.isMap=_e,t.isMatch=re,t.isNaN=K,t.isNull=E,t.isNumber=B,t.isObject=k,t.isRegExp=A,t.isSet=Ee,t.isString=T,t.isSymbol=q,t.isTypedArray=ne,t.isUndefined=j,t.isWeakMap=ke,t.isWeakSet=je,t.iteratee=Ye,t.keys=se,t.last=kn,t.lastIndexOf=zt,t.map=$t,t.mapObject=Je,t.matcher=We,t.max=an,t.memoize=kt,t.min=sn,t.mixin=In,t.negate=Tt,t.noop=Xe,t.now=tt,t.object=Nn,t.omit=bn,t.once=Nt,t.pairs=Ce,t.partial=gt,t.partition=mn,t.pick=gn,t.pluck=tn,t.property=$e,t.propertyOf=Ze,t.random=et,t.range=qn,t.reduce=Gt,t.reduceRight=Yt,t.reject=Jt,t.rest=_n,t.restArguments=_,t.result=mt,t.sample=on,t.shuffle=rn,t.size=vn,t.some=Zt,t.sortBy=cn,t.sortedIndex=Ft,t.tap=Ie,t.template=dt,t.templateSettings=ot,t.throttle=St,t.times=Qe,t.toArray=hn,t.toPath=Fe,t.union=Tn,t.uniq=On,t.uniqueId=ht,t.unzip=Rn,t.values=Se,t.where=nn,t.without=Cn,t.wrap=Ot,t.zip=An},2718:(e,t,n)=>{var i=n(7775);e.exports=i._},137:e=>{"use strict";e.exports=e=>{for(var t=e.length,n=0;n<t;)if(e[n]<128)n++;else if(192==(224&e[n])){if(n+1===t||128!=(192&e[n+1])||192==(254&e[n]))return!1;n+=2}else if(224==(240&e[n])){if(n+2>=t||128!=(192&e[n+1])||128!=(192&e[n+2])||224===e[n]&&128==(224&e[n+1])||237===e[n]&&160==(224&e[n+1]))return!1;n+=3}else{if(240!=(248&e[n]))return!1;if(n+3>=t||128!=(192&e[n+1])||128!=(192&e[n+2])||128!=(192&e[n+3])||240===e[n]&&128==(240&e[n+1])||244===e[n]&&e[n+1]>143||e[n]>244)return!1;n+=4}return!0}},311:(e,t,n)=>{"use strict";try{e.exports=n(9516)(__dirname)}catch(t){e.exports=n(137)}},5181:e=>{"use strict";e.exports=function(e,t){if(!e||!e.getHeader||!e.setHeader)throw new TypeError("res argument is required");var i=e.getHeader("Vary")||"",a=Array.isArray(i)?i.join(", "):String(i);(i=n(a,t))&&e.setHeader("Vary",i)},e.exports.append=n;var t=/^[!#$%&'*+\-.^_`|~0-9A-Za-z]+$/;function n(e,n){if("string"!=typeof e)throw new TypeError("header argument is required");if(!n)throw new TypeError("field argument is required");for(var a=Array.isArray(n)?n:i(String(n)),s=0;s<a.length;s++)if(!t.test(a[s]))throw new TypeError("field argument contains an invalid header name");if("*"===e)return e;var o=e,r=i(e.toLowerCase());if(-1!==a.indexOf("*")||-1!==r.indexOf("*"))return"*";for(var c=0;c<a.length;c++){var p=a[c].toLowerCase();-1===r.indexOf(p)&&(r.push(p),o=o?o+", "+a[c]:a[c])}return o}function i(e){for(var t=0,n=[],i=0,a=0,s=e.length;a<s;a++)switch(e.charCodeAt(a)){case 32:i===t&&(i=t=a+1);break;case 44:n.push(e.substring(i,t)),i=t=a+1;break;default:t=a+1}return n.push(e.substring(i,t)),n}},8777:(e,t,n)=>{"use strict";const i=n(8762);i.createWebSocketStream=n(404),i.Server=n(9284),i.Receiver=n(2957),i.Sender=n(7330),e.exports=i},977:(e,t,n)=>{"use strict";const{EMPTY_BUFFER:i}=n(1872);function a(e,t){if(0===e.length)return i;if(1===e.length)return e[0];const n=Buffer.allocUnsafe(t);let a=0;for(let t=0;t<e.length;t++){const i=e[t];n.set(i,a),a+=i.length}return a<t?n.slice(0,a):n}function s(e,t,n,i,a){for(let s=0;s<a;s++)n[i+s]=e[s]^t[3&s]}function o(e,t){const n=e.length;for(let i=0;i<n;i++)e[i]^=t[3&i]}function r(e){return e.byteLength===e.buffer.byteLength?e.buffer:e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}function c(e){if(c.readOnly=!0,Buffer.isBuffer(e))return e;let t;return e instanceof ArrayBuffer?t=Buffer.from(e):ArrayBuffer.isView(e)?t=Buffer.from(e.buffer,e.byteOffset,e.byteLength):(t=Buffer.from(e),c.readOnly=!1),t}try{const t=n(1891),i=t.BufferUtil||t;e.exports={concat:a,mask(e,t,n,a,o){o<48?s(e,t,n,a,o):i.mask(e,t,n,a,o)},toArrayBuffer:r,toBuffer:c,unmask(e,t){e.length<32?o(e,t):i.unmask(e,t)}}}catch(t){e.exports={concat:a,mask:s,toArrayBuffer:r,toBuffer:c,unmask:o}}},1872:e=>{"use strict";e.exports={BINARY_TYPES:["nodebuffer","arraybuffer","fragments"],GUID:"258EAFA5-E914-47DA-95CA-C5AB0DC85B11",kStatusCode:Symbol("status-code"),kWebSocket:Symbol("websocket"),EMPTY_BUFFER:Buffer.alloc(0),NOOP:()=>{}}},62:e=>{"use strict";class t{constructor(e,t){this.target=t,this.type=e}}class n extends t{constructor(e,t){super("message",t),this.data=e}}class i extends t{constructor(e,t,n){super("close",n),this.wasClean=n._closeFrameReceived&&n._closeFrameSent,this.reason=t,this.code=e}}class a extends t{constructor(e){super("open",e)}}class s extends t{constructor(e,t){super("error",t),this.message=e.message,this.error=e}}const o={addEventListener(e,t,o){if("function"!=typeof t)return;function r(e){t.call(this,new n(e,this))}function c(e,n){t.call(this,new i(e,n,this))}function p(e){t.call(this,new s(e,this))}function l(){t.call(this,new a(this))}const u=o&&o.once?"once":"on";"message"===e?(r._listener=t,this[u](e,r)):"close"===e?(c._listener=t,this[u](e,c)):"error"===e?(p._listener=t,this[u](e,p)):"open"===e?(l._listener=t,this[u](e,l)):this[u](e,t)},removeEventListener(e,t){const n=this.listeners(e);for(let i=0;i<n.length;i++)n[i]!==t&&n[i]._listener!==t||this.removeListener(e,n[i])}};e.exports=o},1503:e=>{"use strict";const t=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,0,0,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0];function n(e,t,n){void 0===e[t]?e[t]=[n]:e[t].push(n)}e.exports={format:function(e){return Object.keys(e).map((t=>{let n=e[t];return Array.isArray(n)||(n=[n]),n.map((e=>[t].concat(Object.keys(e).map((t=>{let n=e[t];return Array.isArray(n)||(n=[n]),n.map((e=>!0===e?t:`${t}=${e}`)).join("; ")}))).join("; "))).join(", ")})).join(", ")},parse:function(e){const i=Object.create(null);if(void 0===e||""===e)return i;let a,s,o=Object.create(null),r=!1,c=!1,p=!1,l=-1,u=-1,d=0;for(;d<e.length;d++){const m=e.charCodeAt(d);if(void 0===a)if(-1===u&&1===t[m])-1===l&&(l=d);else if(32===m||9===m)-1===u&&-1!==l&&(u=d);else{if(59!==m&&44!==m)throw new SyntaxError(`Unexpected character at index ${d}`);{if(-1===l)throw new SyntaxError(`Unexpected character at index ${d}`);-1===u&&(u=d);const t=e.slice(l,u);44===m?(n(i,t,o),o=Object.create(null)):a=t,l=u=-1}}else if(void 0===s)if(-1===u&&1===t[m])-1===l&&(l=d);else if(32===m||9===m)-1===u&&-1!==l&&(u=d);else if(59===m||44===m){if(-1===l)throw new SyntaxError(`Unexpected character at index ${d}`);-1===u&&(u=d),n(o,e.slice(l,u),!0),44===m&&(n(i,a,o),o=Object.create(null),a=void 0),l=u=-1}else{if(61!==m||-1===l||-1!==u)throw new SyntaxError(`Unexpected character at index ${d}`);s=e.slice(l,d),l=u=-1}else if(c){if(1!==t[m])throw new SyntaxError(`Unexpected character at index ${d}`);-1===l?l=d:r||(r=!0),c=!1}else if(p)if(1===t[m])-1===l&&(l=d);else if(34===m&&-1!==l)p=!1,u=d;else{if(92!==m)throw new SyntaxError(`Unexpected character at index ${d}`);c=!0}else if(34===m&&61===e.charCodeAt(d-1))p=!0;else if(-1===u&&1===t[m])-1===l&&(l=d);else if(-1===l||32!==m&&9!==m){if(59!==m&&44!==m)throw new SyntaxError(`Unexpected character at index ${d}`);{if(-1===l)throw new SyntaxError(`Unexpected character at index ${d}`);-1===u&&(u=d);let t=e.slice(l,u);r&&(t=t.replace(/\\/g,""),r=!1),n(o,s,t),44===m&&(n(i,a,o),o=Object.create(null),a=void 0),s=void 0,l=u=-1}}else-1===u&&(u=d)}if(-1===l||p)throw new SyntaxError("Unexpected end of input");-1===u&&(u=d);const m=e.slice(l,u);return void 0===a?n(i,m,o):(void 0===s?n(o,m,!0):n(o,s,r?m.replace(/\\/g,""):m),n(i,a,o)),i}}},305:e=>{"use strict";const t=Symbol("kDone"),n=Symbol("kRun");e.exports=class{constructor(e){this[t]=()=>{this.pending--,this[n]()},this.concurrency=e||1/0,this.jobs=[],this.pending=0}add(e){this.jobs.push(e),this[n]()}[n](){if(this.pending!==this.concurrency&&this.jobs.length){const e=this.jobs.shift();this.pending++,e(this[t])}}}},5196:(e,t,n)=>{"use strict";const i=n(8761),a=n(977),s=n(305),{kStatusCode:o,NOOP:r}=n(1872),c=Buffer.from([0,0,255,255]),p=Symbol("permessage-deflate"),l=Symbol("total-length"),u=Symbol("callback"),d=Symbol("buffers"),m=Symbol("error");let f;function h(e){this[d].push(e),this[l]+=e.length}function v(e){this[l]+=e.length,this[p]._maxPayload<1||this[l]<=this[p]._maxPayload?this[d].push(e):(this[m]=new RangeError("Max payload size exceeded"),this[m][o]=1009,this.removeListener("data",v),this.reset())}function x(e){this[p]._inflate=null,e[o]=1007,this[u](e)}e.exports=class{constructor(e,t,n){if(this._maxPayload=0|n,this._options=e||{},this._threshold=void 0!==this._options.threshold?this._options.threshold:1024,this._isServer=!!t,this._deflate=null,this._inflate=null,this.params=null,!f){const e=void 0!==this._options.concurrencyLimit?this._options.concurrencyLimit:10;f=new s(e)}}static get extensionName(){return"permessage-deflate"}offer(){const e={};return this._options.serverNoContextTakeover&&(e.server_no_context_takeover=!0),this._options.clientNoContextTakeover&&(e.client_no_context_takeover=!0),this._options.serverMaxWindowBits&&(e.server_max_window_bits=this._options.serverMaxWindowBits),this._options.clientMaxWindowBits?e.client_max_window_bits=this._options.clientMaxWindowBits:null==this._options.clientMaxWindowBits&&(e.client_max_window_bits=!0),e}accept(e){return e=this.normalizeParams(e),this.params=this._isServer?this.acceptAsServer(e):this.acceptAsClient(e),this.params}cleanup(){if(this._inflate&&(this._inflate.close(),this._inflate=null),this._deflate){const e=this._deflate[u];this._deflate.close(),this._deflate=null,e&&e(new Error("The deflate stream was closed while data was being processed"))}}acceptAsServer(e){const t=this._options,n=e.find((e=>!(!1===t.serverNoContextTakeover&&e.server_no_context_takeover||e.server_max_window_bits&&(!1===t.serverMaxWindowBits||"number"==typeof t.serverMaxWindowBits&&t.serverMaxWindowBits>e.server_max_window_bits)||"number"==typeof t.clientMaxWindowBits&&!e.client_max_window_bits)));if(!n)throw new Error("None of the extension offers can be accepted");return t.serverNoContextTakeover&&(n.server_no_context_takeover=!0),t.clientNoContextTakeover&&(n.client_no_context_takeover=!0),"number"==typeof t.serverMaxWindowBits&&(n.server_max_window_bits=t.serverMaxWindowBits),"number"==typeof t.clientMaxWindowBits?n.client_max_window_bits=t.clientMaxWindowBits:!0!==n.client_max_window_bits&&!1!==t.clientMaxWindowBits||delete n.client_max_window_bits,n}acceptAsClient(e){const t=e[0];if(!1===this._options.clientNoContextTakeover&&t.client_no_context_takeover)throw new Error('Unexpected parameter "client_no_context_takeover"');if(t.client_max_window_bits){if(!1===this._options.clientMaxWindowBits||"number"==typeof this._options.clientMaxWindowBits&&t.client_max_window_bits>this._options.clientMaxWindowBits)throw new Error('Unexpected or invalid parameter "client_max_window_bits"')}else"number"==typeof this._options.clientMaxWindowBits&&(t.client_max_window_bits=this._options.clientMaxWindowBits);return t}normalizeParams(e){return e.forEach((e=>{Object.keys(e).forEach((t=>{let n=e[t];if(n.length>1)throw new Error(`Parameter "${t}" must have only a single value`);if(n=n[0],"client_max_window_bits"===t){if(!0!==n){const e=+n;if(!Number.isInteger(e)||e<8||e>15)throw new TypeError(`Invalid value for parameter "${t}": ${n}`);n=e}else if(!this._isServer)throw new TypeError(`Invalid value for parameter "${t}": ${n}`)}else if("server_max_window_bits"===t){const e=+n;if(!Number.isInteger(e)||e<8||e>15)throw new TypeError(`Invalid value for parameter "${t}": ${n}`);n=e}else{if("client_no_context_takeover"!==t&&"server_no_context_takeover"!==t)throw new Error(`Unknown parameter "${t}"`);if(!0!==n)throw new TypeError(`Invalid value for parameter "${t}": ${n}`)}e[t]=n}))})),e}decompress(e,t,n){f.add((i=>{this._decompress(e,t,((e,t)=>{i(),n(e,t)}))}))}compress(e,t,n){f.add((i=>{this._compress(e,t,((e,t)=>{i(),n(e,t)}))}))}_decompress(e,t,n){const s=this._isServer?"client":"server";if(!this._inflate){const e=`${s}_max_window_bits`,t="number"!=typeof this.params[e]?i.Z_DEFAULT_WINDOWBITS:this.params[e];this._inflate=i.createInflateRaw({...this._options.zlibInflateOptions,windowBits:t}),this._inflate[p]=this,this._inflate[l]=0,this._inflate[d]=[],this._inflate.on("error",x),this._inflate.on("data",v)}this._inflate[u]=n,this._inflate.write(e),t&&this._inflate.write(c),this._inflate.flush((()=>{const e=this._inflate[m];if(e)return this._inflate.close(),this._inflate=null,void n(e);const i=a.concat(this._inflate[d],this._inflate[l]);this._inflate._readableState.endEmitted?(this._inflate.close(),this._inflate=null):(this._inflate[l]=0,this._inflate[d]=[],t&&this.params[`${s}_no_context_takeover`]&&this._inflate.reset()),n(null,i)}))}_compress(e,t,n){const s=this._isServer?"server":"client";if(!this._deflate){const e=`${s}_max_window_bits`,t="number"!=typeof this.params[e]?i.Z_DEFAULT_WINDOWBITS:this.params[e];this._deflate=i.createDeflateRaw({...this._options.zlibDeflateOptions,windowBits:t}),this._deflate[l]=0,this._deflate[d]=[],this._deflate.on("error",r),this._deflate.on("data",h)}this._deflate[u]=n,this._deflate.write(e),this._deflate.flush(i.Z_SYNC_FLUSH,(()=>{if(!this._deflate)return;let e=a.concat(this._deflate[d],this._deflate[l]);t&&(e=e.slice(0,e.length-4)),this._deflate[u]=null,this._deflate[l]=0,this._deflate[d]=[],t&&this.params[`${s}_no_context_takeover`]&&this._deflate.reset(),n(null,e)}))}}},2957:(e,t,n)=>{"use strict";const{Writable:i}=n(2413),a=n(5196),{BINARY_TYPES:s,EMPTY_BUFFER:o,kStatusCode:r,kWebSocket:c}=n(1872),{concat:p,toArrayBuffer:l,unmask:u}=n(977),{isValidStatusCode:d,isValidUTF8:m}=n(6746);function f(e,t,n,i){const a=new e(n?`Invalid WebSocket frame: ${t}`:t);return Error.captureStackTrace(a,f),a[r]=i,a}e.exports=class extends i{constructor(e,t,n,i){super(),this._binaryType=e||s[0],this[c]=void 0,this._extensions=t||{},this._isServer=!!n,this._maxPayload=0|i,this._bufferedBytes=0,this._buffers=[],this._compressed=!1,this._payloadLength=0,this._mask=void 0,this._fragmented=0,this._masked=!1,this._fin=!1,this._opcode=0,this._totalPayloadLength=0,this._messageLength=0,this._fragments=[],this._state=0,this._loop=!1}_write(e,t,n){if(8===this._opcode&&0==this._state)return n();this._bufferedBytes+=e.length,this._buffers.push(e),this.startLoop(n)}consume(e){if(this._bufferedBytes-=e,e===this._buffers[0].length)return this._buffers.shift();if(e<this._buffers[0].length){const t=this._buffers[0];return this._buffers[0]=t.slice(e),t.slice(0,e)}const t=Buffer.allocUnsafe(e);do{const n=this._buffers[0],i=t.length-e;e>=n.length?t.set(this._buffers.shift(),i):(t.set(new Uint8Array(n.buffer,n.byteOffset,e),i),this._buffers[0]=n.slice(e)),e-=n.length}while(e>0);return t}startLoop(e){let t;this._loop=!0;do{switch(this._state){case 0:t=this.getInfo();break;case 1:t=this.getPayloadLength16();break;case 2:t=this.getPayloadLength64();break;case 3:this.getMask();break;case 4:t=this.getData(e);break;default:return void(this._loop=!1)}}while(this._loop);e(t)}getInfo(){if(this._bufferedBytes<2)return void(this._loop=!1);const e=this.consume(2);if(0!=(48&e[0]))return this._loop=!1,f(RangeError,"RSV2 and RSV3 must be clear",!0,1002);const t=64==(64&e[0]);if(t&&!this._extensions[a.extensionName])return this._loop=!1,f(RangeError,"RSV1 must be clear",!0,1002);if(this._fin=128==(128&e[0]),this._opcode=15&e[0],this._payloadLength=127&e[1],0===this._opcode){if(t)return this._loop=!1,f(RangeError,"RSV1 must be clear",!0,1002);if(!this._fragmented)return this._loop=!1,f(RangeError,"invalid opcode 0",!0,1002);this._opcode=this._fragmented}else if(1===this._opcode||2===this._opcode){if(this._fragmented)return this._loop=!1,f(RangeError,`invalid opcode ${this._opcode}`,!0,1002);this._compressed=t}else{if(!(this._opcode>7&&this._opcode<11))return this._loop=!1,f(RangeError,`invalid opcode ${this._opcode}`,!0,1002);if(!this._fin)return this._loop=!1,f(RangeError,"FIN must be set",!0,1002);if(t)return this._loop=!1,f(RangeError,"RSV1 must be clear",!0,1002);if(this._payloadLength>125)return this._loop=!1,f(RangeError,`invalid payload length ${this._payloadLength}`,!0,1002)}if(this._fin||this._fragmented||(this._fragmented=this._opcode),this._masked=128==(128&e[1]),this._isServer){if(!this._masked)return this._loop=!1,f(RangeError,"MASK must be set",!0,1002)}else if(this._masked)return this._loop=!1,f(RangeError,"MASK must be clear",!0,1002);if(126===this._payloadLength)this._state=1;else{if(127!==this._payloadLength)return this.haveLength();this._state=2}}getPayloadLength16(){if(!(this._bufferedBytes<2))return this._payloadLength=this.consume(2).readUInt16BE(0),this.haveLength();this._loop=!1}getPayloadLength64(){if(this._bufferedBytes<8)return void(this._loop=!1);const e=this.consume(8),t=e.readUInt32BE(0);return t>Math.pow(2,21)-1?(this._loop=!1,f(RangeError,"Unsupported WebSocket frame: payload length > 2^53 - 1",!1,1009)):(this._payloadLength=t*Math.pow(2,32)+e.readUInt32BE(4),this.haveLength())}haveLength(){if(this._payloadLength&&this._opcode<8&&(this._totalPayloadLength+=this._payloadLength,this._totalPayloadLength>this._maxPayload&&this._maxPayload>0))return this._loop=!1,f(RangeError,"Max payload size exceeded",!1,1009);this._masked?this._state=3:this._state=4}getMask(){this._bufferedBytes<4?this._loop=!1:(this._mask=this.consume(4),this._state=4)}getData(e){let t=o;if(this._payloadLength){if(this._bufferedBytes<this._payloadLength)return void(this._loop=!1);t=this.consume(this._payloadLength),this._masked&&u(t,this._mask)}return this._opcode>7?this.controlMessage(t):this._compressed?(this._state=5,void this.decompress(t,e)):(t.length&&(this._messageLength=this._totalPayloadLength,this._fragments.push(t)),this.dataMessage())}decompress(e,t){this._extensions[a.extensionName].decompress(e,this._fin,((e,n)=>{if(e)return t(e);if(n.length){if(this._messageLength+=n.length,this._messageLength>this._maxPayload&&this._maxPayload>0)return t(f(RangeError,"Max payload size exceeded",!1,1009));this._fragments.push(n)}const i=this.dataMessage();if(i)return t(i);this.startLoop(t)}))}dataMessage(){if(this._fin){const e=this._messageLength,t=this._fragments;if(this._totalPayloadLength=0,this._messageLength=0,this._fragmented=0,this._fragments=[],2===this._opcode){let n;n="nodebuffer"===this._binaryType?p(t,e):"arraybuffer"===this._binaryType?l(p(t,e)):t,this.emit("message",n)}else{const n=p(t,e);if(!m(n))return this._loop=!1,f(Error,"invalid UTF-8 sequence",!0,1007);this.emit("message",n.toString())}}this._state=0}controlMessage(e){if(8===this._opcode)if(this._loop=!1,0===e.length)this.emit("conclude",1005,""),this.end();else{if(1===e.length)return f(RangeError,"invalid payload length 1",!0,1002);{const t=e.readUInt16BE(0);if(!d(t))return f(RangeError,`invalid status code ${t}`,!0,1002);const n=e.slice(2);if(!m(n))return f(Error,"invalid UTF-8 sequence",!0,1007);this.emit("conclude",t,n.toString()),this.end()}}else 9===this._opcode?this.emit("ping",e):this.emit("pong",e);this._state=0}}},7330:(e,t,n)=>{"use strict";const{randomFillSync:i}=n(6417),a=n(5196),{EMPTY_BUFFER:s}=n(1872),{isValidStatusCode:o}=n(6746),{mask:r,toBuffer:c}=n(977),p=Buffer.alloc(4);class l{constructor(e,t){this._extensions=t||{},this._socket=e,this._firstFragment=!0,this._compress=!1,this._bufferedBytes=0,this._deflating=!1,this._queue=[]}static frame(e,t){const n=t.mask&&t.readOnly;let a=t.mask?6:2,s=e.length;e.length>=65536?(a+=8,s=127):e.length>125&&(a+=2,s=126);const o=Buffer.allocUnsafe(n?e.length+a:a);return o[0]=t.fin?128|t.opcode:t.opcode,t.rsv1&&(o[0]|=64),o[1]=s,126===s?o.writeUInt16BE(e.length,2):127===s&&(o.writeUInt32BE(0,2),o.writeUInt32BE(e.length,6)),t.mask?(i(p,0,4),o[1]|=128,o[a-4]=p[0],o[a-3]=p[1],o[a-2]=p[2],o[a-1]=p[3],n?(r(e,p,o,a,e.length),[o]):(r(e,p,e,0,e.length),[o,e])):[o,e]}close(e,t,n,i){let a;if(void 0===e)a=s;else{if("number"!=typeof e||!o(e))throw new TypeError("First argument must be a valid error code number");if(void 0===t||""===t)a=Buffer.allocUnsafe(2),a.writeUInt16BE(e,0);else{const n=Buffer.byteLength(t);if(n>123)throw new RangeError("The message must not be greater than 123 bytes");a=Buffer.allocUnsafe(2+n),a.writeUInt16BE(e,0),a.write(t,2)}}this._deflating?this.enqueue([this.doClose,a,n,i]):this.doClose(a,n,i)}doClose(e,t,n){this.sendFrame(l.frame(e,{fin:!0,rsv1:!1,opcode:8,mask:t,readOnly:!1}),n)}ping(e,t,n){const i=c(e);if(i.length>125)throw new RangeError("The data size must not be greater than 125 bytes");this._deflating?this.enqueue([this.doPing,i,t,c.readOnly,n]):this.doPing(i,t,c.readOnly,n)}doPing(e,t,n,i){this.sendFrame(l.frame(e,{fin:!0,rsv1:!1,opcode:9,mask:t,readOnly:n}),i)}pong(e,t,n){const i=c(e);if(i.length>125)throw new RangeError("The data size must not be greater than 125 bytes");this._deflating?this.enqueue([this.doPong,i,t,c.readOnly,n]):this.doPong(i,t,c.readOnly,n)}doPong(e,t,n,i){this.sendFrame(l.frame(e,{fin:!0,rsv1:!1,opcode:10,mask:t,readOnly:n}),i)}send(e,t,n){const i=c(e),s=this._extensions[a.extensionName];let o=t.binary?2:1,r=t.compress;if(this._firstFragment?(this._firstFragment=!1,r&&s&&(r=i.length>=s._threshold),this._compress=r):(r=!1,o=0),t.fin&&(this._firstFragment=!0),s){const e={fin:t.fin,rsv1:r,opcode:o,mask:t.mask,readOnly:c.readOnly};this._deflating?this.enqueue([this.dispatch,i,this._compress,e,n]):this.dispatch(i,this._compress,e,n)}else this.sendFrame(l.frame(i,{fin:t.fin,rsv1:!1,opcode:o,mask:t.mask,readOnly:c.readOnly}),n)}dispatch(e,t,n,i){if(!t)return void this.sendFrame(l.frame(e,n),i);const s=this._extensions[a.extensionName];this._bufferedBytes+=e.length,this._deflating=!0,s.compress(e,n.fin,((t,a)=>{if(this._socket.destroyed){const e=new Error("The socket was closed while data was being compressed");"function"==typeof i&&i(e);for(let t=0;t<this._queue.length;t++){const n=this._queue[t][4];"function"==typeof n&&n(e)}}else this._bufferedBytes-=e.length,this._deflating=!1,n.readOnly=!1,this.sendFrame(l.frame(a,n),i),this.dequeue()}))}dequeue(){for(;!this._deflating&&this._queue.length;){const e=this._queue.shift();this._bufferedBytes-=e[1].length,Reflect.apply(e[0],this,e.slice(1))}}enqueue(e){this._bufferedBytes+=e[1].length,this._queue.push(e)}sendFrame(e,t){2===e.length?(this._socket.cork(),this._socket.write(e[0]),this._socket.write(e[1],t),this._socket.uncork()):this._socket.write(e[0],t)}}e.exports=l},404:(e,t,n)=>{"use strict";const{Duplex:i}=n(2413);function a(e){e.emit("close")}function s(){!this.destroyed&&this._writableState.finished&&this.destroy()}function o(e){this.removeListener("error",o),this.destroy(),0===this.listenerCount("error")&&this.emit("error",e)}e.exports=function(e,t){let n=!0;function r(){n&&e._socket.resume()}e.readyState===e.CONNECTING?e.once("open",(function(){e._receiver.removeAllListeners("drain"),e._receiver.on("drain",r)})):(e._receiver.removeAllListeners("drain"),e._receiver.on("drain",r));const c=new i({...t,autoDestroy:!1,emitClose:!1,objectMode:!1,writableObjectMode:!1});return e.on("message",(function(t){c.push(t)||(n=!1,e._socket.pause())})),e.once("error",(function(e){c.destroyed||c.destroy(e)})),e.once("close",(function(){c.destroyed||c.push(null)})),c._destroy=function(t,n){if(e.readyState===e.CLOSED)return n(t),void process.nextTick(a,c);let i=!1;e.once("error",(function(e){i=!0,n(e)})),e.once("close",(function(){i||n(t),process.nextTick(a,c)})),e.terminate()},c._final=function(t){e.readyState!==e.CONNECTING?null!==e._socket&&(e._socket._writableState.finished?(t(),c._readableState.endEmitted&&c.destroy()):(e._socket.once("finish",(function(){t()})),e.close())):e.once("open",(function(){c._final(t)}))},c._read=function(){e.readyState!==e.OPEN||n||(n=!0,e._receiver._writableState.needDrain||e._socket.resume())},c._write=function(t,n,i){e.readyState!==e.CONNECTING?e.send(t,i):e.once("open",(function(){c._write(t,n,i)}))},c.on("end",s),c.on("error",o),c}},6746:(e,t,n)=>{"use strict";try{const e=n(311);t.isValidUTF8="object"==typeof e?e.Validation.isValidUTF8:e}catch(e){t.isValidUTF8=()=>!0}t.isValidStatusCode=e=>e>=1e3&&e<=1014&&1004!==e&&1005!==e&&1006!==e||e>=3e3&&e<=4999},9284:(e,t,n)=>{"use strict";const i=n(8614),{createHash:a}=n(6417),{createServer:s,STATUS_CODES:o}=n(8605),r=n(5196),c=n(8762),{format:p,parse:l}=n(1503),{GUID:u,kWebSocket:d}=n(1872),m=/^[+/0-9A-Za-z]{22}==$/;function f(e){e.emit("close")}function h(){this.destroy()}function v(e,t,n,i){e.writable&&(n=n||o[t],i={Connection:"close","Content-Type":"text/html","Content-Length":Buffer.byteLength(n),...i},e.write(`HTTP/1.1 ${t} ${o[t]}\r\n`+Object.keys(i).map((e=>`${e}: ${i[e]}`)).join("\r\n")+"\r\n\r\n"+n)),e.removeListener("error",h),e.destroy()}e.exports=class extends i{constructor(e,t){if(super(),null==(e={maxPayload:104857600,perMessageDeflate:!1,handleProtocols:null,clientTracking:!0,verifyClient:null,noServer:!1,backlog:null,server:null,host:null,path:null,port:null,...e}).port&&!e.server&&!e.noServer)throw new TypeError('One of the "port", "server", or "noServer" options must be specified');if(null!=e.port?(this._server=s(((e,t)=>{const n=o[426];t.writeHead(426,{"Content-Length":n.length,"Content-Type":"text/plain"}),t.end(n)})),this._server.listen(e.port,e.host,e.backlog,t)):e.server&&(this._server=e.server),this._server){const e=this.emit.bind(this,"connection");this._removeListeners=function(e,t){for(const n of Object.keys(t))e.on(n,t[n]);return function(){for(const n of Object.keys(t))e.removeListener(n,t[n])}}(this._server,{listening:this.emit.bind(this,"listening"),error:this.emit.bind(this,"error"),upgrade:(t,n,i)=>{this.handleUpgrade(t,n,i,e)}})}!0===e.perMessageDeflate&&(e.perMessageDeflate={}),e.clientTracking&&(this.clients=new Set),this.options=e}address(){if(this.options.noServer)throw new Error('The server is operating in "noServer" mode');return this._server?this._server.address():null}close(e){if(e&&this.once("close",e),this.clients)for(const e of this.clients)e.terminate();const t=this._server;t&&(this._removeListeners(),this._removeListeners=this._server=null,null!=this.options.port)?t.close((()=>this.emit("close"))):process.nextTick(f,this)}shouldHandle(e){if(this.options.path){const t=e.url.indexOf("?");if((-1!==t?e.url.slice(0,t):e.url)!==this.options.path)return!1}return!0}handleUpgrade(e,t,n,i){t.on("error",h);const a=void 0!==e.headers["sec-websocket-key"]&&e.headers["sec-websocket-key"].trim(),s=+e.headers["sec-websocket-version"],o={};if("GET"!==e.method||"websocket"!==e.headers.upgrade.toLowerCase()||!a||!m.test(a)||8!==s&&13!==s||!this.shouldHandle(e))return v(t,400);if(this.options.perMessageDeflate){const n=new r(this.options.perMessageDeflate,!0,this.options.maxPayload);try{const t=l(e.headers["sec-websocket-extensions"]);t[r.extensionName]&&(n.accept(t[r.extensionName]),o[r.extensionName]=n)}catch(e){return v(t,400)}}if(this.options.verifyClient){const r={origin:e.headers[""+(8===s?"sec-websocket-origin":"origin")],secure:!(!e.socket.authorized&&!e.socket.encrypted),req:e};if(2===this.options.verifyClient.length)return void this.options.verifyClient(r,((s,r,c,p)=>{if(!s)return v(t,r||401,c,p);this.completeUpgrade(a,o,e,t,n,i)}));if(!this.options.verifyClient(r))return v(t,401)}this.completeUpgrade(a,o,e,t,n,i)}completeUpgrade(e,t,n,i,s,o){if(!i.readable||!i.writable)return i.destroy();if(i[d])throw new Error("server.handleUpgrade() was called more than once with the same socket, possibly due to a misconfiguration");const l=["HTTP/1.1 101 Switching Protocols","Upgrade: websocket","Connection: Upgrade",`Sec-WebSocket-Accept: ${a("sha1").update(e+u).digest("base64")}`],m=new c(null);let f=n.headers["sec-websocket-protocol"];if(f&&(f=f.trim().split(/ *, */),f=this.options.handleProtocols?this.options.handleProtocols(f,n):f[0],f&&(l.push(`Sec-WebSocket-Protocol: ${f}`),m._protocol=f)),t[r.extensionName]){const e=t[r.extensionName].params,n=p({[r.extensionName]:[e]});l.push(`Sec-WebSocket-Extensions: ${n}`),m._extensions=t}this.emit("headers",l,n),i.write(l.concat("\r\n").join("\r\n")),i.removeListener("error",h),m.setSocket(i,s,this.options.maxPayload),this.clients&&(this.clients.add(m),m.on("close",(()=>this.clients.delete(m)))),o(m,n)}}},8762:(e,t,n)=>{"use strict";const i=n(8614),a=n(7211),s=n(8605),o=n(1631),r=n(4016),{randomBytes:c,createHash:p}=n(6417),{URL:l}=n(8835),u=n(5196),d=n(2957),m=n(7330),{BINARY_TYPES:f,EMPTY_BUFFER:h,GUID:v,kStatusCode:x,kWebSocket:g,NOOP:b}=n(1872),{addEventListener:y,removeEventListener:w}=n(62),{format:_,parse:k}=n(1503),{toBuffer:E}=n(977),j=["CONNECTING","OPEN","CLOSING","CLOSED"],S=[8,13];class C extends i{constructor(e,t,n){super(),this._binaryType=f[0],this._closeCode=1006,this._closeFrameReceived=!1,this._closeFrameSent=!1,this._closeMessage="",this._closeTimer=null,this._extensions={},this._protocol="",this._readyState=C.CONNECTING,this._receiver=null,this._sender=null,this._socket=null,null!==e?(this._bufferedAmount=0,this._isServer=!1,this._redirects=0,Array.isArray(t)?t=t.join(", "):"object"==typeof t&&null!==t&&(n=t,t=void 0),O(this,e,t,n)):this._isServer=!0}get binaryType(){return this._binaryType}set binaryType(e){f.includes(e)&&(this._binaryType=e,this._receiver&&(this._receiver._binaryType=e))}get bufferedAmount(){return this._socket?this._socket._writableState.length+this._sender._bufferedBytes:this._bufferedAmount}get extensions(){return Object.keys(this._extensions).join()}get protocol(){return this._protocol}get readyState(){return this._readyState}get url(){return this._url}setSocket(e,t,n){const i=new d(this.binaryType,this._extensions,this._isServer,n);this._sender=new m(e,this._extensions),this._receiver=i,this._socket=e,i[g]=this,e[g]=this,i.on("conclude",N),i.on("drain",q),i.on("error",P),i.on("message",I),i.on("ping",F),i.on("pong",U),e.setTimeout(0),e.setNoDelay(),t.length>0&&e.unshift(t),e.on("close",M),e.on("data",z),e.on("end",D),e.on("error",V),this._readyState=C.OPEN,this.emit("open")}emitClose(){if(!this._socket)return this._readyState=C.CLOSED,void this.emit("close",this._closeCode,this._closeMessage);this._extensions[u.extensionName]&&this._extensions[u.extensionName].cleanup(),this._receiver.removeAllListeners(),this._readyState=C.CLOSED,this.emit("close",this._closeCode,this._closeMessage)}close(e,t){if(this.readyState!==C.CLOSED){if(this.readyState===C.CONNECTING){const e="WebSocket was closed before the connection was established";return R(this,this._req,e)}this.readyState!==C.CLOSING?(this._readyState=C.CLOSING,this._sender.close(e,t,!this._isServer,(e=>{e||(this._closeFrameSent=!0,this._closeFrameReceived&&this._socket.end())})),this._closeTimer=setTimeout(this._socket.destroy.bind(this._socket),3e4)):this._closeFrameSent&&this._closeFrameReceived&&this._socket.end()}}ping(e,t,n){if(this.readyState===C.CONNECTING)throw new Error("WebSocket is not open: readyState 0 (CONNECTING)");"function"==typeof e?(n=e,e=t=void 0):"function"==typeof t&&(n=t,t=void 0),"number"==typeof e&&(e=e.toString()),this.readyState===C.OPEN?(void 0===t&&(t=!this._isServer),this._sender.ping(e||h,t,n)):A(this,e,n)}pong(e,t,n){if(this.readyState===C.CONNECTING)throw new Error("WebSocket is not open: readyState 0 (CONNECTING)");"function"==typeof e?(n=e,e=t=void 0):"function"==typeof t&&(n=t,t=void 0),"number"==typeof e&&(e=e.toString()),this.readyState===C.OPEN?(void 0===t&&(t=!this._isServer),this._sender.pong(e||h,t,n)):A(this,e,n)}send(e,t,n){if(this.readyState===C.CONNECTING)throw new Error("WebSocket is not open: readyState 0 (CONNECTING)");if("function"==typeof t&&(n=t,t={}),"number"==typeof e&&(e=e.toString()),this.readyState!==C.OPEN)return void A(this,e,n);const i={binary:"string"!=typeof e,mask:!this._isServer,compress:!0,fin:!0,...t};this._extensions[u.extensionName]||(i.compress=!1),this._sender.send(e||h,i,n)}terminate(){if(this.readyState!==C.CLOSED){if(this.readyState===C.CONNECTING){const e="WebSocket was closed before the connection was established";return R(this,this._req,e)}this._socket&&(this._readyState=C.CLOSING,this._socket.destroy())}}}function O(e,t,n,i){const o={protocolVersion:S[1],maxPayload:104857600,perMessageDeflate:!0,followRedirects:!1,maxRedirects:10,...i,createConnection:void 0,socketPath:void 0,hostname:void 0,protocol:void 0,timeout:void 0,method:void 0,host:void 0,path:void 0,port:void 0};if(!S.includes(o.protocolVersion))throw new RangeError(`Unsupported protocol version: ${o.protocolVersion} (supported versions: ${S.join(", ")})`);let r;t instanceof l?(r=t,e._url=t.href):(r=new l(t),e._url=t);const d="ws+unix:"===r.protocol;if(!(r.host||d&&r.pathname))throw new Error(`Invalid URL: ${e.url}`);const m="wss:"===r.protocol||"https:"===r.protocol,f=m?443:80,h=c(16).toString("base64"),x=m?a.get:s.get;let g;if(o.createConnection=m?B:T,o.defaultPort=o.defaultPort||f,o.port=r.port||f,o.host=r.hostname.startsWith("[")?r.hostname.slice(1,-1):r.hostname,o.headers={"Sec-WebSocket-Version":o.protocolVersion,"Sec-WebSocket-Key":h,Connection:"Upgrade",Upgrade:"websocket",...o.headers},o.path=r.pathname+r.search,o.timeout=o.handshakeTimeout,o.perMessageDeflate&&(g=new u(!0!==o.perMessageDeflate?o.perMessageDeflate:{},!1,o.maxPayload),o.headers["Sec-WebSocket-Extensions"]=_({[u.extensionName]:g.offer()})),n&&(o.headers["Sec-WebSocket-Protocol"]=n),o.origin&&(o.protocolVersion<13?o.headers["Sec-WebSocket-Origin"]=o.origin:o.headers.Origin=o.origin),(r.username||r.password)&&(o.auth=`${r.username}:${r.password}`),d){const e=o.path.split(":");o.socketPath=e[0],o.path=e[1]}let b=e._req=x(o);o.timeout&&b.on("timeout",(()=>{R(e,b,"Opening handshake has timed out")})),b.on("error",(t=>{null===b||b.aborted||(b=e._req=null,e._readyState=C.CLOSING,e.emit("error",t),e.emitClose())})),b.on("response",(a=>{const s=a.headers.location,r=a.statusCode;if(s&&o.followRedirects&&r>=300&&r<400){if(++e._redirects>o.maxRedirects)return void R(e,b,"Maximum redirects exceeded");b.abort();const a=new l(s,t);O(e,a,n,i)}else e.emit("unexpected-response",b,a)||R(e,b,`Unexpected server response: ${a.statusCode}`)})),b.on("upgrade",((t,i,a)=>{if(e.emit("upgrade",t),e.readyState!==C.CONNECTING)return;b=e._req=null;const s=p("sha1").update(h+v).digest("base64");if(t.headers["sec-websocket-accept"]!==s)return void R(e,i,"Invalid Sec-WebSocket-Accept header");const r=t.headers["sec-websocket-protocol"],c=(n||"").split(/, */);let l;if(!n&&r?l="Server sent a subprotocol but none was requested":n&&!r?l="Server sent no subprotocol":r&&!c.includes(r)&&(l="Server sent an invalid subprotocol"),l)R(e,i,l);else{if(r&&(e._protocol=r),g)try{const n=k(t.headers["sec-websocket-extensions"]);n[u.extensionName]&&(g.accept(n[u.extensionName]),e._extensions[u.extensionName]=g)}catch(t){return void R(e,i,"Invalid Sec-WebSocket-Extensions header")}e.setSocket(i,a,o.maxPayload)}}))}function T(e){return e.path=e.socketPath,o.connect(e)}function B(e){return e.path=void 0,e.servername||""===e.servername||(e.servername=o.isIP(e.host)?"":e.host),r.connect(e)}function R(e,t,n){e._readyState=C.CLOSING;const i=new Error(n);Error.captureStackTrace(i,R),t.setHeader?(t.abort(),t.once("abort",e.emitClose.bind(e)),e.emit("error",i)):(t.destroy(i),t.once("error",e.emit.bind(e,"error")),t.once("close",e.emitClose.bind(e)))}function A(e,t,n){if(t){const n=E(t).length;e._socket?e._sender._bufferedBytes+=n:e._bufferedAmount+=n}if(n){n(new Error(`WebSocket is not open: readyState ${e.readyState} (${j[e.readyState]})`))}}function N(e,t){const n=this[g];n._socket.removeListener("data",z),n._socket.resume(),n._closeFrameReceived=!0,n._closeMessage=t,n._closeCode=e,1005===e?n.close():n.close(e,t)}function q(){this[g]._socket.resume()}function P(e){const t=this[g];t._socket.removeListener("data",z),t._readyState=C.CLOSING,t._closeCode=e[x],t.emit("error",e),t._socket.destroy()}function L(){this[g].emitClose()}function I(e){this[g].emit("message",e)}function F(e){const t=this[g];t.pong(e,!t._isServer,b),t.emit("ping",e)}function U(e){this[g].emit("pong",e)}function M(){const e=this[g];this.removeListener("close",M),this.removeListener("end",D),e._readyState=C.CLOSING,e._socket.read(),e._receiver.end(),this.removeListener("data",z),this[g]=void 0,clearTimeout(e._closeTimer),e._receiver._writableState.finished||e._receiver._writableState.errorEmitted?e.emitClose():(e._receiver.on("error",L),e._receiver.on("finish",L))}function z(e){this[g]._receiver.write(e)||this.pause()}function D(){const e=this[g];e._readyState=C.CLOSING,e._receiver.end(),this.end()}function V(){const e=this[g];this.removeListener("error",V),this.on("error",b),e&&(e._readyState=C.CLOSING,this.destroy())}j.forEach(((e,t)=>{const n={enumerable:!0,value:t};Object.defineProperty(C.prototype,e,n),Object.defineProperty(C,e,n)})),["binaryType","bufferedAmount","extensions","protocol","readyState","url"].forEach((e=>{Object.defineProperty(C.prototype,e,{enumerable:!0})})),["open","error","close","message"].forEach((e=>{Object.defineProperty(C.prototype,`on${e}`,{configurable:!0,enumerable:!0,get(){const t=this.listeners(e);for(let e=0;e<t.length;e++)if(t[e]._listener)return t[e]._listener},set(t){const n=this.listeners(e);for(let t=0;t<n.length;t++)n[t]._listener&&this.removeListener(e,n[t]);this.addEventListener(e,t)}})})),C.prototype.addEventListener=y,C.prototype.removeEventListener=w,e.exports=C},2357:e=>{"use strict";e.exports=require("assert")},6417:e=>{"use strict";e.exports=require("crypto")},8614:e=>{"use strict";e.exports=require("events")},5747:e=>{"use strict";e.exports=require("fs")},8605:e=>{"use strict";e.exports=require("http")},7211:e=>{"use strict";e.exports=require("https")},1631:e=>{"use strict";e.exports=require("net")},2087:e=>{"use strict";e.exports=require("os")},5622:e=>{"use strict";e.exports=require("path")},1191:e=>{"use strict";e.exports=require("querystring")},2413:e=>{"use strict";e.exports=require("stream")},4016:e=>{"use strict";e.exports=require("tls")},3867:e=>{"use strict";e.exports=require("tty")},8835:e=>{"use strict";e.exports=require("url")},1669:e=>{"use strict";e.exports=require("util")},8761:e=>{"use strict";e.exports=require("zlib")}},t={};function n(i){var a=t[i];if(void 0!==a)return a.exports;var s=t[i]={exports:{}};return e[i].call(s.exports,s,s.exports,n),s.exports}var i={};(()=>{"use strict";var e=i;Object.defineProperty(e,"__esModule",{value:!0}),e.bootstrap=void 0;const t=n(3094),a=n(2299);e.bootstrap=async e=>{try{const n=new t.WebServer(e);n.on("listening",(()=>console.log("WebServer started on %s:%d",a.dev.hostname,e))),await n.listen()}catch(e){console.error(e)}}})(),module.exports=i})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,